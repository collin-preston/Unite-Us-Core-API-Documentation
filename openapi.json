{
    "openapi": "3.0.1",
    "info": {
        "title": "Unite US API",
        "description": "\n<p>Unite US API.</p>\n&copy; 2020 Unite US, Inc. All Rights Reserved.",
        "version": "3",
        "x-copyright": "&copy; 2020 Unite US, Inc. All Rights Reserved.",
        "x-logo": {
            "url": "https://s3.amazonaws.com/static-public-v3-uudev/assets/app-client/unite-us-logo.png",
            "backgroundColor": "#FFFFFF",
            "altText": "Unite Us logo"
          }
    },
    "servers": [{
        "url": "//localhost:3000/api"
    }],
    "tags": [{
        "name": "API: Bootstrap",
        "description": ""
    }, {
        "name": "API: Status",
        "description": ""
    }, {
        "name": "Address Book Groups",
        "description": ""
    }, {
        "name": "All-Time Reports: Actionables Summary",
        "description": ""
    }, {
        "name": "All-Time Reports: Counts Summary",
        "description": ""
    }, {
        "name": "Area to Accept Consent Requests that are created via Attestation",
        "description": ""
    }, {
        "name": "Area to Reject Consent Requests that are created via Attestation",
        "description": ""
    }, {
        "name": "Assistance Requests: Filter Timeline Events",
        "description": ""
    }, {
        "name": "Assistance Requests: Timeline Events",
        "description": ""
    }, {
        "name": "Authentication: Validate Token",
        "description": ""
    }, {
        "name": "Back Office: Duplicate a form and all associations",
        "description": ""
    }, {
        "name": "Back Office: Duplicate a section and all its children",
        "description": ""
    }, {
        "name": "Back Office: Forms",
        "description": ""
    }, {
        "name": "Back Office: Forms -> Questions",
        "description": ""
    }, {
        "name": "Back Office: Forms -> Questions -> Input Options",
        "description": ""
    }, {
        "name": "Back Office: Forms -> Questions -> Validators",
        "description": ""
    }, {
        "name": "Back Office: Forms -> Sections",
        "description": ""
    }, {
        "name": "Back Office: Forms Publish",
        "description": ""
    }, {
        "name": "Back Office: Global Questions Search",
        "description": ""
    }, {
        "name": "Back Office: Universal Search",
        "description": ""
    }, {
        "name": "Back Office: Update a Questions Section.  Move a question to a nother section",
        "description": ""
    }, {
        "name": "Back Office: Use Forms",
        "description": ""
    }, {
        "name": "Care Coordinators",
        "description": ""
    }, {
        "name": "Care Team Members: Addresses",
        "description": ""
    }, {
        "name": "Care Team Members: Email Addresses",
        "description": ""
    }, {
        "name": "Care Team Members: Phone Numbers",
        "description": ""
    }, {
        "name": "Cases",
        "description": ""
    }, {
        "name": "Cases: Assessments/Forms",
        "description": ""
    }, {
        "name": "Cases: Documents",
        "description": ""
    }, {
        "name": "Cases: Primary Case Worker",
        "description": ""
    }, {
        "name": "Client Gender by Age",
        "description": ""
    }, {
        "name": "Client Military Affiliation by Gender",
        "description": ""
    }, {
        "name": "Client Military Branch of Service by Gender",
        "description": ""
    }, {
        "name": "Client Military Service Era by Branch of Service",
        "description": ""
    }, {
        "name": "Client Military Service Era by Gender",
        "description": ""
    }, {
        "name": "Client Military Transition Status by Branch of Service",
        "description": ""
    }, {
        "name": "Client Military Transitioning by Gender",
        "description": ""
    }, {
        "name": "Client Race by Ethnicity",
        "description": ""
    }, {
        "name": "Clients Military Status by Gender",
        "description": ""
    }, {
        "name": "Clients by Age",
        "description": ""
    }, {
        "name": "Clients by Ethnicity",
        "description": ""
    }, {
        "name": "Clients by Gender",
        "description": ""
    }, {
        "name": "Clients by Military Affiliation",
        "description": ""
    }, {
        "name": "Clients by Military Branch of Service",
        "description": ""
    }, {
        "name": "Clients by Military Deployment",
        "description": ""
    }, {
        "name": "Clients by Military Discharge",
        "description": ""
    }, {
        "name": "Clients by Military Service Era",
        "description": ""
    }, {
        "name": "Clients by Military Status",
        "description": ""
    }, {
        "name": "Clients by Military Transitioning Status",
        "description": ""
    }, {
        "name": "Clients by Race",
        "description": ""
    }, {
        "name": "Closed Service Cases by Service Type",
        "description": ""
    }, {
        "name": "Closed Service Cases by Service Type and Outcome",
        "description": ""
    }, {
        "name": "Closed Service Cases by Sub Types of Service Type",
        "description": ""
    }, {
        "name": "Confirming Two-Factor Authentication (2FA) Registration",
        "description": "\n<p>Confirm 2FA verification code for a Unite US user account.</p>\n"
    }, {
        "name": "Contact: Care Team",
        "description": ""
    }, {
        "name": "Contacts",
        "description": ""
    }, {
        "name": "Contacts Gender by Age Report",
        "description": ""
    }, {
        "name": "Contacts with Intakes",
        "description": ""
    }, {
        "name": "Contacts: Addresses",
        "description": ""
    }, {
        "name": "Contacts: Consents - Create an email consent request",
        "description": ""
    }, {
        "name": "Contacts: Consents - Create an sms consent request",
        "description": ""
    }, {
        "name": "Contacts: Consents - Create and accept a document consent request",
        "description": ""
    }, {
        "name": "Contacts: Consents - Create consent request URL",
        "description": ""
    }, {
        "name": "Contacts: Documents",
        "description": ""
    }, {
        "name": "Contacts: Email Addresses",
        "description": ""
    }, {
        "name": "Contacts: Filter Timeline Events",
        "description": ""
    }, {
        "name": "Contacts: Filter by Primary Worker",
        "description": ""
    }, {
        "name": "Contacts: Forms",
        "description": ""
    }, {
        "name": "Contacts: Interactions",
        "description": ""
    }, {
        "name": "Contacts: Phone Numbers",
        "description": ""
    }, {
        "name": "Contacts: Program Enrollment",
        "description": ""
    }, {
        "name": "Contacts: Referrals",
        "description": ""
    }, {
        "name": "Contacts: Respond to Form",
        "description": ""
    }, {
        "name": "Contacts: Select/Use by Group",
        "description": ""
    }, {
        "name": "Contacts: Timeline Events",
        "description": ""
    }, {
        "name": "Controller for Revoking Consent for a Client",
        "description": ""
    }, {
        "name": "Document Deletion",
        "description": ""
    }, {
        "name": "Documents",
        "description": ""
    }, {
        "name": "EMR Context",
        "description": ""
    }, {
        "name": "EMR Patient Contact Information",
        "description": ""
    }, {
        "name": "EMR Patient Contact association",
        "description": ""
    }, {
        "name": "Exports",
        "description": ""
    }, {
        "name": "Global Contact Notification Settings for Users",
        "description": ""
    }, {
        "name": "Global Notification Settings for Users",
        "description": ""
    }, {
        "name": "Group Cases: Enrollment",
        "description": ""
    }, {
        "name": "Group sharing",
        "description": ""
    }, {
        "name": "Groups",
        "description": ""
    }, {
        "name": "Groups -> Assistance Requests: Forms",
        "description": ""
    }, {
        "name": "Groups Service Types: Outcomes",
        "description": ""
    }, {
        "name": "Groups: Assistance Request Form Config",
        "description": ""
    }, {
        "name": "Groups: Assistance Requests",
        "description": ""
    }, {
        "name": "Groups: Cases",
        "description": ""
    }, {
        "name": "Groups: Cases Converted from Sent Referrals",
        "description": ""
    }, {
        "name": "Groups: Closed Referrals",
        "description": ""
    }, {
        "name": "Groups: Draft Referrals",
        "description": ""
    }, {
        "name": "Groups: Filter Timeline Events",
        "description": ""
    }, {
        "name": "Groups: Forms Available for Use",
        "description": ""
    }, {
        "name": "Groups: Forms Returns a form with a single question containing only the questions marked as intake",
        "description": ""
    }, {
        "name": "Groups: Hours of Operation",
        "description": ""
    }, {
        "name": "Groups: Open Channel referrals",
        "description": ""
    }, {
        "name": "Groups: Program Users",
        "description": ""
    }, {
        "name": "Groups: Programs",
        "description": ""
    }, {
        "name": "Groups: Referral Contact",
        "description": ""
    }, {
        "name": "Groups: Referral Contact Forms",
        "description": ""
    }, {
        "name": "Groups: Referral Contact Program Enrollment",
        "description": ""
    }, {
        "name": "Groups: Referral Contact Respond to Form",
        "description": ""
    }, {
        "name": "Groups: Referrals",
        "description": ""
    }, {
        "name": "Groups: Referrals Received",
        "description": ""
    }, {
        "name": "Groups: Referrals Sent",
        "description": ""
    }, {
        "name": "Groups: Screenings",
        "description": ""
    }, {
        "name": "Groups: Search -> Global Contacts",
        "description": ""
    }, {
        "name": "Groups: Service Case Contact Forms",
        "description": ""
    }, {
        "name": "Groups: Service Case Contact Respond to Form",
        "description": ""
    }, {
        "name": "Groups: Service Types Offered",
        "description": ""
    }, {
        "name": "Groups: Service Types Offered along with Outcomes scope to the Group",
        "description": ""
    }, {
        "name": "Groups: Service Types Offered: Sub-Types",
        "description": ""
    }, {
        "name": "Groups: Timeline Events",
        "description": ""
    }, {
        "name": "Groups: UniteUs Partcipation Agreements",
        "description": "\n<p>Organization Administrators Accept Participation Agreement on Behalf of a\nGroup</p>\n"
    }, {
        "name": "Groups: User Invitation Reminders",
        "description": ""
    }, {
        "name": "Groups: User Invitations",
        "description": ""
    }, {
        "name": "Groups: Users",
        "description": ""
    }, {
        "name": "Groups: Users - System Roles",
        "description": ""
    }, {
        "name": "Groups: Users With Contacts",
        "description": ""
    }, {
        "name": "Groups::Contacts::Cases: Filter Timeline Events",
        "description": ""
    }, {
        "name": "Groups::Contacts::Cases: Timeline Events",
        "description": ""
    }, {
        "name": "Groups::Contacts::Households::Members",
        "description": ""
    }, {
        "name": "Groups::Contacts::Households::MembersCounts",
        "description": ""
    }, {
        "name": "Groups::Contacts::Households::MembersCounts::Disable",
        "description": ""
    }, {
        "name": "Groups::Contacts::Households::MembersCounts::Enable",
        "description": ""
    }, {
        "name": "Groups::Referrals: Hold",
        "description": ""
    }, {
        "name": "Groups::Referrals: Reassign Program",
        "description": ""
    }, {
        "name": "Groups::Referrals: Recall",
        "description": ""
    }, {
        "name": "Groups::Users: Connections",
        "description": ""
    }, {
        "name": "Ingestions",
        "description": ""
    }, {
        "name": "Intake: Documents",
        "description": ""
    }, {
        "name": "Invitations: User",
        "description": ""
    }, {
        "name": "Network Client Military Affiliation by Gender",
        "description": ""
    }, {
        "name": "Network Client Military Branch of Service by Gender",
        "description": ""
    }, {
        "name": "Network Client Military Service Era by Branch of Service",
        "description": ""
    }, {
        "name": "Network Client Military Service Era by Gender",
        "description": ""
    }, {
        "name": "Network Client Military Transition Status by Branch of Service",
        "description": ""
    }, {
        "name": "Network Client Military Transitioning by Gender",
        "description": ""
    }, {
        "name": "Network Clients Military Status by Gender",
        "description": ""
    }, {
        "name": "Network Clients by Military Affiliation",
        "description": ""
    }, {
        "name": "Network Clients by Military Branch of Service",
        "description": ""
    }, {
        "name": "Network Clients by Military Deployment",
        "description": ""
    }, {
        "name": "Network Clients by Military Discharge",
        "description": ""
    }, {
        "name": "Network Clients by Military Service Era",
        "description": ""
    }, {
        "name": "Network Clients by Military Status",
        "description": ""
    }, {
        "name": "Network Clients by Military Transitioning Status",
        "description": ""
    }, {
        "name": "Network Contacts By Age Report",
        "description": ""
    }, {
        "name": "Network Contacts By Ethnicity Report",
        "description": ""
    }, {
        "name": "Network Contacts By Gender Report",
        "description": ""
    }, {
        "name": "Network Contacts By Race Report",
        "description": ""
    }, {
        "name": "Networks Service Types: Outcomes",
        "description": ""
    }, {
        "name": "Networks: Groups",
        "description": ""
    }, {
        "name": "Networks: Groups by Referral Scope",
        "description": ""
    }, {
        "name": "Networks: Service Types",
        "description": ""
    }, {
        "name": "Networks: Service Types Offered",
        "description": ""
    }, {
        "name": "Networks: Service Types Offered along with Outcomes scope to the Network",
        "description": ""
    }, {
        "name": "Networks: Users/Collaborators by Referral Scopes",
        "description": ""
    }, {
        "name": "Notification Preferences for a Group that a User belongs to",
        "description": ""
    }, {
        "name": "Notification Preferences for a Network that a User belongs to",
        "description": ""
    }, {
        "name": "Notifications: Email Unsubscribe",
        "description": ""
    }, {
        "name": "Organization Service Cases",
        "description": ""
    }, {
        "name": "Public: area to Accept Consent Requests that are created via SMS or Email",
        "description": ""
    }, {
        "name": "Public: area to Reject Consent Requests that are created via SMS or Email",
        "description": ""
    }, {
        "name": "Public: area to accept/reject consents that are created via SMS or Email",
        "description": ""
    }, {
        "name": "Received Referrals by Organization",
        "description": ""
    }, {
        "name": "Referral: Forms Available for Use",
        "description": ""
    }, {
        "name": "Referrals: Documents",
        "description": ""
    }, {
        "name": "Referrals: Filter Timeline Events",
        "description": ""
    }, {
        "name": "Referrals: Primary Referral Worker",
        "description": ""
    }, {
        "name": "Referrals: Timeline Events",
        "description": ""
    }, {
        "name": "Screenings: Fetch screenings for contact",
        "description": ""
    }, {
        "name": "Screenings: Respond to Screening",
        "description": ""
    }, {
        "name": "Search",
        "description": ""
    }, {
        "name": "Sent Referrals by Organization",
        "description": ""
    }, {
        "name": "Service Cases by Service Type",
        "description": ""
    }, {
        "name": "Service Cases by Source",
        "description": ""
    }, {
        "name": "Service Cases by Status",
        "description": ""
    }, {
        "name": "Service Cases by Sub Types of Service Type",
        "description": ""
    }, {
        "name": "Unique Network Contacts Report",
        "description": ""
    }, {
        "name": "Unique Network Organizations Report",
        "description": ""
    }, {
        "name": "Unique Network Users Report",
        "description": ""
    }, {
        "name": "Unique Organization Clients Report",
        "description": ""
    }, {
        "name": "User Confirmation",
        "description": ""
    }, {
        "name": "User Registration",
        "description": ""
    }, {
        "name": "Users",
        "description": ""
    }, {
        "name": "Users: Active Session Management",
        "description": "\n<p>Manage active user sessions (tokens) registered with the API.</p>\n"
    }, {
        "name": "Users: Addresses",
        "description": ""
    }, {
        "name": "Users: License Agreements (EULA)",
        "description": "\n<p>Accepts license agreement for a user to access the software. UU3-1307</p>\n"
    }, {
        "name": "Users: Two-Factor Authentication (2FA)",
        "description": "\n<p>Enable and disable 2FA for a Unite US user account.</p>\n"
    }, {
        "name": "Users: Zendesk Support",
        "description": ""
    }, {
        "name": "Widgets: Assistance Requests",
        "description": ""
    }],
    "paths": {
        "/": {
            "get": {
                "tags": ["API: Status"],
                "summary": "Checks the status of the Unite US API.",
                "operationId": "get",
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/back-office/api/forms": {
            "get": {
                "tags": ["Back Office: Forms"],
                "summary": "Returns a list of forms available.",
                "operationId": "get_back-office_api_forms",
                "parameters": [{
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "post": {
                "tags": ["Back Office: Forms"],
                "summary": "Create a new form for the group.",
                "description": "\n<p>Create a new group form.</p>\n",
                "operationId": "post_back-office_api_forms",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "form[name]": {
                                        "type": "string",
                                        "description": "Name of the form."
                                    },
                                    "form[notes_text]": {
                                        "type": "string",
                                        "description": "Additional notes or description to help identify the form."
                                    },
                                    "form[is_active]": {
                                        "type": "boolean",
                                        "description": "Is the form active or inactive."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "form[name]": {
                                        "type": "string",
                                        "description": "Name of the form."
                                    },
                                    "form[notes_text]": {
                                        "type": "string",
                                        "description": "Additional notes or description to help identify the form."
                                    },
                                    "form[is_active]": {
                                        "type": "boolean",
                                        "description": "Is the form active or inactive."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/back-office/api/forms/use-by/groups/{group_id}/programs/{id}": {
            "get": {
                "tags": ["Back Office: Use Forms"],
                "summary": "List forms used by the object.",
                "operationId": "get_back-office_api_forms_use-by_groups_group_id_programs_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "use_type",
                    "in": "query",
                    "description": "How should the form be used.",
                    "schema": {
                        "type": "string",
                        "enum": ["intake", "exit", "general", "screening"]
                    }
                }, {
                    "name": "service_types",
                    "in": "query",
                    "description": "An array of Service Type identifiers that the form usage should be associated with.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/back-office/api/forms/use-by/groups/{id}": {
            "get": {
                "tags": ["Back Office: Use Forms"],
                "summary": "List forms used by the object.",
                "operationId": "get_back-office_api_forms_use-by_groups_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "use_type",
                    "in": "query",
                    "description": "How should the form be used.",
                    "schema": {
                        "type": "string",
                        "enum": ["intake", "exit", "general", "screening"]
                    }
                }, {
                    "name": "service_types",
                    "in": "query",
                    "description": "An array of Service Type identifiers that the form usage should be associated with.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/back-office/api/forms/use-by/networks/{id}": {
            "get": {
                "tags": ["Back Office: Use Forms"],
                "summary": "List forms used by the object.",
                "operationId": "get_back-office_api_forms_use-by_networks_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "use_type",
                    "in": "query",
                    "description": "How should the form be used.",
                    "schema": {
                        "type": "string",
                        "enum": ["intake", "exit", "general", "screening"]
                    }
                }, {
                    "name": "service_types",
                    "in": "query",
                    "description": "An array of Service Type identifiers that the form usage should be associated with.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/back-office/api/forms/{form_id}/duplicate": {
            "post": {
                "tags": ["Back Office: Duplicate a form and all associations"],
                "summary": "Duplicate the specified form and return the duplicated form.",
                "operationId": "post_back-office_api_forms_form_id_duplicate",
                "parameters": [{
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/back-office/api/forms/{form_id}/questions": {
            "post": {
                "tags": ["Back Office: Forms -> Questions"],
                "summary": "Creates a new question on the selected form.",
                "description": "\n<p>Create a new question and adds it to the selected form.</p>\n",
                "operationId": "post_back-office_api_forms_form_id_questions",
                "parameters": [{
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["question[conditional_display][show_or_hide]", "question[conditional_display][show_or_hide_question_id]", "question[display_order]", "question[label_text]"],
                                "properties": {
                                    "question[conditional_display][show_or_hide_question_id]": {
                                        "type": "string",
                                        "description": "Identifier of the question to be shown or hide."
                                    },
                                    "question[conditional_display][show_or_hide]": {
                                        "type": "string",
                                        "description": "Show or hide the specified question based on the conditions.",
                                        "enum": ["show", "hide"]
                                    },
                                    "question[display_order]": {
                                        "type": "number",
                                        "description": "The position of the question within the question list display. If within a section, the order is scoped."
                                    },
                                    "question[label_text]": {
                                        "type": "string",
                                        "description": "The label text to be displayed for the question."
                                    },
                                    "question[section_id]": {
                                        "type": "string",
                                        "description": "Identifier of the form section this question belongs to"
                                    },
                                    "question[placeholder_text]": {
                                        "type": "string",
                                        "description": "Placeholder text to be displayed within the input, if supported by the browser."
                                    },
                                    "question[help_text]": {
                                        "type": "string",
                                        "description": "Help text to be displayed with the question."
                                    },
                                    "question[help_text_position]": {
                                        "type": "string",
                                        "description": "Where to position the help text, if help text is provided.",
                                        "enum": ["before_input", "after_input"]
                                    },
                                    "question[is_required]": {
                                        "type": "boolean",
                                        "description": "Is this question required to be completed?"
                                    },
                                    "question[min_selections]": {
                                        "type": "number",
                                        "description": "If the question is a selection-based question (drop-down, checkbox list, etc.), what is the minimum number of selections that must be made."
                                    },
                                    "question[max_selections]": {
                                        "type": "number",
                                        "description": "If the question is a selection-based question (drop-down, checkbox list, etc.), what is the maximum number of selections that may be made."
                                    },
                                    "question[input_options]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "question[conditional_display][and_conditions]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "question[conditional_display][or_conditions]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["question[conditional_display][show_or_hide]", "question[conditional_display][show_or_hide_question_id]", "question[display_order]", "question[label_text]"],
                                "properties": {
                                    "question[conditional_display][show_or_hide_question_id]": {
                                        "type": "string",
                                        "description": "Identifier of the question to be shown or hide."
                                    },
                                    "question[conditional_display][show_or_hide]": {
                                        "type": "string",
                                        "description": "Show or hide the specified question based on the conditions.",
                                        "enum": ["show", "hide"]
                                    },
                                    "question[display_order]": {
                                        "type": "number",
                                        "description": "The position of the question within the question list display. If within a section, the order is scoped."
                                    },
                                    "question[label_text]": {
                                        "type": "string",
                                        "description": "The label text to be displayed for the question."
                                    },
                                    "question[section_id]": {
                                        "type": "string",
                                        "description": "Identifier of the form section this question belongs to"
                                    },
                                    "question[placeholder_text]": {
                                        "type": "string",
                                        "description": "Placeholder text to be displayed within the input, if supported by the browser."
                                    },
                                    "question[help_text]": {
                                        "type": "string",
                                        "description": "Help text to be displayed with the question."
                                    },
                                    "question[help_text_position]": {
                                        "type": "string",
                                        "description": "Where to position the help text, if help text is provided.",
                                        "enum": ["before_input", "after_input"]
                                    },
                                    "question[is_required]": {
                                        "type": "boolean",
                                        "description": "Is this question required to be completed?"
                                    },
                                    "question[min_selections]": {
                                        "type": "number",
                                        "description": "If the question is a selection-based question (drop-down, checkbox list, etc.), what is the minimum number of selections that must be made."
                                    },
                                    "question[max_selections]": {
                                        "type": "number",
                                        "description": "If the question is a selection-based question (drop-down, checkbox list, etc.), what is the maximum number of selections that may be made."
                                    },
                                    "question[input_options]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "question[conditional_display][and_conditions]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "question[conditional_display][or_conditions]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/back-office/api/forms/{form_id}/questions/{id}": {
            "put": {
                "tags": ["Back Office: Forms -> Questions"],
                "summary": "Update an existing question on the form.",
                "description": "\n<p>Update an existing question. Performing an update does not change any\nexisting responses to the question.</p>\n",
                "operationId": "put_back-office_api_forms_form_id_questions_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "question[section_id]": {
                                        "type": "string",
                                        "description": "Identifier of the form section this question belongs to"
                                    },
                                    "question[label_text]": {
                                        "type": "string",
                                        "description": "The label text to be displayed for the question."
                                    },
                                    "question[placeholder_text]": {
                                        "type": "string",
                                        "description": "Placeholder text to be displayed within the input, if supported by the browser."
                                    },
                                    "question[help_text]": {
                                        "type": "string",
                                        "description": "Help text to be displayed with the question."
                                    },
                                    "question[help_text_position]": {
                                        "type": "string",
                                        "description": "Where to position the help text, if help text is provided.",
                                        "enum": ["before_input", "after_input"]
                                    },
                                    "question[display_order]": {
                                        "type": "number",
                                        "description": "The position of the question within the question list display. If within a section, the order is scoped."
                                    },
                                    "question[is_required]": {
                                        "type": "boolean",
                                        "description": "Is this question required to be completed?"
                                    },
                                    "question[min_selections]": {
                                        "type": "number",
                                        "description": "If the question is a selection-based question (drop-down, checkbox list, etc.), what is the minimum number of selections that must be made."
                                    },
                                    "question[max_selections]": {
                                        "type": "number",
                                        "description": "If the question is a selection-based question (drop-down, checkbox list, etc.), what is the maximum number of selections that may be made."
                                    },
                                    "question[input_options]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "question[conditional_display][show_or_hide]": {
                                        "type": "string",
                                        "description": "Show or hide the specified question based on the conditions.",
                                        "enum": ["show", "hide"]
                                    },
                                    "question[conditional_display][show_or_hide_question_id]": {
                                        "type": "string",
                                        "description": "Identifier of the question to be shown or hide."
                                    },
                                    "question[conditional_display][and_conditions]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "question[conditional_display][or_conditions]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "question[section_id]": {
                                        "type": "string",
                                        "description": "Identifier of the form section this question belongs to"
                                    },
                                    "question[label_text]": {
                                        "type": "string",
                                        "description": "The label text to be displayed for the question."
                                    },
                                    "question[placeholder_text]": {
                                        "type": "string",
                                        "description": "Placeholder text to be displayed within the input, if supported by the browser."
                                    },
                                    "question[help_text]": {
                                        "type": "string",
                                        "description": "Help text to be displayed with the question."
                                    },
                                    "question[help_text_position]": {
                                        "type": "string",
                                        "description": "Where to position the help text, if help text is provided.",
                                        "enum": ["before_input", "after_input"]
                                    },
                                    "question[display_order]": {
                                        "type": "number",
                                        "description": "The position of the question within the question list display. If within a section, the order is scoped."
                                    },
                                    "question[is_required]": {
                                        "type": "boolean",
                                        "description": "Is this question required to be completed?"
                                    },
                                    "question[min_selections]": {
                                        "type": "number",
                                        "description": "If the question is a selection-based question (drop-down, checkbox list, etc.), what is the minimum number of selections that must be made."
                                    },
                                    "question[max_selections]": {
                                        "type": "number",
                                        "description": "If the question is a selection-based question (drop-down, checkbox list, etc.), what is the maximum number of selections that may be made."
                                    },
                                    "question[input_options]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "question[conditional_display][show_or_hide]": {
                                        "type": "string",
                                        "description": "Show or hide the specified question based on the conditions.",
                                        "enum": ["show", "hide"]
                                    },
                                    "question[conditional_display][show_or_hide_question_id]": {
                                        "type": "string",
                                        "description": "Identifier of the question to be shown or hide."
                                    },
                                    "question[conditional_display][and_conditions]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "question[conditional_display][or_conditions]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Back Office: Forms -> Questions"],
                "summary": "Update an existing question on the form.",
                "description": "\n<p>Update an existing question. Performing an update does not change any\nexisting responses to the question.</p>\n",
                "operationId": "patch_back-office_api_forms_form_id_questions_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "question[section_id]": {
                                        "type": "string",
                                        "description": "Identifier of the form section this question belongs to"
                                    },
                                    "question[label_text]": {
                                        "type": "string",
                                        "description": "The label text to be displayed for the question."
                                    },
                                    "question[placeholder_text]": {
                                        "type": "string",
                                        "description": "Placeholder text to be displayed within the input, if supported by the browser."
                                    },
                                    "question[help_text]": {
                                        "type": "string",
                                        "description": "Help text to be displayed with the question."
                                    },
                                    "question[help_text_position]": {
                                        "type": "string",
                                        "description": "Where to position the help text, if help text is provided.",
                                        "enum": ["before_input", "after_input"]
                                    },
                                    "question[display_order]": {
                                        "type": "number",
                                        "description": "The position of the question within the question list display. If within a section, the order is scoped."
                                    },
                                    "question[is_required]": {
                                        "type": "boolean",
                                        "description": "Is this question required to be completed?"
                                    },
                                    "question[min_selections]": {
                                        "type": "number",
                                        "description": "If the question is a selection-based question (drop-down, checkbox list, etc.), what is the minimum number of selections that must be made."
                                    },
                                    "question[max_selections]": {
                                        "type": "number",
                                        "description": "If the question is a selection-based question (drop-down, checkbox list, etc.), what is the maximum number of selections that may be made."
                                    },
                                    "question[input_options]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "question[conditional_display][show_or_hide]": {
                                        "type": "string",
                                        "description": "Show or hide the specified question based on the conditions.",
                                        "enum": ["show", "hide"]
                                    },
                                    "question[conditional_display][show_or_hide_question_id]": {
                                        "type": "string",
                                        "description": "Identifier of the question to be shown or hide."
                                    },
                                    "question[conditional_display][and_conditions]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "question[conditional_display][or_conditions]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "question[section_id]": {
                                        "type": "string",
                                        "description": "Identifier of the form section this question belongs to"
                                    },
                                    "question[label_text]": {
                                        "type": "string",
                                        "description": "The label text to be displayed for the question."
                                    },
                                    "question[placeholder_text]": {
                                        "type": "string",
                                        "description": "Placeholder text to be displayed within the input, if supported by the browser."
                                    },
                                    "question[help_text]": {
                                        "type": "string",
                                        "description": "Help text to be displayed with the question."
                                    },
                                    "question[help_text_position]": {
                                        "type": "string",
                                        "description": "Where to position the help text, if help text is provided.",
                                        "enum": ["before_input", "after_input"]
                                    },
                                    "question[display_order]": {
                                        "type": "number",
                                        "description": "The position of the question within the question list display. If within a section, the order is scoped."
                                    },
                                    "question[is_required]": {
                                        "type": "boolean",
                                        "description": "Is this question required to be completed?"
                                    },
                                    "question[min_selections]": {
                                        "type": "number",
                                        "description": "If the question is a selection-based question (drop-down, checkbox list, etc.), what is the minimum number of selections that must be made."
                                    },
                                    "question[max_selections]": {
                                        "type": "number",
                                        "description": "If the question is a selection-based question (drop-down, checkbox list, etc.), what is the maximum number of selections that may be made."
                                    },
                                    "question[input_options]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "question[conditional_display][show_or_hide]": {
                                        "type": "string",
                                        "description": "Show or hide the specified question based on the conditions.",
                                        "enum": ["show", "hide"]
                                    },
                                    "question[conditional_display][show_or_hide_question_id]": {
                                        "type": "string",
                                        "description": "Identifier of the question to be shown or hide."
                                    },
                                    "question[conditional_display][and_conditions]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "question[conditional_display][or_conditions]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/back-office/api/forms/{form_id}/questions/{question_id}/input-options": {
            "get": {
                "tags": ["Back Office: Forms -> Questions -> Input Options"],
                "summary": "Returns the input options available for the selected question.",
                "operationId": "get_back-office_api_forms_form_id_questions_question_id_input-options",
                "parameters": [{
                    "name": "question_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "post": {
                "tags": ["Back Office: Forms -> Questions -> Input Options"],
                "summary": "Add a new input option to the selected question.",
                "operationId": "post_back-office_api_forms_form_id_questions_question_id_input-options",
                "parameters": [{
                    "name": "question_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["input_option[base_input_option_id]", "input_option[display_order]", "input_option[option_label]"],
                                "properties": {
                                    "input_option[display_order]": {
                                        "type": "number",
                                        "description": "The position within the form that this section should appear."
                                    },
                                    "input_option[base_input_option_id]": {
                                        "type": "string",
                                        "description": "Identifier of the base input option from the global repository. Required for non create actions."
                                    },
                                    "input_option[option_label]": {
                                        "type": "string",
                                        "description": "The label to be displayed to users completing a form with this question and input option."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["input_option[base_input_option_id]", "input_option[display_order]", "input_option[option_label]"],
                                "properties": {
                                    "input_option[display_order]": {
                                        "type": "number",
                                        "description": "The position within the form that this section should appear."
                                    },
                                    "input_option[base_input_option_id]": {
                                        "type": "string",
                                        "description": "Identifier of the base input option from the global repository. Required for non create actions."
                                    },
                                    "input_option[option_label]": {
                                        "type": "string",
                                        "description": "The label to be displayed to users completing a form with this question and input option."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/back-office/api/forms/{form_id}/questions/{question_id}/input-options/{id}": {
            "get": {
                "tags": ["Back Office: Forms -> Questions -> Input Options"],
                "summary": "Return details of a single input option.",
                "operationId": "get_back-office_api_forms_form_id_questions_question_id_input-options_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "question_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": ["Back Office: Forms -> Questions -> Input Options"],
                "summary": "Update an existing input option.",
                "operationId": "put_back-office_api_forms_form_id_questions_question_id_input-options_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "question_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["input_option[base_input_option_id]", "input_option[display_order]", "input_option[option_label]"],
                                "properties": {
                                    "input_option[display_order]": {
                                        "type": "number",
                                        "description": "The position within the form that this section should appear."
                                    },
                                    "input_option[base_input_option_id]": {
                                        "type": "string",
                                        "description": "Identifier of the base input option from the global repository. Required for non create actions."
                                    },
                                    "input_option[option_label]": {
                                        "type": "string",
                                        "description": "The label to be displayed to users completing a form with this question and input option."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["input_option[base_input_option_id]", "input_option[display_order]", "input_option[option_label]"],
                                "properties": {
                                    "input_option[display_order]": {
                                        "type": "number",
                                        "description": "The position within the form that this section should appear."
                                    },
                                    "input_option[base_input_option_id]": {
                                        "type": "string",
                                        "description": "Identifier of the base input option from the global repository. Required for non create actions."
                                    },
                                    "input_option[option_label]": {
                                        "type": "string",
                                        "description": "The label to be displayed to users completing a form with this question and input option."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Back Office: Forms -> Questions -> Input Options"],
                "summary": "Destroy an existing input option.",
                "operationId": "delete_back-office_api_forms_form_id_questions_question_id_input-options_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "question_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Back Office: Forms -> Questions -> Input Options"],
                "summary": "Update an existing input option.",
                "operationId": "patch_back-office_api_forms_form_id_questions_question_id_input-options_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "question_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["input_option[base_input_option_id]", "input_option[display_order]", "input_option[option_label]"],
                                "properties": {
                                    "input_option[display_order]": {
                                        "type": "number",
                                        "description": "The position within the form that this section should appear."
                                    },
                                    "input_option[base_input_option_id]": {
                                        "type": "string",
                                        "description": "Identifier of the base input option from the global repository. Required for non create actions."
                                    },
                                    "input_option[option_label]": {
                                        "type": "string",
                                        "description": "The label to be displayed to users completing a form with this question and input option."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["input_option[base_input_option_id]", "input_option[display_order]", "input_option[option_label]"],
                                "properties": {
                                    "input_option[display_order]": {
                                        "type": "number",
                                        "description": "The position within the form that this section should appear."
                                    },
                                    "input_option[base_input_option_id]": {
                                        "type": "string",
                                        "description": "Identifier of the base input option from the global repository. Required for non create actions."
                                    },
                                    "input_option[option_label]": {
                                        "type": "string",
                                        "description": "The label to be displayed to users completing a form with this question and input option."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/back-office/api/forms/{form_id}/questions/{question_id}/update-section": {
            "post": {
                "tags": ["Back Office: Update a Questions Section.  Move a question to a nother section"],
                "summary": "Moves the question from its current section to the new one specified.",
                "operationId": "post_back-office_api_forms_form_id_questions_question_id_update-section",
                "parameters": [{
                    "name": "question_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["question[section_id]"],
                                "properties": {
                                    "question[section_id]": {
                                        "type": "string",
                                        "description": "The new section ID that we are moving the question to."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["question[section_id]"],
                                "properties": {
                                    "question[section_id]": {
                                        "type": "string",
                                        "description": "The new section ID that we are moving the question to."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/back-office/api/forms/{form_id}/questions/{question_id}/validators": {
            "post": {
                "tags": ["Back Office: Forms -> Questions -> Validators"],
                "summary": "Creates a new validator for the question.",
                "operationId": "post_back-office_api_forms_form_id_questions_question_id_validators",
                "parameters": [{
                    "name": "question_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/back-office/api/forms/{form_id}/questions/{question_id}/validators/{id}": {
            "put": {
                "tags": ["Back Office: Forms -> Questions -> Validators"],
                "summary": "Updates a question validator. The validator type cannot be changed via this method.",
                "operationId": "put_back-office_api_forms_form_id_questions_question_id_validators_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "question_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Back Office: Forms -> Questions -> Validators"],
                "summary": "Permanently delete a validator from a question.",
                "operationId": "delete_back-office_api_forms_form_id_questions_question_id_validators_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "question_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Back Office: Forms -> Questions -> Validators"],
                "summary": "Updates a question validator. The validator type cannot be changed via this method.",
                "operationId": "patch_back-office_api_forms_form_id_questions_question_id_validators_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "question_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/back-office/api/forms/{form_id}/sections": {
            "post": {
                "tags": ["Back Office: Forms -> Sections"],
                "summary": "Add a new section to the selected form.",
                "operationId": "post_back-office_api_forms_form_id_sections",
                "parameters": [{
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["section[display_name]", "section[display_order]", "section[name]"],
                                "properties": {
                                    "section[display_order]": {
                                        "type": "number",
                                        "description": "The position within the form that this section should appear."
                                    },
                                    "section[display_name]": {
                                        "type": "boolean",
                                        "description": "Should the name of the section be displayed to the user."
                                    },
                                    "section[name]": {
                                        "type": "string",
                                        "description": "The name of the section."
                                    },
                                    "section[section_type]": {
                                        "type": "string",
                                        "description": "The type of the section. A break would typically appear as a horizontal rule or similar on a form.",
                                        "enum": ["form_group", "break"]
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["section[display_name]", "section[display_order]", "section[name]"],
                                "properties": {
                                    "section[display_order]": {
                                        "type": "number",
                                        "description": "The position within the form that this section should appear."
                                    },
                                    "section[display_name]": {
                                        "type": "boolean",
                                        "description": "Should the name of the section be displayed to the user."
                                    },
                                    "section[name]": {
                                        "type": "string",
                                        "description": "The name of the section."
                                    },
                                    "section[section_type]": {
                                        "type": "string",
                                        "description": "The type of the section. A break would typically appear as a horizontal rule or similar on a form.",
                                        "enum": ["form_group", "break"]
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/back-office/api/forms/{form_id}/sections/{id}": {
            "put": {
                "tags": ["Back Office: Forms -> Sections"],
                "summary": "Update an existing form section.",
                "operationId": "put_back-office_api_forms_form_id_sections_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["section[display_name]", "section[display_order]", "section[name]"],
                                "properties": {
                                    "section[display_order]": {
                                        "type": "number",
                                        "description": "The position within the form that this section should appear."
                                    },
                                    "section[display_name]": {
                                        "type": "boolean",
                                        "description": "Should the name of the section be displayed to the user."
                                    },
                                    "section[name]": {
                                        "type": "string",
                                        "description": "The name of the section."
                                    },
                                    "section[section_type]": {
                                        "type": "string",
                                        "description": "The type of the section. A break would typically appear as a horizontal rule or similar on a form.",
                                        "enum": ["form_group", "break"]
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["section[display_name]", "section[display_order]", "section[name]"],
                                "properties": {
                                    "section[display_order]": {
                                        "type": "number",
                                        "description": "The position within the form that this section should appear."
                                    },
                                    "section[display_name]": {
                                        "type": "boolean",
                                        "description": "Should the name of the section be displayed to the user."
                                    },
                                    "section[name]": {
                                        "type": "string",
                                        "description": "The name of the section."
                                    },
                                    "section[section_type]": {
                                        "type": "string",
                                        "description": "The type of the section. A break would typically appear as a horizontal rule or similar on a form.",
                                        "enum": ["form_group", "break"]
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Back Office: Forms -> Sections"],
                "summary": "Remove a section from the selected form.",
                "description": "\n<p>Deletes the section from the form, but does NOT delete the questions from\nthe form. Questions contained within a deleted section will be categorized\nas not in a section.</p>\n",
                "operationId": "delete_back-office_api_forms_form_id_sections_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Back Office: Forms -> Sections"],
                "summary": "Update an existing form section.",
                "operationId": "patch_back-office_api_forms_form_id_sections_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["section[display_name]", "section[display_order]", "section[name]"],
                                "properties": {
                                    "section[display_order]": {
                                        "type": "number",
                                        "description": "The position within the form that this section should appear."
                                    },
                                    "section[display_name]": {
                                        "type": "boolean",
                                        "description": "Should the name of the section be displayed to the user."
                                    },
                                    "section[name]": {
                                        "type": "string",
                                        "description": "The name of the section."
                                    },
                                    "section[section_type]": {
                                        "type": "string",
                                        "description": "The type of the section. A break would typically appear as a horizontal rule or similar on a form.",
                                        "enum": ["form_group", "break"]
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["section[display_name]", "section[display_order]", "section[name]"],
                                "properties": {
                                    "section[display_order]": {
                                        "type": "number",
                                        "description": "The position within the form that this section should appear."
                                    },
                                    "section[display_name]": {
                                        "type": "boolean",
                                        "description": "Should the name of the section be displayed to the user."
                                    },
                                    "section[name]": {
                                        "type": "string",
                                        "description": "The name of the section."
                                    },
                                    "section[section_type]": {
                                        "type": "string",
                                        "description": "The type of the section. A break would typically appear as a horizontal rule or similar on a form.",
                                        "enum": ["form_group", "break"]
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/back-office/api/forms/{form_id}/sections/{id}/duplicate": {
            "post": {
                "tags": ["Back Office: Duplicate a section and all its children"],
                "summary": "Duplicate the specified form and return the duplicated form.",
                "operationId": "post_back-office_api_forms_form_id_sections_id_duplicate",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/back-office/api/forms/{form_id}/use-by/groups/{group_id}/programs/{id}": {
            "put": {
                "tags": ["Back Office: Use Forms"],
                "summary": "Add the selected form to the object.",
                "operationId": "put_back-office_api_forms_form_id_use-by_groups_group_id_programs_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["usage[current_use_type]", "usage[use_type]"],
                                "properties": {
                                    "usage[use_type]": {
                                        "type": "string",
                                        "description": "How should the form be used now.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[current_use_type]": {
                                        "type": "string",
                                        "description": "How should the form is currently being used.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[service_types]": {
                                        "type": "array",
                                        "description": "An array of Service Type identifiers that the form usage should be associated with.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["usage[current_use_type]", "usage[use_type]"],
                                "properties": {
                                    "usage[use_type]": {
                                        "type": "string",
                                        "description": "How should the form be used now.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[current_use_type]": {
                                        "type": "string",
                                        "description": "How should the form is currently being used.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[service_types]": {
                                        "type": "array",
                                        "description": "An array of Service Type identifiers that the form usage should be associated with.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "post": {
                "tags": ["Back Office: Use Forms"],
                "summary": "Add the selected form to the object.",
                "operationId": "post_back-office_api_forms_form_id_use-by_groups_group_id_programs_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["usage[use_type]"],
                                "properties": {
                                    "usage[use_type]": {
                                        "type": "string",
                                        "description": "How should the form be used.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[service_types]": {
                                        "type": "array",
                                        "description": "An array of Service Type identifiers that the form usage should be associated with.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["usage[use_type]"],
                                "properties": {
                                    "usage[use_type]": {
                                        "type": "string",
                                        "description": "How should the form be used.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[service_types]": {
                                        "type": "array",
                                        "description": "An array of Service Type identifiers that the form usage should be associated with.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Back Office: Use Forms"],
                "summary": "Remove the selected form from the object.",
                "operationId": "delete_back-office_api_forms_form_id_use-by_groups_group_id_programs_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "use_type": {
                                        "type": "string",
                                        "description": "How should the form be used.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "use_type": {
                                        "type": "string",
                                        "description": "How should the form be used.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Back Office: Use Forms"],
                "summary": "Add the selected form to the object.",
                "operationId": "patch_back-office_api_forms_form_id_use-by_groups_group_id_programs_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["usage[current_use_type]", "usage[use_type]"],
                                "properties": {
                                    "usage[use_type]": {
                                        "type": "string",
                                        "description": "How should the form be used now.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[current_use_type]": {
                                        "type": "string",
                                        "description": "How should the form is currently being used.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[service_types]": {
                                        "type": "array",
                                        "description": "An array of Service Type identifiers that the form usage should be associated with.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["usage[current_use_type]", "usage[use_type]"],
                                "properties": {
                                    "usage[use_type]": {
                                        "type": "string",
                                        "description": "How should the form be used now.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[current_use_type]": {
                                        "type": "string",
                                        "description": "How should the form is currently being used.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[service_types]": {
                                        "type": "array",
                                        "description": "An array of Service Type identifiers that the form usage should be associated with.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/back-office/api/forms/{form_id}/use-by/groups/{id}": {
            "put": {
                "tags": ["Back Office: Use Forms"],
                "summary": "Add the selected form to the object.",
                "operationId": "put_back-office_api_forms_form_id_use-by_groups_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["usage[current_use_type]", "usage[use_type]"],
                                "properties": {
                                    "usage[use_type]": {
                                        "type": "string",
                                        "description": "How should the form be used now.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[current_use_type]": {
                                        "type": "string",
                                        "description": "How should the form is currently being used.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[service_types]": {
                                        "type": "array",
                                        "description": "An array of Service Type identifiers that the form usage should be associated with.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["usage[current_use_type]", "usage[use_type]"],
                                "properties": {
                                    "usage[use_type]": {
                                        "type": "string",
                                        "description": "How should the form be used now.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[current_use_type]": {
                                        "type": "string",
                                        "description": "How should the form is currently being used.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[service_types]": {
                                        "type": "array",
                                        "description": "An array of Service Type identifiers that the form usage should be associated with.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "post": {
                "tags": ["Back Office: Use Forms"],
                "summary": "Add the selected form to the object.",
                "operationId": "post_back-office_api_forms_form_id_use-by_groups_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["usage[use_type]"],
                                "properties": {
                                    "usage[use_type]": {
                                        "type": "string",
                                        "description": "How should the form be used.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[service_types]": {
                                        "type": "array",
                                        "description": "An array of Service Type identifiers that the form usage should be associated with.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["usage[use_type]"],
                                "properties": {
                                    "usage[use_type]": {
                                        "type": "string",
                                        "description": "How should the form be used.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[service_types]": {
                                        "type": "array",
                                        "description": "An array of Service Type identifiers that the form usage should be associated with.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Back Office: Use Forms"],
                "summary": "Remove the selected form from the object.",
                "operationId": "delete_back-office_api_forms_form_id_use-by_groups_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "use_type": {
                                        "type": "string",
                                        "description": "How should the form be used.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "use_type": {
                                        "type": "string",
                                        "description": "How should the form be used.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Back Office: Use Forms"],
                "summary": "Add the selected form to the object.",
                "operationId": "patch_back-office_api_forms_form_id_use-by_groups_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["usage[current_use_type]", "usage[use_type]"],
                                "properties": {
                                    "usage[use_type]": {
                                        "type": "string",
                                        "description": "How should the form be used now.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[current_use_type]": {
                                        "type": "string",
                                        "description": "How should the form is currently being used.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[service_types]": {
                                        "type": "array",
                                        "description": "An array of Service Type identifiers that the form usage should be associated with.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["usage[current_use_type]", "usage[use_type]"],
                                "properties": {
                                    "usage[use_type]": {
                                        "type": "string",
                                        "description": "How should the form be used now.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[current_use_type]": {
                                        "type": "string",
                                        "description": "How should the form is currently being used.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[service_types]": {
                                        "type": "array",
                                        "description": "An array of Service Type identifiers that the form usage should be associated with.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/back-office/api/forms/{form_id}/use-by/networks/{id}": {
            "put": {
                "tags": ["Back Office: Use Forms"],
                "summary": "Add the selected form to the object.",
                "operationId": "put_back-office_api_forms_form_id_use-by_networks_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["usage[current_use_type]", "usage[use_type]"],
                                "properties": {
                                    "usage[use_type]": {
                                        "type": "string",
                                        "description": "How should the form be used now.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[current_use_type]": {
                                        "type": "string",
                                        "description": "How should the form is currently being used.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[service_types]": {
                                        "type": "array",
                                        "description": "An array of Service Type identifiers that the form usage should be associated with.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["usage[current_use_type]", "usage[use_type]"],
                                "properties": {
                                    "usage[use_type]": {
                                        "type": "string",
                                        "description": "How should the form be used now.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[current_use_type]": {
                                        "type": "string",
                                        "description": "How should the form is currently being used.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[service_types]": {
                                        "type": "array",
                                        "description": "An array of Service Type identifiers that the form usage should be associated with.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "post": {
                "tags": ["Back Office: Use Forms"],
                "summary": "Add the selected form to the object.",
                "operationId": "post_back-office_api_forms_form_id_use-by_networks_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["usage[use_type]"],
                                "properties": {
                                    "usage[use_type]": {
                                        "type": "string",
                                        "description": "How should the form be used.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[service_types]": {
                                        "type": "array",
                                        "description": "An array of Service Type identifiers that the form usage should be associated with.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["usage[use_type]"],
                                "properties": {
                                    "usage[use_type]": {
                                        "type": "string",
                                        "description": "How should the form be used.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[service_types]": {
                                        "type": "array",
                                        "description": "An array of Service Type identifiers that the form usage should be associated with.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Back Office: Use Forms"],
                "summary": "Remove the selected form from the object.",
                "operationId": "delete_back-office_api_forms_form_id_use-by_networks_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "use_type": {
                                        "type": "string",
                                        "description": "How should the form be used.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "use_type": {
                                        "type": "string",
                                        "description": "How should the form be used.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Back Office: Use Forms"],
                "summary": "Add the selected form to the object.",
                "operationId": "patch_back-office_api_forms_form_id_use-by_networks_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["usage[current_use_type]", "usage[use_type]"],
                                "properties": {
                                    "usage[use_type]": {
                                        "type": "string",
                                        "description": "How should the form be used now.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[current_use_type]": {
                                        "type": "string",
                                        "description": "How should the form is currently being used.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[service_types]": {
                                        "type": "array",
                                        "description": "An array of Service Type identifiers that the form usage should be associated with.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["usage[current_use_type]", "usage[use_type]"],
                                "properties": {
                                    "usage[use_type]": {
                                        "type": "string",
                                        "description": "How should the form be used now.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[current_use_type]": {
                                        "type": "string",
                                        "description": "How should the form is currently being used.",
                                        "enum": ["intake", "exit", "general", "screening"]
                                    },
                                    "usage[service_types]": {
                                        "type": "array",
                                        "description": "An array of Service Type identifiers that the form usage should be associated with.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/back-office/api/forms/{id}": {
            "get": {
                "tags": ["Back Office: Forms"],
                "summary": "Returns details of the selected form.",
                "operationId": "get_back-office_api_forms_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": ["Back Office: Forms"],
                "summary": "Update an existing form.",
                "description": "\n<p>Apply an update to an existing group form.</p>\n",
                "operationId": "put_back-office_api_forms_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "form[name]": {
                                        "type": "string",
                                        "description": "Name of the form."
                                    },
                                    "form[notes_text]": {
                                        "type": "string",
                                        "description": "Additional notes or description to help identify the form."
                                    },
                                    "form[is_active]": {
                                        "type": "boolean",
                                        "description": "Is the form active or inactive."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "form[name]": {
                                        "type": "string",
                                        "description": "Name of the form."
                                    },
                                    "form[notes_text]": {
                                        "type": "string",
                                        "description": "Additional notes or description to help identify the form."
                                    },
                                    "form[is_active]": {
                                        "type": "boolean",
                                        "description": "Is the form active or inactive."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Back Office: Forms"],
                "summary": "Update an existing form.",
                "description": "\n<p>Apply an update to an existing group form.</p>\n",
                "operationId": "patch_back-office_api_forms_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "form[name]": {
                                        "type": "string",
                                        "description": "Name of the form."
                                    },
                                    "form[notes_text]": {
                                        "type": "string",
                                        "description": "Additional notes or description to help identify the form."
                                    },
                                    "form[is_active]": {
                                        "type": "boolean",
                                        "description": "Is the form active or inactive."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "form[name]": {
                                        "type": "string",
                                        "description": "Name of the form."
                                    },
                                    "form[notes_text]": {
                                        "type": "string",
                                        "description": "Additional notes or description to help identify the form."
                                    },
                                    "form[is_active]": {
                                        "type": "boolean",
                                        "description": "Is the form active or inactive."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/back-office/api/forms/{id}/publish": {
            "put": {
                "tags": ["Back Office: Forms Publish"],
                "summary": "Touch a form.",
                "description": "\n<p>Touch a form in order to make sure that the cache is current.</p>\n",
                "operationId": "put_back-office_api_forms_id_publish",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Back Office: Forms Publish"],
                "summary": "Touch a form.",
                "description": "\n<p>Touch a form in order to make sure that the cache is current.</p>\n",
                "operationId": "patch_back-office_api_forms_id_publish",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/back-office/api/questions/search/global": {
            "post": {
                "tags": ["Back Office: Global Questions Search"],
                "summary": "Returns results from question repository.",
                "operationId": "post_back-office_api_questions_search_global",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["q[text]"],
                                "properties": {
                                    "q[text]": {
                                        "type": "string",
                                        "description": "The keyword or phrase to use when searching the questions repository."
                                    },
                                    "q[search_core]": {
                                        "type": "boolean",
                                        "description": "T/F for if we are searching Forms::Core or Forms::Forms"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["q[text]"],
                                "properties": {
                                    "q[text]": {
                                        "type": "string",
                                        "description": "The keyword or phrase to use when searching the questions repository."
                                    },
                                    "q[search_core]": {
                                        "type": "boolean",
                                        "description": "T/F for if we are searching Forms::Core or Forms::Forms"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/back-office/api/search/universal": {
            "post": {
                "tags": ["Back Office: Universal Search"],
                "summary": "Returns results from",
                "operationId": "post_back-office_api_search_universal",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["q[search_term]"],
                                "properties": {
                                    "q[search_term]": {
                                        "type": "string",
                                        "description": "The keyword or phrase to search for"
                                    },
                                    "q[limit_to_attributes]": {
                                        "type": "array",
                                        "description": "An array of strings of attributes to constraint the search by. ['email', 'name']. Can be nil",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "q[return_attributes]": {
                                        "type": "array",
                                        "description": "Array of attributes to return in the serialization of the results. ['name', 'id']",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "take": {
                                        "type": "number",
                                        "description": "The maximum number of results to be returned. Can be nil."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["q[search_term]"],
                                "properties": {
                                    "q[search_term]": {
                                        "type": "string",
                                        "description": "The keyword or phrase to search for"
                                    },
                                    "q[limit_to_attributes]": {
                                        "type": "array",
                                        "description": "An array of strings of attributes to constraint the search by. ['email', 'name']. Can be nil",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "q[return_attributes]": {
                                        "type": "array",
                                        "description": "Array of attributes to return in the serialization of the results. ['name', 'id']",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "take": {
                                        "type": "number",
                                        "description": "The maximum number of results to be returned. Can be nil."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/groups/{id}": {
            "get": {
                "tags": ["Groups"],
                "summary": "Returns details about the selected Group.",
                "operationId": "get_groups_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/ingestions/{source}/data": {
            "post": {
                "tags": ["Ingestions"],
                "summary": "Add new draft data to the ingestions queue.",
                "operationId": "post_ingestions_source_data",
                "parameters": [{
                    "name": "source",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/networks/{network_id}/groups": {
            "get": {
                "tags": ["Networks: Groups"],
                "summary": "Returns a list of groups that are participating in the selected Network.",
                "operationId": "get_networks_network_id_groups",
                "parameters": [{
                    "name": "q[coordinates][lon]",
                    "in": "query",
                    "description": "Longitude Coordinate",
                    "required": true,
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "q[coordinates][lat]",
                    "in": "query",
                    "description": "Latitude Coordinate",
                    "required": true,
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "q[text]",
                    "in": "query",
                    "description": "Text to search the index for.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "q[service_type_ids]",
                    "in": "query",
                    "description": "An array of service type IDs to filter on",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[distance]",
                    "in": "query",
                    "description": "Either a distance w/ unit OR no distance IOT fetch `any` distance",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "q[delivery_options]",
                    "in": "query",
                    "description": "An array of Program Delivery Method names to filter on",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[languages]",
                    "in": "query",
                    "description": "An array of Program Lanugage names to filter on",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[accessibility_options]",
                    "in": "query",
                    "description": "An array of Program Accessibility Option names to filter on",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[payment_options]",
                    "in": "query",
                    "description": "An array of Program Fee payment options to filter on",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[transportation_options]",
                    "in": "query",
                    "description": "An array of Program Transportation Option names to filter on",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[caters_to]",
                    "in": "query",
                    "description": "An array of Program Catered To Population names to filter on",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[restricted_to]",
                    "in": "query",
                    "description": "An array of Program Restricted To Population names to filter on",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[include_unlicensed_providers]",
                    "in": "query",
                    "description": "Optionally include unlicensed providers",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/networks/{network_id}/groups/{id}": {
            "get": {
                "tags": ["Networks: Groups"],
                "summary": "Returns details about the selected Network group.",
                "operationId": "get_networks_network_id_groups_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/networks/{network_id}/service_types": {
            "get": {
                "tags": ["Networks: Service Types"],
                "summary": "Returns a list of service types that the network supports",
                "operationId": "get_networks_network_id_service_types",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/notifications/unsubscribe": {
            "get": {
                "tags": ["Notifications: Email Unsubscribe"],
                "summary": "Attempt to unsubscribe an email from notifications",
                "operationId": "get_notifications_unsubscribe",
                "parameters": [{
                    "name": "email_digest",
                    "in": "query",
                    "description": "HMAC digest (sha-256) of notification unsubscribe private key with email wishing to unsubscribe",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "email",
                    "in": "query",
                    "description": "Email wishing to unsubscribe",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/system/bootstrap": {
            "get": {
                "tags": ["API: Bootstrap"],
                "summary": "Returns server-side defined bootstrap configuration options for use with client applications.",
                "operationId": "get_system_bootstrap",
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/system/bootstrap/service-types": {
            "get": {
                "tags": ["API: Bootstrap"],
                "summary": "Returns server-side defined service types for use with client applications.",
                "operationId": "get_system_bootstrap_service-types",
                "parameters": [{
                    "name": "flattened",
                    "in": "query",
                    "description": "Optionally return a flattened list of service types",
                    "schema": {
                        "type": "boolean"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/system/health": {
            "get": {
                "tags": ["API: Status"],
                "summary": "Checks the status of the Unite US API.",
                "operationId": "get_system_health",
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/confirmation": {
            "get": {
                "tags": ["User Confirmation"],
                "summary": "Confirm a user account.",
                "description": "\n<p>Confirms a user account using the provided confirmation token. A\nsuccessfully confirmed account will result in a <code>200 OK</code>\nresponse.</p>\n",
                "operationId": "get_v3_confirmation",
                "parameters": [{
                    "name": "confirmation_token",
                    "in": "query",
                    "description": "Confirmation token delivered to the email address of user.",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/consent/{consent_token}/accept": {
            "post": {
                "tags": ["Public: area to Accept Consent Requests that are created via SMS or Email"],
                "summary": "Accepts consent and stores captured signature",
                "operationId": "post_v3_consent_consent_token_accept",
                "parameters": [{
                    "name": "consent_token",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "consent[signature_image]": {
                                        "type": "string",
                                        "description": "Base64 of the signature image"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "consent[signature_image]": {
                                        "type": "string",
                                        "description": "Base64 of the signature image"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/consent/{consent_token}/reject": {
            "post": {
                "tags": ["Public: area to Reject Consent Requests that are created via SMS or Email"],
                "summary": "Rejects consent request that is found",
                "operationId": "post_v3_consent_consent_token_reject",
                "parameters": [{
                    "name": "consent_token",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/consent/{token}": {
            "get": {
                "tags": ["Public: area to accept/reject consents that are created via SMS or Email"],
                "summary": "Returns 200 if the consent request is present and not accepted/rejected.",
                "operationId": "get_v3_consent_token",
                "parameters": [{
                    "name": "token",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/emr/groups/{group_id}/contacts/update-info-with-patient": {
            "put": {
                "tags": ["EMR Patient Contact Information"],
                "summary": "Update contact information using the current patient's information",
                "operationId": "put_v3_emr_groups_group_id_contacts_update-info-with-patient",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/emr/groups/{group_id}/contacts/{contact_id}/associate": {
            "post": {
                "tags": ["EMR Patient Contact association"],
                "summary": "Associates an existing contact with an emr patient",
                "operationId": "post_v3_emr_groups_group_id_contacts_contact_id_associate",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/emr/groups/{group_id}/patient": {
            "get": {
                "tags": ["EMR Context"],
                "summary": "Return patient context",
                "operationId": "get_v3_emr_groups_group_id_patient",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/accept-unite-us-participation-agreements": {
            "post": {
                "tags": ["Groups: UniteUs Partcipation Agreements"],
                "summary": "Accept participation agreement for an organization.",
                "description": "\n<p>Accepts the participation agreement for a group. A successful acceptance\nwill return a <code>201 CREATED</code> response to the client.</p>\n",
                "operationId": "post_v3_groups_group_id_accept-unite-us-participation-agreements",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/activity-stream/events": {
            "get": {
                "tags": ["Groups: Timeline Events"],
                "summary": "Returns a list of events for the selected Contact.",
                "description": "\n<p>Activity Stream or Timeline events are returned loosely based on the\nActivity Stream specification (<a\nhref=\"http://activitystrea.ms\">activitystrea.ms</a>).</p>\n\n<p>Available <code>verb</code> values include: <code>accept</code>,\n<code>add</code>, <code>assign</code>, <code>close</code>,\n<code>complete</code>, <code>create</code>, <code>delete</code>,\n<code>deny</code>, <code>join</code>, <code>leave</code>,\n<code>open</code>, <code>post</code>, <code>replace</code>,\n<code>retract</code>, <code>save</code>, <code>send</code>, and\n<code>update</code>.</p>\n\n<p>Use the verb, object, and target values to determine the event that\noccurred.</p>\n",
                "operationId": "get_v3_groups_group_id_activity-stream_events",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/activity-stream/events/filter": {
            "post": {
                "tags": ["Groups: Filter Timeline Events"],
                "summary": "Returns a list of filtered events.",
                "description": "\n<p>Filtered activity stream or timeline events are returned loosely based on\nthe Activity Stream specification (<a\nhref=\"http://activitystrea.ms\">activitystrea.ms</a>).</p>\n\n<p>Available <code>verb</code> values include: <code>accept</code>,\n<code>add</code>, <code>assign</code>, <code>close</code>,\n<code>complete</code>, <code>create</code>, <code>delete</code>,\n<code>deny</code>, <code>join</code>, <code>leave</code>,\n<code>open</code>, <code>post</code>, <code>replace</code>,\n<code>retract</code>, <code>save</code>, <code>send</code>, and\n<code>update</code>.</p>\n\n<p>Use the verb, object, and target values to determine the event that\noccurred.</p>\n",
                "operationId": "post_v3_groups_group_id_activity-stream_events_filter",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "q[filter_names]": {
                                        "type": "string",
                                        "description": "Name of filter to be appliied",
                                        "enum": ["client_updates", "closed_records", "notes", "record_updates", "network_updates", "care_team"]
                                    },
                                    "page": {
                                        "type": "number",
                                        "description": "The page of results to be returned."
                                    },
                                    "per": {
                                        "type": "number",
                                        "description": "The number of records to be returned per page."
                                    },
                                    "sord": {
                                        "type": "string",
                                        "description": "The order to sort the results.",
                                        "enum": ["asc", "desc"]
                                    },
                                    "sidx": {
                                        "type": "string",
                                        "description": "The attribute to sort the results by."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "q[filter_names]": {
                                        "type": "string",
                                        "description": "Name of filter to be appliied",
                                        "enum": ["client_updates", "closed_records", "notes", "record_updates", "network_updates", "care_team"]
                                    },
                                    "page": {
                                        "type": "number",
                                        "description": "The page of results to be returned."
                                    },
                                    "per": {
                                        "type": "number",
                                        "description": "The number of records to be returned per page."
                                    },
                                    "sord": {
                                        "type": "string",
                                        "description": "The order to sort the results.",
                                        "enum": ["asc", "desc"]
                                    },
                                    "sidx": {
                                        "type": "string",
                                        "description": "The attribute to sort the results by."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/address-books/groups": {
            "post": {
                "tags": ["Address Book Groups"],
                "summary": "Create a new address book group profile.",
                "operationId": "post_v3_groups_group_id_address-books_groups",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["phone_numbers[phone_number][phone_number]"],
                                "properties": {
                                    "phone_numbers[phone_number][phone_number]": {
                                        "type": "string",
                                        "description": "The phone number itself. Minimum 7 digits, only numbers will be stored."
                                    },
                                    "group[name]": {
                                        "type": "string",
                                        "description": "The name of the address book group."
                                    },
                                    "group[description]": {
                                        "type": "string",
                                        "description": "Description of the address book group"
                                    },
                                    "group[founded_year]": {
                                        "type": "number",
                                        "description": "The year the group was founded."
                                    },
                                    "group[status]": {
                                        "type": "string",
                                        "description": "Status of the address book group",
                                        "enum": ["draft", "in_review", "published", "archived"]
                                    },
                                    "group[primary_contact_name]": {
                                        "type": "string",
                                        "description": "Primary contact name of the address book group"
                                    },
                                    "email_addresses": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "addresses": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "phone_numbers[phone_number][is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this phone number the group's primary group number"
                                    },
                                    "phone_numbers[phone_number][phone_type]": {
                                        "type": "string",
                                        "description": "Type of phone number.",
                                        "enum": ["work", "mobile", "fax", "unknown"]
                                    },
                                    "phone_numbers[phone_number][can_sms]": {
                                        "type": "boolean",
                                        "description": "Can this phone number receive SMS?"
                                    },
                                    "phone_numbers[phone_number][country_code]": {
                                        "type": "string",
                                        "description": "Country code for the phone number. Defaults to <tt>1</tt>, if not specified."
                                    },
                                    "schedule[week]": {
                                        "type": "array",
                                        "description": "The hours of operation for the provided day",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "service_types": {
                                        "type": "array",
                                        "description": "The uuids of the service type(s)",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["phone_numbers[phone_number][phone_number]"],
                                "properties": {
                                    "phone_numbers[phone_number][phone_number]": {
                                        "type": "string",
                                        "description": "The phone number itself. Minimum 7 digits, only numbers will be stored."
                                    },
                                    "group[name]": {
                                        "type": "string",
                                        "description": "The name of the address book group."
                                    },
                                    "group[description]": {
                                        "type": "string",
                                        "description": "Description of the address book group"
                                    },
                                    "group[founded_year]": {
                                        "type": "number",
                                        "description": "The year the group was founded."
                                    },
                                    "group[status]": {
                                        "type": "string",
                                        "description": "Status of the address book group",
                                        "enum": ["draft", "in_review", "published", "archived"]
                                    },
                                    "group[primary_contact_name]": {
                                        "type": "string",
                                        "description": "Primary contact name of the address book group"
                                    },
                                    "email_addresses": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "addresses": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "phone_numbers[phone_number][is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this phone number the group's primary group number"
                                    },
                                    "phone_numbers[phone_number][phone_type]": {
                                        "type": "string",
                                        "description": "Type of phone number.",
                                        "enum": ["work", "mobile", "fax", "unknown"]
                                    },
                                    "phone_numbers[phone_number][can_sms]": {
                                        "type": "boolean",
                                        "description": "Can this phone number receive SMS?"
                                    },
                                    "phone_numbers[phone_number][country_code]": {
                                        "type": "string",
                                        "description": "Country code for the phone number. Defaults to <tt>1</tt>, if not specified."
                                    },
                                    "schedule[week]": {
                                        "type": "array",
                                        "description": "The hours of operation for the provided day",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "service_types": {
                                        "type": "array",
                                        "description": "The uuids of the service type(s)",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/address-books/groups/{id}": {
            "put": {
                "tags": ["Address Book Groups"],
                "summary": "Update an address book group profile.",
                "operationId": "put_v3_groups_group_id_address-books_groups_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["phone_numbers[phone_number][phone_number]"],
                                "properties": {
                                    "phone_numbers[phone_number][phone_number]": {
                                        "type": "string",
                                        "description": "The phone number itself. Minimum 7 digits, only numbers will be stored."
                                    },
                                    "group[name]": {
                                        "type": "string",
                                        "description": "The name of the address book group."
                                    },
                                    "group[description]": {
                                        "type": "string",
                                        "description": "Description of the address book group"
                                    },
                                    "group[founded_year]": {
                                        "type": "number",
                                        "description": "The year the group was founded."
                                    },
                                    "group[status]": {
                                        "type": "string",
                                        "description": "Status of the address book group",
                                        "enum": ["draft", "in_review", "published", "archived"]
                                    },
                                    "group[primary_contact_name]": {
                                        "type": "string",
                                        "description": "Primary contact name of the address book group"
                                    },
                                    "email_addresses": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "addresses": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "phone_numbers[phone_number][is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this phone number the group's primary group number"
                                    },
                                    "phone_numbers[phone_number][phone_type]": {
                                        "type": "string",
                                        "description": "Type of phone number.",
                                        "enum": ["work", "mobile", "fax", "unknown"]
                                    },
                                    "phone_numbers[phone_number][can_sms]": {
                                        "type": "boolean",
                                        "description": "Can this phone number receive SMS?"
                                    },
                                    "phone_numbers[phone_number][country_code]": {
                                        "type": "string",
                                        "description": "Country code for the phone number. Defaults to <tt>1</tt>, if not specified."
                                    },
                                    "schedule[week]": {
                                        "type": "array",
                                        "description": "The hours of operation for the provided day",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "service_types": {
                                        "type": "array",
                                        "description": "The uuids of the service type(s)",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["phone_numbers[phone_number][phone_number]"],
                                "properties": {
                                    "phone_numbers[phone_number][phone_number]": {
                                        "type": "string",
                                        "description": "The phone number itself. Minimum 7 digits, only numbers will be stored."
                                    },
                                    "group[name]": {
                                        "type": "string",
                                        "description": "The name of the address book group."
                                    },
                                    "group[description]": {
                                        "type": "string",
                                        "description": "Description of the address book group"
                                    },
                                    "group[founded_year]": {
                                        "type": "number",
                                        "description": "The year the group was founded."
                                    },
                                    "group[status]": {
                                        "type": "string",
                                        "description": "Status of the address book group",
                                        "enum": ["draft", "in_review", "published", "archived"]
                                    },
                                    "group[primary_contact_name]": {
                                        "type": "string",
                                        "description": "Primary contact name of the address book group"
                                    },
                                    "email_addresses": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "addresses": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "phone_numbers[phone_number][is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this phone number the group's primary group number"
                                    },
                                    "phone_numbers[phone_number][phone_type]": {
                                        "type": "string",
                                        "description": "Type of phone number.",
                                        "enum": ["work", "mobile", "fax", "unknown"]
                                    },
                                    "phone_numbers[phone_number][can_sms]": {
                                        "type": "boolean",
                                        "description": "Can this phone number receive SMS?"
                                    },
                                    "phone_numbers[phone_number][country_code]": {
                                        "type": "string",
                                        "description": "Country code for the phone number. Defaults to <tt>1</tt>, if not specified."
                                    },
                                    "schedule[week]": {
                                        "type": "array",
                                        "description": "The hours of operation for the provided day",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "service_types": {
                                        "type": "array",
                                        "description": "The uuids of the service type(s)",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Address Book Groups"],
                "summary": "Update an address book group profile.",
                "operationId": "patch_v3_groups_group_id_address-books_groups_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["phone_numbers[phone_number][phone_number]"],
                                "properties": {
                                    "phone_numbers[phone_number][phone_number]": {
                                        "type": "string",
                                        "description": "The phone number itself. Minimum 7 digits, only numbers will be stored."
                                    },
                                    "group[name]": {
                                        "type": "string",
                                        "description": "The name of the address book group."
                                    },
                                    "group[description]": {
                                        "type": "string",
                                        "description": "Description of the address book group"
                                    },
                                    "group[founded_year]": {
                                        "type": "number",
                                        "description": "The year the group was founded."
                                    },
                                    "group[status]": {
                                        "type": "string",
                                        "description": "Status of the address book group",
                                        "enum": ["draft", "in_review", "published", "archived"]
                                    },
                                    "group[primary_contact_name]": {
                                        "type": "string",
                                        "description": "Primary contact name of the address book group"
                                    },
                                    "email_addresses": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "addresses": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "phone_numbers[phone_number][is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this phone number the group's primary group number"
                                    },
                                    "phone_numbers[phone_number][phone_type]": {
                                        "type": "string",
                                        "description": "Type of phone number.",
                                        "enum": ["work", "mobile", "fax", "unknown"]
                                    },
                                    "phone_numbers[phone_number][can_sms]": {
                                        "type": "boolean",
                                        "description": "Can this phone number receive SMS?"
                                    },
                                    "phone_numbers[phone_number][country_code]": {
                                        "type": "string",
                                        "description": "Country code for the phone number. Defaults to <tt>1</tt>, if not specified."
                                    },
                                    "schedule[week]": {
                                        "type": "array",
                                        "description": "The hours of operation for the provided day",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "service_types": {
                                        "type": "array",
                                        "description": "The uuids of the service type(s)",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["phone_numbers[phone_number][phone_number]"],
                                "properties": {
                                    "phone_numbers[phone_number][phone_number]": {
                                        "type": "string",
                                        "description": "The phone number itself. Minimum 7 digits, only numbers will be stored."
                                    },
                                    "group[name]": {
                                        "type": "string",
                                        "description": "The name of the address book group."
                                    },
                                    "group[description]": {
                                        "type": "string",
                                        "description": "Description of the address book group"
                                    },
                                    "group[founded_year]": {
                                        "type": "number",
                                        "description": "The year the group was founded."
                                    },
                                    "group[status]": {
                                        "type": "string",
                                        "description": "Status of the address book group",
                                        "enum": ["draft", "in_review", "published", "archived"]
                                    },
                                    "group[primary_contact_name]": {
                                        "type": "string",
                                        "description": "Primary contact name of the address book group"
                                    },
                                    "email_addresses": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "addresses": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "phone_numbers[phone_number][is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this phone number the group's primary group number"
                                    },
                                    "phone_numbers[phone_number][phone_type]": {
                                        "type": "string",
                                        "description": "Type of phone number.",
                                        "enum": ["work", "mobile", "fax", "unknown"]
                                    },
                                    "phone_numbers[phone_number][can_sms]": {
                                        "type": "boolean",
                                        "description": "Can this phone number receive SMS?"
                                    },
                                    "phone_numbers[phone_number][country_code]": {
                                        "type": "string",
                                        "description": "Country code for the phone number. Defaults to <tt>1</tt>, if not specified."
                                    },
                                    "schedule[week]": {
                                        "type": "array",
                                        "description": "The hours of operation for the provided day",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "service_types": {
                                        "type": "array",
                                        "description": "The uuids of the service type(s)",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/assistance-requests": {
            "get": {
                "tags": ["Groups: Assistance Requests"],
                "summary": "Returns a list of assistance requests sent to selected Group.",
                "operationId": "get_v3_groups_group_id_assistance-requests",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "q[service_types]",
                    "in": "query",
                    "description": "Array of service type IDs to filter results by.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/assistance-requests/accepted": {
            "get": {
                "tags": ["Groups: Assistance Requests"],
                "summary": "Returns a list of assistance requests sent to selected Group.",
                "operationId": "get_v3_groups_group_id_assistance-requests_accepted",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "q[service_types]",
                    "in": "query",
                    "description": "Array of service type IDs to filter results by.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/assistance-requests/archived": {
            "get": {
                "tags": ["Groups: Assistance Requests"],
                "summary": "Returns a list of assistance requests sent to selected Group.",
                "operationId": "get_v3_groups_group_id_assistance-requests_archived",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "q[service_types]",
                    "in": "query",
                    "description": "Array of service type IDs to filter results by.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/assistance-requests/closed": {
            "get": {
                "tags": ["Groups: Assistance Requests"],
                "summary": "Returns a list of assistance requests sent to selected Group.",
                "operationId": "get_v3_groups_group_id_assistance-requests_closed",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "q[service_types]",
                    "in": "query",
                    "description": "Array of service type IDs to filter results by.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/assistance-requests/config": {
            "get": {
                "tags": ["Groups: Assistance Request Form Config"],
                "summary": "Shows the assistance request form configuration for the selected group.",
                "operationId": "get_v3_groups_group_id_assistance-requests_config",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/assistance-requests/in-review": {
            "get": {
                "tags": ["Groups: Assistance Requests"],
                "summary": "Returns a list of assistance requests sent to selected Group.",
                "operationId": "get_v3_groups_group_id_assistance-requests_in-review",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "q[service_types]",
                    "in": "query",
                    "description": "Array of service type IDs to filter results by.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/assistance-requests/pending": {
            "get": {
                "tags": ["Groups: Assistance Requests"],
                "summary": "Returns a list of assistance requests sent to selected Group.",
                "operationId": "get_v3_groups_group_id_assistance-requests_pending",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "q[service_types]",
                    "in": "query",
                    "description": "Array of service type IDs to filter results by.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/assistance-requests/{assistance_request_id}/activity-stream/events": {
            "get": {
                "tags": ["Assistance Requests: Timeline Events"],
                "summary": "Returns a list of events for the selected Contact.",
                "description": "\n<p>Activity Stream or Timeline events are returned loosely based on the\nActivity Stream specification (<a\nhref=\"http://activitystrea.ms\">activitystrea.ms</a>).</p>\n\n<p>Available <code>verb</code> values include: <code>accept</code>,\n<code>add</code>, <code>assign</code>, <code>close</code>,\n<code>complete</code>, <code>create</code>, <code>delete</code>,\n<code>deny</code>, <code>join</code>, <code>leave</code>,\n<code>open</code>, <code>post</code>, <code>replace</code>,\n<code>retract</code>, <code>save</code>, <code>send</code>, and\n<code>update</code>.</p>\n\n<p>Use the verb, object, and target values to determine the event that\noccurred.</p>\n",
                "operationId": "get_v3_groups_group_id_assistance-requests_assistance_request_id_activity-stream_events",
                "parameters": [{
                    "name": "assistance_request_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/assistance-requests/{assistance_request_id}/activity-stream/events/filter": {
            "post": {
                "tags": ["Assistance Requests: Filter Timeline Events"],
                "summary": "Returns a list of filtered events.",
                "description": "\n<p>Filtered activity stream or timeline events are returned loosely based on\nthe Activity Stream specification (<a\nhref=\"http://activitystrea.ms\">activitystrea.ms</a>).</p>\n\n<p>Available <code>verb</code> values include: <code>accept</code>,\n<code>add</code>, <code>assign</code>, <code>close</code>,\n<code>complete</code>, <code>create</code>, <code>delete</code>,\n<code>deny</code>, <code>join</code>, <code>leave</code>,\n<code>open</code>, <code>post</code>, <code>replace</code>,\n<code>retract</code>, <code>save</code>, <code>send</code>, and\n<code>update</code>.</p>\n\n<p>Use the verb, object, and target values to determine the event that\noccurred.</p>\n",
                "operationId": "post_v3_groups_group_id_assistance-requests_assistance_request_id_activity-stream_events_filter",
                "parameters": [{
                    "name": "assistance_request_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "q[filter_names]": {
                                        "type": "string",
                                        "description": "Name of filter to be appliied",
                                        "enum": ["client_updates", "closed_records", "notes", "record_updates", "network_updates", "care_team"]
                                    },
                                    "page": {
                                        "type": "number",
                                        "description": "The page of results to be returned."
                                    },
                                    "per": {
                                        "type": "number",
                                        "description": "The number of records to be returned per page."
                                    },
                                    "sord": {
                                        "type": "string",
                                        "description": "The order to sort the results.",
                                        "enum": ["asc", "desc"]
                                    },
                                    "sidx": {
                                        "type": "string",
                                        "description": "The attribute to sort the results by."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "q[filter_names]": {
                                        "type": "string",
                                        "description": "Name of filter to be appliied",
                                        "enum": ["client_updates", "closed_records", "notes", "record_updates", "network_updates", "care_team"]
                                    },
                                    "page": {
                                        "type": "number",
                                        "description": "The page of results to be returned."
                                    },
                                    "per": {
                                        "type": "number",
                                        "description": "The number of records to be returned per page."
                                    },
                                    "sord": {
                                        "type": "string",
                                        "description": "The order to sort the results.",
                                        "enum": ["asc", "desc"]
                                    },
                                    "sidx": {
                                        "type": "string",
                                        "description": "The attribute to sort the results by."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/assistance-requests/{assistance_request_id}/close": {
            "put": {
                "tags": ["Apiv3groupsassistance requestsclosings"],
                "summary": "Set the selected case to closed and create a closing node",
                "operationId": "put_v3_groups_group_id_assistance-requests_assistance_request_id_close",
                "parameters": [{
                    "name": "assistance_request_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["exited_at", "outcome_id", "resolved"],
                                "properties": {
                                    "exited_at": {
                                        "type": "string",
                                        "description": "The date the assistance request was closed"
                                    },
                                    "outcome_id": {
                                        "type": "string",
                                        "description": "The id of the outcome this closing is associated with"
                                    },
                                    "resolved": {
                                        "type": "string",
                                        "description": "The status of the case",
                                        "enum": ["true", "false"]
                                    },
                                    "note": {
                                        "type": "string",
                                        "description": "A note pertaining to the closing"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["exited_at", "outcome_id", "resolved"],
                                "properties": {
                                    "exited_at": {
                                        "type": "string",
                                        "description": "The date the assistance request was closed"
                                    },
                                    "outcome_id": {
                                        "type": "string",
                                        "description": "The id of the outcome this closing is associated with"
                                    },
                                    "resolved": {
                                        "type": "string",
                                        "description": "The status of the case",
                                        "enum": ["true", "false"]
                                    },
                                    "note": {
                                        "type": "string",
                                        "description": "A note pertaining to the closing"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Apiv3groupsassistance requestsclosings"],
                "summary": "Set the selected case to closed and create a closing node",
                "operationId": "patch_v3_groups_group_id_assistance-requests_assistance_request_id_close",
                "parameters": [{
                    "name": "assistance_request_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["exited_at", "outcome_id", "resolved"],
                                "properties": {
                                    "exited_at": {
                                        "type": "string",
                                        "description": "The date the assistance request was closed"
                                    },
                                    "outcome_id": {
                                        "type": "string",
                                        "description": "The id of the outcome this closing is associated with"
                                    },
                                    "resolved": {
                                        "type": "string",
                                        "description": "The status of the case",
                                        "enum": ["true", "false"]
                                    },
                                    "note": {
                                        "type": "string",
                                        "description": "A note pertaining to the closing"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["exited_at", "outcome_id", "resolved"],
                                "properties": {
                                    "exited_at": {
                                        "type": "string",
                                        "description": "The date the assistance request was closed"
                                    },
                                    "outcome_id": {
                                        "type": "string",
                                        "description": "The id of the outcome this closing is associated with"
                                    },
                                    "resolved": {
                                        "type": "string",
                                        "description": "The status of the case",
                                        "enum": ["true", "false"]
                                    },
                                    "note": {
                                        "type": "string",
                                        "description": "A note pertaining to the closing"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/assistance-requests/{assistance_request_id}/form": {
            "get": {
                "tags": ["Groups -> Assistance Requests: Forms"],
                "summary": "Returns form details with any existing responses spliced into the question.",
                "operationId": "get_v3_groups_group_id_assistance-requests_assistance_request_id_form",
                "parameters": [{
                    "name": "assistance_request_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/assistance-requests/{assistance_request_id}/forms": {
            "get": {
                "tags": ["Groups -> Assistance Requests: Forms"],
                "summary": "Returns forms available to the selected assistance request.",
                "operationId": "get_v3_groups_group_id_assistance-requests_assistance_request_id_forms",
                "parameters": [{
                    "name": "assistance_request_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/assistance-requests/{id}": {
            "get": {
                "tags": ["Groups: Assistance Requests"],
                "summary": "Returns details for the selected assistance request.",
                "operationId": "get_v3_groups_group_id_assistance-requests_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/cases": {
            "get": {
                "tags": ["Groups: Cases"],
                "summary": "Returns a list of Cases serviced by the Group.",
                "operationId": "get_v3_groups_group_id_cases",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "closed",
                    "in": "query",
                    "description": "Boolean value to hide or show only closed cases. Omit for open and closed.",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "primary_data_source",
                    "in": "query",
                    "description": "Boolean to disable performance optimization for retrieving service cases.",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "q[service_types]",
                    "in": "query",
                    "description": "Array of service type uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[groups]",
                    "in": "query",
                    "description": "Array of group uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[networks]",
                    "in": "query",
                    "description": "Array of network uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[programs]",
                    "in": "query",
                    "description": "Array of program uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[care_coordinator_users]",
                    "in": "query",
                    "description": "Array of user uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[primary_worker_users]",
                    "in": "query",
                    "description": "Array of user uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[resolved]",
                    "in": "query",
                    "description": "Boolean value - true for resolved, false for unresolved. Omit for all.",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "q[network_inclusion_scope]",
                    "in": "query",
                    "description": "Cases in or out of network. Omit for both.",
                    "schema": {
                        "type": "string",
                        "enum": ["in", "out"]
                    }
                }, {
                    "name": "q[provider_scope]",
                    "in": "query",
                    "description": "Case manged by a network or group. Omit for both.",
                    "schema": {
                        "type": "string",
                        "enum": ["group", "network"]
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/cases/closed": {
            "get": {
                "tags": ["Groups: Cases"],
                "summary": "Returns a list of Cases serviced by the Group.",
                "operationId": "get_v3_groups_group_id_cases_closed",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "closed",
                    "in": "query",
                    "description": "Boolean value to hide or show only closed cases. Omit for open and closed.",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "primary_data_source",
                    "in": "query",
                    "description": "Boolean to disable performance optimization for retrieving service cases.",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "q[service_types]",
                    "in": "query",
                    "description": "Array of service type uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[groups]",
                    "in": "query",
                    "description": "Array of group uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[networks]",
                    "in": "query",
                    "description": "Array of network uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[programs]",
                    "in": "query",
                    "description": "Array of program uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[care_coordinator_users]",
                    "in": "query",
                    "description": "Array of user uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[primary_worker_users]",
                    "in": "query",
                    "description": "Array of user uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[resolved]",
                    "in": "query",
                    "description": "Boolean value - true for resolved, false for unresolved. Omit for all.",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "q[network_inclusion_scope]",
                    "in": "query",
                    "description": "Cases in or out of network. Omit for both.",
                    "schema": {
                        "type": "string",
                        "enum": ["in", "out"]
                    }
                }, {
                    "name": "q[provider_scope]",
                    "in": "query",
                    "description": "Case manged by a network or group. Omit for both.",
                    "schema": {
                        "type": "string",
                        "enum": ["group", "network"]
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/cases/converted": {
            "get": {
                "tags": ["Groups: Cases Converted from Sent Referrals"],
                "summary": "Returns a list of Cases converted from Referrals sent by the Group.",
                "operationId": "get_v3_groups_group_id_cases_converted",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "closed",
                    "in": "query",
                    "description": "Boolean value to hide or show only closed cases. Omit for open and closed.",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "q[referral_sender_users]",
                    "in": "query",
                    "description": "Array of referral sending user uuids.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[service_types]",
                    "in": "query",
                    "description": "Array of service type uuids.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[resolved]",
                    "in": "query",
                    "description": "Boolean value - true for resolved, false for unresolved. Omit for all.",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/cases/open": {
            "get": {
                "tags": ["Groups: Cases"],
                "summary": "Returns a list of Cases serviced by the Group.",
                "operationId": "get_v3_groups_group_id_cases_open",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "closed",
                    "in": "query",
                    "description": "Boolean value to hide or show only closed cases. Omit for open and closed.",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "primary_data_source",
                    "in": "query",
                    "description": "Boolean to disable performance optimization for retrieving service cases.",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "q[service_types]",
                    "in": "query",
                    "description": "Array of service type uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[groups]",
                    "in": "query",
                    "description": "Array of group uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[networks]",
                    "in": "query",
                    "description": "Array of network uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[programs]",
                    "in": "query",
                    "description": "Array of program uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[care_coordinator_users]",
                    "in": "query",
                    "description": "Array of user uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[primary_worker_users]",
                    "in": "query",
                    "description": "Array of user uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[resolved]",
                    "in": "query",
                    "description": "Boolean value - true for resolved, false for unresolved. Omit for all.",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "q[network_inclusion_scope]",
                    "in": "query",
                    "description": "Cases in or out of network. Omit for both.",
                    "schema": {
                        "type": "string",
                        "enum": ["in", "out"]
                    }
                }, {
                    "name": "q[provider_scope]",
                    "in": "query",
                    "description": "Case manged by a network or group. Omit for both.",
                    "schema": {
                        "type": "string",
                        "enum": ["group", "network"]
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/cases/resolved": {
            "get": {
                "tags": ["Groups: Cases"],
                "summary": "Returns a list of Cases serviced by the Group.",
                "operationId": "get_v3_groups_group_id_cases_resolved",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "closed",
                    "in": "query",
                    "description": "Boolean value to hide or show only closed cases. Omit for open and closed.",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "primary_data_source",
                    "in": "query",
                    "description": "Boolean to disable performance optimization for retrieving service cases.",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "q[service_types]",
                    "in": "query",
                    "description": "Array of service type uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[groups]",
                    "in": "query",
                    "description": "Array of group uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[networks]",
                    "in": "query",
                    "description": "Array of network uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[programs]",
                    "in": "query",
                    "description": "Array of program uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[care_coordinator_users]",
                    "in": "query",
                    "description": "Array of user uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[primary_worker_users]",
                    "in": "query",
                    "description": "Array of user uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[resolved]",
                    "in": "query",
                    "description": "Boolean value - true for resolved, false for unresolved. Omit for all.",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "q[network_inclusion_scope]",
                    "in": "query",
                    "description": "Cases in or out of network. Omit for both.",
                    "schema": {
                        "type": "string",
                        "enum": ["in", "out"]
                    }
                }, {
                    "name": "q[provider_scope]",
                    "in": "query",
                    "description": "Case manged by a network or group. Omit for both.",
                    "schema": {
                        "type": "string",
                        "enum": ["group", "network"]
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/cases/unresolved": {
            "get": {
                "tags": ["Groups: Cases"],
                "summary": "Returns a list of Cases serviced by the Group.",
                "operationId": "get_v3_groups_group_id_cases_unresolved",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "closed",
                    "in": "query",
                    "description": "Boolean value to hide or show only closed cases. Omit for open and closed.",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "primary_data_source",
                    "in": "query",
                    "description": "Boolean to disable performance optimization for retrieving service cases.",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "q[service_types]",
                    "in": "query",
                    "description": "Array of service type uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[groups]",
                    "in": "query",
                    "description": "Array of group uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[networks]",
                    "in": "query",
                    "description": "Array of network uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[programs]",
                    "in": "query",
                    "description": "Array of program uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[care_coordinator_users]",
                    "in": "query",
                    "description": "Array of user uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[primary_worker_users]",
                    "in": "query",
                    "description": "Array of user uuids on which to filter.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[resolved]",
                    "in": "query",
                    "description": "Boolean value - true for resolved, false for unresolved. Omit for all.",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "q[network_inclusion_scope]",
                    "in": "query",
                    "description": "Cases in or out of network. Omit for both.",
                    "schema": {
                        "type": "string",
                        "enum": ["in", "out"]
                    }
                }, {
                    "name": "q[provider_scope]",
                    "in": "query",
                    "description": "Case manged by a network or group. Omit for both.",
                    "schema": {
                        "type": "string",
                        "enum": ["group", "network"]
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/cases/{service_case_id}/forms/{form_id}/response": {
            "put": {
                "tags": ["Groups: Service Case Contact Respond to Form"],
                "summary": "Upserts a contact's response to the specified form/assessment.",
                "operationId": "put_v3_groups_group_id_cases_service_case_id_forms_form_id_response",
                "parameters": [{
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "service_case_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Groups: Service Case Contact Respond to Form"],
                "summary": "Upserts a contact's response to the specified form/assessment.",
                "operationId": "patch_v3_groups_group_id_cases_service_case_id_forms_form_id_response",
                "parameters": [{
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "service_case_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/cases/{service_case_id}/forms/{id}": {
            "get": {
                "tags": ["Groups: Service Case Contact Forms"],
                "summary": "Returns form details with any existing responses spliced into the question.",
                "operationId": "get_v3_groups_group_id_cases_service_case_id_forms_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "service_case_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts": {
            "get": {
                "tags": ["Contacts"],
                "summary": "Returns a list of accessible contacts for the selected Group.",
                "operationId": "get_v3_groups_group_id_contacts",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "post": {
                "tags": ["Contacts"],
                "summary": "Creates a new contact for the group and, optionally, network.",
                "operationId": "post_v3_groups_group_id_contacts",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["contact[first_name]", "contact[last_name]"],
                                "properties": {
                                    "contact[last_name]": {
                                        "type": "string",
                                        "description": "Contact's last name."
                                    },
                                    "contact[first_name]": {
                                        "type": "string",
                                        "description": "Contact's first name."
                                    },
                                    "network_id": {
                                        "type": "string",
                                        "description": "The identifier of the Network the contact is participating in."
                                    },
                                    "assistance_request_id": {
                                        "type": "string",
                                        "description": "The identifier of an assistance request submitted by the Contact. This will cause the API to attempt to transfer data from the assistance request requestor to the Contact."
                                    },
                                    "contact[email]": {
                                        "type": "string",
                                        "description": "Contact's email address."
                                    },
                                    "contact[date_of_birth]": {
                                        "type": "number",
                                        "description": "Unix (epoch) timestamp representing the contact's date of birth."
                                    },
                                    "contact[gender]": {
                                        "type": "string",
                                        "description": "Contact's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "contact[citizenship]": {
                                        "type": "string",
                                        "description": "Contact's specified citizenship.",
                                        "enum": ["us-citizen", "us-national", "lawful-permanent-resident", "other", "undisclosed"]
                                    },
                                    "contact[ethnicity]": {
                                        "type": "string",
                                        "description": "Contact's specified ethnicity.",
                                        "enum": ["hispanic-or-latino", "not-hispanic-or-latino", "undisclosed"]
                                    },
                                    "contact[marital_status]": {
                                        "type": "string",
                                        "description": "Contact's specified marital status.",
                                        "enum": ["divorced", "domestic_partner", "married-civil-union", "single/never-married", "separated", "undisclosed", "widowed"]
                                    },
                                    "contact[race]": {
                                        "type": "string",
                                        "description": "Contact's specified race.",
                                        "enum": ["american-indian-alaska-native", "asian", "black-african-american", "native-hawaiian-or-pacific-islander", "other-race", "undisclosed", "white"]
                                    },
                                    "contact[email_address]": {
                                        "type": "string",
                                        "description": "Contact's primary email address."
                                    },
                                    "contact[preferred_first_name]": {
                                        "type": "string",
                                        "description": "Contact's preferred first name."
                                    },
                                    "contact[title]": {
                                        "type": "string",
                                        "description": "Contact's title.",
                                        "enum": ["Mr.", "Miss", "Mrs.", "Ms.", "Dr."]
                                    },
                                    "contact[middle_name_initial]": {
                                        "type": "string",
                                        "description": "Contact's middle name or initial."
                                    },
                                    "contact[suffix]": {
                                        "type": "string",
                                        "description": "Contact's suffix.",
                                        "enum": ["Jr.", "Sr.", "III", "IV", "V", "Esq.", "Ph.D"]
                                    },
                                    "contact[nicknames]": {
                                        "type": "array",
                                        "description": "Contact's nicknames.",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[preferred_communication_method]": {
                                        "type": "string",
                                        "description": "Preferred communication method",
                                        "enum": ["phone_call", "sms", "email", "no_preference"]
                                    },
                                    "contact[preferred_communication_time_of_day]": {
                                        "type": "string",
                                        "description": "Preferred communication time of day",
                                        "enum": ["any_time", "morning", "afternoon", "evening"]
                                    },
                                    "contact[addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[email_addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[phone_numbers]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[military][affiliation]": {
                                        "type": "string",
                                        "description": "Military affiliation",
                                        "enum": ["military_member_or_veteran", "spouse", "widow", "family_member", "caregiver", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][current_status]": {
                                        "type": "string",
                                        "description": "Current military status",
                                        "enum": ["active_duty", "national_guard", "reserve", "retiree", "veteran", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][currently_transitioning]": {
                                        "type": "string",
                                        "description": "Is the contact currently transitioning?",
                                        "enum": ["yes_12mos_before", "yes_12mos_after", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][at_least_one_day_active_duty]": {
                                        "type": "string",
                                        "description": "Has at least one day of active duty outside of basic training?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][branch]": {
                                        "type": "string",
                                        "description": "Branch of service",
                                        "enum": ["air_force", "army", "coast_guard", "marines", "navy", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_era]": {
                                        "type": "string",
                                        "description": "Service era",
                                        "enum": ["post_911", "persian_gulf", "post_vietnam", "vietnam", "post_korean", "korean_war", "pre_korean", "ww2", "merchant_marine", "ww1", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][entry_date]": {
                                        "type": "number",
                                        "description": "Date of entry"
                                    },
                                    "contact[military][exit_date]": {
                                        "type": "number",
                                        "description": "Date of exit"
                                    },
                                    "contact[military][deployed]": {
                                        "type": "string",
                                        "description": "Deployed?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][deployment_starts_at]": {
                                        "type": "number",
                                        "description": "Deployment start date"
                                    },
                                    "contact[military][deployment_ends_at]": {
                                        "type": "number",
                                        "description": "Deployment end date"
                                    },
                                    "contact[military][discharge_type]": {
                                        "type": "string",
                                        "description": "Discharge type",
                                        "enum": ["honorable", "general", "other_than_honorable", "bad_conduct", "dishonorable", "uncharacterized", "other", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][discharged_due_to_disability]": {
                                        "type": "string",
                                        "description": "Discharged or retired from military service for a disability incurred in the line of duty?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_connected_disability]": {
                                        "type": "string",
                                        "description": "Has VA-rated Service-Connected Disability?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_connected_disability_rating]": {
                                        "type": "string",
                                        "description": "Service-Connected Disability Rating",
                                        "enum": ["0", "10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][proof_of_veteran_status]": {
                                        "type": "string",
                                        "description": "Have proof of veteran status?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][proof_type]": {
                                        "type": "string",
                                        "description": "Proof type",
                                        "enum": ["dd214", "va_id", "statement_of_service", "retiree_id", "drivers_license", "military_id", "other", "prefer_not_to_disclose"]
                                    },
                                    "contact[insurance_ids]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["contact[first_name]", "contact[last_name]"],
                                "properties": {
                                    "contact[last_name]": {
                                        "type": "string",
                                        "description": "Contact's last name."
                                    },
                                    "contact[first_name]": {
                                        "type": "string",
                                        "description": "Contact's first name."
                                    },
                                    "network_id": {
                                        "type": "string",
                                        "description": "The identifier of the Network the contact is participating in."
                                    },
                                    "assistance_request_id": {
                                        "type": "string",
                                        "description": "The identifier of an assistance request submitted by the Contact. This will cause the API to attempt to transfer data from the assistance request requestor to the Contact."
                                    },
                                    "contact[email]": {
                                        "type": "string",
                                        "description": "Contact's email address."
                                    },
                                    "contact[date_of_birth]": {
                                        "type": "number",
                                        "description": "Unix (epoch) timestamp representing the contact's date of birth."
                                    },
                                    "contact[gender]": {
                                        "type": "string",
                                        "description": "Contact's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "contact[citizenship]": {
                                        "type": "string",
                                        "description": "Contact's specified citizenship.",
                                        "enum": ["us-citizen", "us-national", "lawful-permanent-resident", "other", "undisclosed"]
                                    },
                                    "contact[ethnicity]": {
                                        "type": "string",
                                        "description": "Contact's specified ethnicity.",
                                        "enum": ["hispanic-or-latino", "not-hispanic-or-latino", "undisclosed"]
                                    },
                                    "contact[marital_status]": {
                                        "type": "string",
                                        "description": "Contact's specified marital status.",
                                        "enum": ["divorced", "domestic_partner", "married-civil-union", "single/never-married", "separated", "undisclosed", "widowed"]
                                    },
                                    "contact[race]": {
                                        "type": "string",
                                        "description": "Contact's specified race.",
                                        "enum": ["american-indian-alaska-native", "asian", "black-african-american", "native-hawaiian-or-pacific-islander", "other-race", "undisclosed", "white"]
                                    },
                                    "contact[email_address]": {
                                        "type": "string",
                                        "description": "Contact's primary email address."
                                    },
                                    "contact[preferred_first_name]": {
                                        "type": "string",
                                        "description": "Contact's preferred first name."
                                    },
                                    "contact[title]": {
                                        "type": "string",
                                        "description": "Contact's title.",
                                        "enum": ["Mr.", "Miss", "Mrs.", "Ms.", "Dr."]
                                    },
                                    "contact[middle_name_initial]": {
                                        "type": "string",
                                        "description": "Contact's middle name or initial."
                                    },
                                    "contact[suffix]": {
                                        "type": "string",
                                        "description": "Contact's suffix.",
                                        "enum": ["Jr.", "Sr.", "III", "IV", "V", "Esq.", "Ph.D"]
                                    },
                                    "contact[nicknames]": {
                                        "type": "array",
                                        "description": "Contact's nicknames.",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[preferred_communication_method]": {
                                        "type": "string",
                                        "description": "Preferred communication method",
                                        "enum": ["phone_call", "sms", "email", "no_preference"]
                                    },
                                    "contact[preferred_communication_time_of_day]": {
                                        "type": "string",
                                        "description": "Preferred communication time of day",
                                        "enum": ["any_time", "morning", "afternoon", "evening"]
                                    },
                                    "contact[addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[email_addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[phone_numbers]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[military][affiliation]": {
                                        "type": "string",
                                        "description": "Military affiliation",
                                        "enum": ["military_member_or_veteran", "spouse", "widow", "family_member", "caregiver", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][current_status]": {
                                        "type": "string",
                                        "description": "Current military status",
                                        "enum": ["active_duty", "national_guard", "reserve", "retiree", "veteran", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][currently_transitioning]": {
                                        "type": "string",
                                        "description": "Is the contact currently transitioning?",
                                        "enum": ["yes_12mos_before", "yes_12mos_after", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][at_least_one_day_active_duty]": {
                                        "type": "string",
                                        "description": "Has at least one day of active duty outside of basic training?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][branch]": {
                                        "type": "string",
                                        "description": "Branch of service",
                                        "enum": ["air_force", "army", "coast_guard", "marines", "navy", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_era]": {
                                        "type": "string",
                                        "description": "Service era",
                                        "enum": ["post_911", "persian_gulf", "post_vietnam", "vietnam", "post_korean", "korean_war", "pre_korean", "ww2", "merchant_marine", "ww1", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][entry_date]": {
                                        "type": "number",
                                        "description": "Date of entry"
                                    },
                                    "contact[military][exit_date]": {
                                        "type": "number",
                                        "description": "Date of exit"
                                    },
                                    "contact[military][deployed]": {
                                        "type": "string",
                                        "description": "Deployed?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][deployment_starts_at]": {
                                        "type": "number",
                                        "description": "Deployment start date"
                                    },
                                    "contact[military][deployment_ends_at]": {
                                        "type": "number",
                                        "description": "Deployment end date"
                                    },
                                    "contact[military][discharge_type]": {
                                        "type": "string",
                                        "description": "Discharge type",
                                        "enum": ["honorable", "general", "other_than_honorable", "bad_conduct", "dishonorable", "uncharacterized", "other", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][discharged_due_to_disability]": {
                                        "type": "string",
                                        "description": "Discharged or retired from military service for a disability incurred in the line of duty?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_connected_disability]": {
                                        "type": "string",
                                        "description": "Has VA-rated Service-Connected Disability?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_connected_disability_rating]": {
                                        "type": "string",
                                        "description": "Service-Connected Disability Rating",
                                        "enum": ["0", "10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][proof_of_veteran_status]": {
                                        "type": "string",
                                        "description": "Have proof of veteran status?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][proof_type]": {
                                        "type": "string",
                                        "description": "Proof type",
                                        "enum": ["dd214", "va_id", "statement_of_service", "retiree_id", "drivers_license", "military_id", "other", "prefer_not_to_disclose"]
                                    },
                                    "contact[insurance_ids]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/filtered/primary-workers/me": {
            "get": {
                "tags": ["Contacts: Filter by Primary Worker"],
                "summary": "Returns a list of accessible contacts for which the specified user is the primary worker.",
                "operationId": "get_v3_groups_group_id_contacts_filtered_primary-workers_me",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/filtered/primary-workers/{user_id}": {
            "get": {
                "tags": ["Contacts: Filter by Primary Worker"],
                "summary": "Returns a list of accessible contacts for which the specified user is the primary worker.",
                "operationId": "get_v3_groups_group_id_contacts_filtered_primary-workers_user_id",
                "parameters": [{
                    "name": "user_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/with-intakes": {
            "get": {
                "tags": ["Contacts with Intakes"],
                "summary": "Returns a list of accessible contacts with intakes for the selected Group.",
                "operationId": "get_v3_groups_group_id_contacts_with-intakes",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/activity-stream/events": {
            "get": {
                "tags": ["Contacts: Timeline Events"],
                "summary": "Returns a list of events for the selected Contact.",
                "description": "\n<p>Activity Stream or Timeline events are returned loosely based on the\nActivity Stream specification (<a\nhref=\"http://activitystrea.ms\">activitystrea.ms</a>).</p>\n\n<p>Available <code>verb</code> values include: <code>accept</code>,\n<code>add</code>, <code>assign</code>, <code>close</code>,\n<code>complete</code>, <code>create</code>, <code>delete</code>,\n<code>deny</code>, <code>join</code>, <code>leave</code>,\n<code>open</code>, <code>post</code>, <code>replace</code>,\n<code>retract</code>, <code>save</code>, <code>send</code>, and\n<code>update</code>.</p>\n\n<p>Use the verb, object, and target values to determine the event that\noccurred.</p>\n",
                "operationId": "get_v3_groups_group_id_contacts_contact_id_activity-stream_events",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/activity-stream/events/filter": {
            "post": {
                "tags": ["Contacts: Filter Timeline Events"],
                "summary": "Returns a list of filtered events.",
                "description": "\n<p>Filtered activity stream or timeline events are returned loosely based on\nthe Activity Stream specification (<a\nhref=\"http://activitystrea.ms\">activitystrea.ms</a>).</p>\n\n<p>Available <code>verb</code> values include: <code>accept</code>,\n<code>add</code>, <code>assign</code>, <code>close</code>,\n<code>complete</code>, <code>create</code>, <code>delete</code>,\n<code>deny</code>, <code>join</code>, <code>leave</code>,\n<code>open</code>, <code>post</code>, <code>replace</code>,\n<code>retract</code>, <code>save</code>, <code>send</code>, and\n<code>update</code>.</p>\n\n<p>Use the verb, object, and target values to determine the event that\noccurred.</p>\n",
                "operationId": "post_v3_groups_group_id_contacts_contact_id_activity-stream_events_filter",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "q[filter_names]": {
                                        "type": "string",
                                        "description": "Name of filter to be appliied",
                                        "enum": ["client_updates", "closed_records", "notes", "record_updates", "network_updates", "care_team"]
                                    },
                                    "page": {
                                        "type": "number",
                                        "description": "The page of results to be returned."
                                    },
                                    "per": {
                                        "type": "number",
                                        "description": "The number of records to be returned per page."
                                    },
                                    "sord": {
                                        "type": "string",
                                        "description": "The order to sort the results.",
                                        "enum": ["asc", "desc"]
                                    },
                                    "sidx": {
                                        "type": "string",
                                        "description": "The attribute to sort the results by."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "q[filter_names]": {
                                        "type": "string",
                                        "description": "Name of filter to be appliied",
                                        "enum": ["client_updates", "closed_records", "notes", "record_updates", "network_updates", "care_team"]
                                    },
                                    "page": {
                                        "type": "number",
                                        "description": "The page of results to be returned."
                                    },
                                    "per": {
                                        "type": "number",
                                        "description": "The number of records to be returned per page."
                                    },
                                    "sord": {
                                        "type": "string",
                                        "description": "The order to sort the results.",
                                        "enum": ["asc", "desc"]
                                    },
                                    "sidx": {
                                        "type": "string",
                                        "description": "The attribute to sort the results by."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/addresses": {
            "post": {
                "tags": ["Contacts: Addresses"],
                "summary": "Add a new address to the selected Contact.",
                "operationId": "post_v3_groups_group_id_contacts_contact_id_addresses",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["address[address_type]", "address[city]", "address[postal_code]", "address[state]"],
                                "properties": {
                                    "address[state]": {
                                        "type": "string",
                                        "description": "State or province for the address."
                                    },
                                    "address[postal_code]": {
                                        "type": "string",
                                        "description": "Postal or ZIP code for the address. Minimum 5 characters in length, maximum 15."
                                    },
                                    "address[city]": {
                                        "type": "string",
                                        "description": "City or town of the address."
                                    },
                                    "address[address_type]": {
                                        "type": "string",
                                        "description": "Type of address.",
                                        "enum": ["home", "mailing", "work", "unknown"]
                                    },
                                    "address[line_1]": {
                                        "type": "string",
                                        "description": "Address line 1"
                                    },
                                    "address[line_2]": {
                                        "type": "string",
                                        "description": "Additional address details, ex. apartment, suite, etc."
                                    },
                                    "address[country]": {
                                        "type": "string",
                                        "description": "Country for the address."
                                    },
                                    "address[is_mailing_address]": {
                                        "type": "boolean",
                                        "description": "Is this a mailing address."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["address[address_type]", "address[city]", "address[postal_code]", "address[state]"],
                                "properties": {
                                    "address[state]": {
                                        "type": "string",
                                        "description": "State or province for the address."
                                    },
                                    "address[postal_code]": {
                                        "type": "string",
                                        "description": "Postal or ZIP code for the address. Minimum 5 characters in length, maximum 15."
                                    },
                                    "address[city]": {
                                        "type": "string",
                                        "description": "City or town of the address."
                                    },
                                    "address[address_type]": {
                                        "type": "string",
                                        "description": "Type of address.",
                                        "enum": ["home", "mailing", "work", "unknown"]
                                    },
                                    "address[line_1]": {
                                        "type": "string",
                                        "description": "Address line 1"
                                    },
                                    "address[line_2]": {
                                        "type": "string",
                                        "description": "Additional address details, ex. apartment, suite, etc."
                                    },
                                    "address[country]": {
                                        "type": "string",
                                        "description": "Country for the address."
                                    },
                                    "address[is_mailing_address]": {
                                        "type": "boolean",
                                        "description": "Is this a mailing address."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/addresses/{id}": {
            "put": {
                "tags": ["Contacts: Addresses"],
                "summary": "Update an existing Contact address.",
                "operationId": "put_v3_groups_group_id_contacts_contact_id_addresses_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["address[address_type]", "address[city]", "address[postal_code]", "address[state]"],
                                "properties": {
                                    "address[state]": {
                                        "type": "string",
                                        "description": "State or province for the address."
                                    },
                                    "address[postal_code]": {
                                        "type": "string",
                                        "description": "Postal or ZIP code for the address. Minimum 5 characters in length, maximum 15."
                                    },
                                    "address[city]": {
                                        "type": "string",
                                        "description": "City or town of the address."
                                    },
                                    "address[address_type]": {
                                        "type": "string",
                                        "description": "Type of address.",
                                        "enum": ["home", "mailing", "work", "unknown"]
                                    },
                                    "address[line_1]": {
                                        "type": "string",
                                        "description": "Address line 1"
                                    },
                                    "address[line_2]": {
                                        "type": "string",
                                        "description": "Additional address details, ex. apartment, suite, etc."
                                    },
                                    "address[country]": {
                                        "type": "string",
                                        "description": "Country for the address."
                                    },
                                    "address[is_mailing_address]": {
                                        "type": "boolean",
                                        "description": "Is this a mailing address."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["address[address_type]", "address[city]", "address[postal_code]", "address[state]"],
                                "properties": {
                                    "address[state]": {
                                        "type": "string",
                                        "description": "State or province for the address."
                                    },
                                    "address[postal_code]": {
                                        "type": "string",
                                        "description": "Postal or ZIP code for the address. Minimum 5 characters in length, maximum 15."
                                    },
                                    "address[city]": {
                                        "type": "string",
                                        "description": "City or town of the address."
                                    },
                                    "address[address_type]": {
                                        "type": "string",
                                        "description": "Type of address.",
                                        "enum": ["home", "mailing", "work", "unknown"]
                                    },
                                    "address[line_1]": {
                                        "type": "string",
                                        "description": "Address line 1"
                                    },
                                    "address[line_2]": {
                                        "type": "string",
                                        "description": "Additional address details, ex. apartment, suite, etc."
                                    },
                                    "address[country]": {
                                        "type": "string",
                                        "description": "Country for the address."
                                    },
                                    "address[is_mailing_address]": {
                                        "type": "boolean",
                                        "description": "Is this a mailing address."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Contacts: Addresses"],
                "summary": "Remove an existing Contact address.",
                "operationId": "delete_v3_groups_group_id_contacts_contact_id_addresses_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Contacts: Addresses"],
                "summary": "Update an existing Contact address.",
                "operationId": "patch_v3_groups_group_id_contacts_contact_id_addresses_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["address[address_type]", "address[city]", "address[postal_code]", "address[state]"],
                                "properties": {
                                    "address[state]": {
                                        "type": "string",
                                        "description": "State or province for the address."
                                    },
                                    "address[postal_code]": {
                                        "type": "string",
                                        "description": "Postal or ZIP code for the address. Minimum 5 characters in length, maximum 15."
                                    },
                                    "address[city]": {
                                        "type": "string",
                                        "description": "City or town of the address."
                                    },
                                    "address[address_type]": {
                                        "type": "string",
                                        "description": "Type of address.",
                                        "enum": ["home", "mailing", "work", "unknown"]
                                    },
                                    "address[line_1]": {
                                        "type": "string",
                                        "description": "Address line 1"
                                    },
                                    "address[line_2]": {
                                        "type": "string",
                                        "description": "Additional address details, ex. apartment, suite, etc."
                                    },
                                    "address[country]": {
                                        "type": "string",
                                        "description": "Country for the address."
                                    },
                                    "address[is_mailing_address]": {
                                        "type": "boolean",
                                        "description": "Is this a mailing address."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["address[address_type]", "address[city]", "address[postal_code]", "address[state]"],
                                "properties": {
                                    "address[state]": {
                                        "type": "string",
                                        "description": "State or province for the address."
                                    },
                                    "address[postal_code]": {
                                        "type": "string",
                                        "description": "Postal or ZIP code for the address. Minimum 5 characters in length, maximum 15."
                                    },
                                    "address[city]": {
                                        "type": "string",
                                        "description": "City or town of the address."
                                    },
                                    "address[address_type]": {
                                        "type": "string",
                                        "description": "Type of address.",
                                        "enum": ["home", "mailing", "work", "unknown"]
                                    },
                                    "address[line_1]": {
                                        "type": "string",
                                        "description": "Address line 1"
                                    },
                                    "address[line_2]": {
                                        "type": "string",
                                        "description": "Additional address details, ex. apartment, suite, etc."
                                    },
                                    "address[country]": {
                                        "type": "string",
                                        "description": "Country for the address."
                                    },
                                    "address[is_mailing_address]": {
                                        "type": "boolean",
                                        "description": "Is this a mailing address."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/care-coordinators": {
            "put": {
                "tags": ["Care Coordinators"],
                "summary": "Updates the assigned Care Coordinator to a Contact",
                "operationId": "put_v3_groups_group_id_contacts_contact_id_care-coordinators",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Care Coordinators"],
                "summary": "Updates the assigned Care Coordinator to a Contact",
                "operationId": "patch_v3_groups_group_id_contacts_contact_id_care-coordinators",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/care-team/members": {
            "get": {
                "tags": ["Contact: Care Team"],
                "summary": "Returns the care team members for the selected contact.",
                "operationId": "get_v3_groups_group_id_contacts_contact_id_care-team_members",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "post": {
                "tags": ["Contact: Care Team"],
                "summary": "Create a new ad-hoc Care Team member for the selected contact.",
                "operationId": "post_v3_groups_group_id_contacts_contact_id_care-team_members",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["member[first_name]", "member[last_name]"],
                                "properties": {
                                    "member[last_name]": {
                                        "type": "string",
                                        "description": "Team member's last name."
                                    },
                                    "member[first_name]": {
                                        "type": "string",
                                        "description": "Team member's first name."
                                    },
                                    "member[email]": {
                                        "type": "string",
                                        "description": "Team member's email address."
                                    },
                                    "member[relation_to_contact]": {
                                        "type": "string",
                                        "description": "Team member's relation to the contact."
                                    },
                                    "member[addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "member[email_addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "member[phone_numbers]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["member[first_name]", "member[last_name]"],
                                "properties": {
                                    "member[last_name]": {
                                        "type": "string",
                                        "description": "Team member's last name."
                                    },
                                    "member[first_name]": {
                                        "type": "string",
                                        "description": "Team member's first name."
                                    },
                                    "member[email]": {
                                        "type": "string",
                                        "description": "Team member's email address."
                                    },
                                    "member[relation_to_contact]": {
                                        "type": "string",
                                        "description": "Team member's relation to the contact."
                                    },
                                    "member[addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "member[email_addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "member[phone_numbers]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/care-team/members/{id}": {
            "put": {
                "tags": ["Contact: Care Team"],
                "summary": "Updates an existing ad-hoc Care Team member for the selected contact.",
                "operationId": "put_v3_groups_group_id_contacts_contact_id_care-team_members_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "member[first_name]": {
                                        "type": "string",
                                        "description": "Team member's first name."
                                    },
                                    "member[last_name]": {
                                        "type": "string",
                                        "description": "Team member's last name."
                                    },
                                    "member[email]": {
                                        "type": "string",
                                        "description": "Team member's email address."
                                    },
                                    "member[relation_to_contact]": {
                                        "type": "string",
                                        "description": "Team member's relation to the contact."
                                    },
                                    "member[addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "member[email_addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "member[phone_numbers]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "member[first_name]": {
                                        "type": "string",
                                        "description": "Team member's first name."
                                    },
                                    "member[last_name]": {
                                        "type": "string",
                                        "description": "Team member's last name."
                                    },
                                    "member[email]": {
                                        "type": "string",
                                        "description": "Team member's email address."
                                    },
                                    "member[relation_to_contact]": {
                                        "type": "string",
                                        "description": "Team member's relation to the contact."
                                    },
                                    "member[addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "member[email_addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "member[phone_numbers]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Contact: Care Team"],
                "summary": "Removes an ad-hoc Care Team member from the selected contact.",
                "operationId": "delete_v3_groups_group_id_contacts_contact_id_care-team_members_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Contact: Care Team"],
                "summary": "Updates an existing ad-hoc Care Team member for the selected contact.",
                "operationId": "patch_v3_groups_group_id_contacts_contact_id_care-team_members_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "member[first_name]": {
                                        "type": "string",
                                        "description": "Team member's first name."
                                    },
                                    "member[last_name]": {
                                        "type": "string",
                                        "description": "Team member's last name."
                                    },
                                    "member[email]": {
                                        "type": "string",
                                        "description": "Team member's email address."
                                    },
                                    "member[relation_to_contact]": {
                                        "type": "string",
                                        "description": "Team member's relation to the contact."
                                    },
                                    "member[addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "member[email_addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "member[phone_numbers]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "member[first_name]": {
                                        "type": "string",
                                        "description": "Team member's first name."
                                    },
                                    "member[last_name]": {
                                        "type": "string",
                                        "description": "Team member's last name."
                                    },
                                    "member[email]": {
                                        "type": "string",
                                        "description": "Team member's email address."
                                    },
                                    "member[relation_to_contact]": {
                                        "type": "string",
                                        "description": "Team member's relation to the contact."
                                    },
                                    "member[addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "member[email_addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "member[phone_numbers]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/care-team/members/{member_id}/addresses": {
            "post": {
                "tags": ["Care Team Members: Addresses"],
                "summary": "Add a new address to the selected Care Team Member.",
                "operationId": "post_v3_groups_group_id_contacts_contact_id_care-team_members_member_id_addresses",
                "parameters": [{
                    "name": "member_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["address[address_type]", "address[city]", "address[country]", "address[postal_code]", "address[state]"],
                                "properties": {
                                    "address[country]": {
                                        "type": "string",
                                        "description": "Country for the address."
                                    },
                                    "address[state]": {
                                        "type": "string",
                                        "description": "State or province for the address."
                                    },
                                    "address[postal_code]": {
                                        "type": "string",
                                        "description": "Postal or ZIP code for the address. Minimum 5 characters in length, maximum 15."
                                    },
                                    "address[city]": {
                                        "type": "string",
                                        "description": "City or town of the address."
                                    },
                                    "address[address_type]": {
                                        "type": "string",
                                        "description": "Type of address.",
                                        "enum": ["home", "mailing", "work", "unknown"]
                                    },
                                    "address[line_1]": {
                                        "type": "string",
                                        "description": "Address line 1"
                                    },
                                    "address[line_2]": {
                                        "type": "string",
                                        "description": "Additional address details, ex. apartment, suite, etc."
                                    },
                                    "address[is_mailing_address]": {
                                        "type": "boolean",
                                        "description": "Is this a mailing address."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["address[address_type]", "address[city]", "address[country]", "address[postal_code]", "address[state]"],
                                "properties": {
                                    "address[country]": {
                                        "type": "string",
                                        "description": "Country for the address."
                                    },
                                    "address[state]": {
                                        "type": "string",
                                        "description": "State or province for the address."
                                    },
                                    "address[postal_code]": {
                                        "type": "string",
                                        "description": "Postal or ZIP code for the address. Minimum 5 characters in length, maximum 15."
                                    },
                                    "address[city]": {
                                        "type": "string",
                                        "description": "City or town of the address."
                                    },
                                    "address[address_type]": {
                                        "type": "string",
                                        "description": "Type of address.",
                                        "enum": ["home", "mailing", "work", "unknown"]
                                    },
                                    "address[line_1]": {
                                        "type": "string",
                                        "description": "Address line 1"
                                    },
                                    "address[line_2]": {
                                        "type": "string",
                                        "description": "Additional address details, ex. apartment, suite, etc."
                                    },
                                    "address[is_mailing_address]": {
                                        "type": "boolean",
                                        "description": "Is this a mailing address."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/care-team/members/{member_id}/addresses/{id}": {
            "put": {
                "tags": ["Care Team Members: Addresses"],
                "summary": "Update an existing Care Team Member address.",
                "operationId": "put_v3_groups_group_id_contacts_contact_id_care-team_members_member_id_addresses_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "member_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["address[address_type]", "address[city]", "address[country]", "address[postal_code]", "address[state]"],
                                "properties": {
                                    "address[country]": {
                                        "type": "string",
                                        "description": "Country for the address."
                                    },
                                    "address[state]": {
                                        "type": "string",
                                        "description": "State or province for the address."
                                    },
                                    "address[postal_code]": {
                                        "type": "string",
                                        "description": "Postal or ZIP code for the address. Minimum 5 characters in length, maximum 15."
                                    },
                                    "address[city]": {
                                        "type": "string",
                                        "description": "City or town of the address."
                                    },
                                    "address[address_type]": {
                                        "type": "string",
                                        "description": "Type of address.",
                                        "enum": ["home", "mailing", "work", "unknown"]
                                    },
                                    "address[line_1]": {
                                        "type": "string",
                                        "description": "Address line 1"
                                    },
                                    "address[line_2]": {
                                        "type": "string",
                                        "description": "Additional address details, ex. apartment, suite, etc."
                                    },
                                    "address[is_mailing_address]": {
                                        "type": "boolean",
                                        "description": "Is this a mailing address."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["address[address_type]", "address[city]", "address[country]", "address[postal_code]", "address[state]"],
                                "properties": {
                                    "address[country]": {
                                        "type": "string",
                                        "description": "Country for the address."
                                    },
                                    "address[state]": {
                                        "type": "string",
                                        "description": "State or province for the address."
                                    },
                                    "address[postal_code]": {
                                        "type": "string",
                                        "description": "Postal or ZIP code for the address. Minimum 5 characters in length, maximum 15."
                                    },
                                    "address[city]": {
                                        "type": "string",
                                        "description": "City or town of the address."
                                    },
                                    "address[address_type]": {
                                        "type": "string",
                                        "description": "Type of address.",
                                        "enum": ["home", "mailing", "work", "unknown"]
                                    },
                                    "address[line_1]": {
                                        "type": "string",
                                        "description": "Address line 1"
                                    },
                                    "address[line_2]": {
                                        "type": "string",
                                        "description": "Additional address details, ex. apartment, suite, etc."
                                    },
                                    "address[is_mailing_address]": {
                                        "type": "boolean",
                                        "description": "Is this a mailing address."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Care Team Members: Addresses"],
                "summary": "Remove an existing Care Team Member address.",
                "operationId": "delete_v3_groups_group_id_contacts_contact_id_care-team_members_member_id_addresses_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "member_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Care Team Members: Addresses"],
                "summary": "Update an existing Care Team Member address.",
                "operationId": "patch_v3_groups_group_id_contacts_contact_id_care-team_members_member_id_addresses_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "member_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["address[address_type]", "address[city]", "address[country]", "address[postal_code]", "address[state]"],
                                "properties": {
                                    "address[country]": {
                                        "type": "string",
                                        "description": "Country for the address."
                                    },
                                    "address[state]": {
                                        "type": "string",
                                        "description": "State or province for the address."
                                    },
                                    "address[postal_code]": {
                                        "type": "string",
                                        "description": "Postal or ZIP code for the address. Minimum 5 characters in length, maximum 15."
                                    },
                                    "address[city]": {
                                        "type": "string",
                                        "description": "City or town of the address."
                                    },
                                    "address[address_type]": {
                                        "type": "string",
                                        "description": "Type of address.",
                                        "enum": ["home", "mailing", "work", "unknown"]
                                    },
                                    "address[line_1]": {
                                        "type": "string",
                                        "description": "Address line 1"
                                    },
                                    "address[line_2]": {
                                        "type": "string",
                                        "description": "Additional address details, ex. apartment, suite, etc."
                                    },
                                    "address[is_mailing_address]": {
                                        "type": "boolean",
                                        "description": "Is this a mailing address."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["address[address_type]", "address[city]", "address[country]", "address[postal_code]", "address[state]"],
                                "properties": {
                                    "address[country]": {
                                        "type": "string",
                                        "description": "Country for the address."
                                    },
                                    "address[state]": {
                                        "type": "string",
                                        "description": "State or province for the address."
                                    },
                                    "address[postal_code]": {
                                        "type": "string",
                                        "description": "Postal or ZIP code for the address. Minimum 5 characters in length, maximum 15."
                                    },
                                    "address[city]": {
                                        "type": "string",
                                        "description": "City or town of the address."
                                    },
                                    "address[address_type]": {
                                        "type": "string",
                                        "description": "Type of address.",
                                        "enum": ["home", "mailing", "work", "unknown"]
                                    },
                                    "address[line_1]": {
                                        "type": "string",
                                        "description": "Address line 1"
                                    },
                                    "address[line_2]": {
                                        "type": "string",
                                        "description": "Additional address details, ex. apartment, suite, etc."
                                    },
                                    "address[is_mailing_address]": {
                                        "type": "boolean",
                                        "description": "Is this a mailing address."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/care-team/members/{member_id}/email-addresses": {
            "post": {
                "tags": ["Care Team Members: Email Addresses"],
                "summary": "Add a new email address to the selected Care Team Member.",
                "operationId": "post_v3_groups_group_id_contacts_contact_id_care-team_members_member_id_email-addresses",
                "parameters": [{
                    "name": "member_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["email_address[email_address]"],
                                "properties": {
                                    "email_address[email_address]": {
                                        "type": "string",
                                        "description": "A valid email address"
                                    },
                                    "email_address[is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this email address the primary one for the care team member."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["email_address[email_address]"],
                                "properties": {
                                    "email_address[email_address]": {
                                        "type": "string",
                                        "description": "A valid email address"
                                    },
                                    "email_address[is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this email address the primary one for the care team member."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/care-team/members/{member_id}/email-addresses/{id}": {
            "put": {
                "tags": ["Care Team Members: Email Addresses"],
                "summary": "Update an existing Care Team Member email address.",
                "operationId": "put_v3_groups_group_id_contacts_contact_id_care-team_members_member_id_email-addresses_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "member_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["email_address[email_address]"],
                                "properties": {
                                    "email_address[email_address]": {
                                        "type": "string",
                                        "description": "A valid email address"
                                    },
                                    "email_address[is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this email address the primary one for the care team member."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["email_address[email_address]"],
                                "properties": {
                                    "email_address[email_address]": {
                                        "type": "string",
                                        "description": "A valid email address"
                                    },
                                    "email_address[is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this email address the primary one for the care team member."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Care Team Members: Email Addresses"],
                "summary": "Remove an existing Care Team Member email address.",
                "operationId": "delete_v3_groups_group_id_contacts_contact_id_care-team_members_member_id_email-addresses_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "member_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Care Team Members: Email Addresses"],
                "summary": "Update an existing Care Team Member email address.",
                "operationId": "patch_v3_groups_group_id_contacts_contact_id_care-team_members_member_id_email-addresses_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "member_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["email_address[email_address]"],
                                "properties": {
                                    "email_address[email_address]": {
                                        "type": "string",
                                        "description": "A valid email address"
                                    },
                                    "email_address[is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this email address the primary one for the care team member."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["email_address[email_address]"],
                                "properties": {
                                    "email_address[email_address]": {
                                        "type": "string",
                                        "description": "A valid email address"
                                    },
                                    "email_address[is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this email address the primary one for the care team member."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/care-team/members/{member_id}/phone-numbers": {
            "post": {
                "tags": ["Care Team Members: Phone Numbers"],
                "summary": "Add a new phone number to the selected Care Team Member.",
                "operationId": "post_v3_groups_group_id_contacts_contact_id_care-team_members_member_id_phone-numbers",
                "parameters": [{
                    "name": "member_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["phone_number[phone_number]"],
                                "properties": {
                                    "phone_number[phone_number]": {
                                        "type": "string",
                                        "description": "The phone number itself. Minimum 7 digits, only numbers will be stored."
                                    },
                                    "phone_number[is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this phone number the care team member's primary contact number."
                                    },
                                    "phone_number[phone_type]": {
                                        "type": "string",
                                        "description": "Type of phone number.",
                                        "enum": ["mobile", "home", "work", "fax", "unknown"]
                                    },
                                    "phone_number[can_sms]": {
                                        "type": "boolean",
                                        "description": "Can this phone number receive SMS?"
                                    },
                                    "phone_number[country_code]": {
                                        "type": "string",
                                        "description": "Country code for the phone number. Defaults to <tt>1</tt>, if not specified."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["phone_number[phone_number]"],
                                "properties": {
                                    "phone_number[phone_number]": {
                                        "type": "string",
                                        "description": "The phone number itself. Minimum 7 digits, only numbers will be stored."
                                    },
                                    "phone_number[is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this phone number the care team member's primary contact number."
                                    },
                                    "phone_number[phone_type]": {
                                        "type": "string",
                                        "description": "Type of phone number.",
                                        "enum": ["mobile", "home", "work", "fax", "unknown"]
                                    },
                                    "phone_number[can_sms]": {
                                        "type": "boolean",
                                        "description": "Can this phone number receive SMS?"
                                    },
                                    "phone_number[country_code]": {
                                        "type": "string",
                                        "description": "Country code for the phone number. Defaults to <tt>1</tt>, if not specified."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/care-team/members/{member_id}/phone-numbers/{id}": {
            "put": {
                "tags": ["Care Team Members: Phone Numbers"],
                "summary": "Update an existing Care Team Member phone number.",
                "operationId": "put_v3_groups_group_id_contacts_contact_id_care-team_members_member_id_phone-numbers_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "member_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["phone_number[phone_number]"],
                                "properties": {
                                    "phone_number[phone_number]": {
                                        "type": "string",
                                        "description": "The phone number itself. Minimum 7 digits, only numbers will be stored."
                                    },
                                    "phone_number[is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this phone number the care team member's primary contact number."
                                    },
                                    "phone_number[phone_type]": {
                                        "type": "string",
                                        "description": "Type of phone number.",
                                        "enum": ["mobile", "home", "work", "fax", "unknown"]
                                    },
                                    "phone_number[can_sms]": {
                                        "type": "boolean",
                                        "description": "Can this phone number receive SMS?"
                                    },
                                    "phone_number[country_code]": {
                                        "type": "string",
                                        "description": "Country code for the phone number. Defaults to <tt>1</tt>, if not specified."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["phone_number[phone_number]"],
                                "properties": {
                                    "phone_number[phone_number]": {
                                        "type": "string",
                                        "description": "The phone number itself. Minimum 7 digits, only numbers will be stored."
                                    },
                                    "phone_number[is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this phone number the care team member's primary contact number."
                                    },
                                    "phone_number[phone_type]": {
                                        "type": "string",
                                        "description": "Type of phone number.",
                                        "enum": ["mobile", "home", "work", "fax", "unknown"]
                                    },
                                    "phone_number[can_sms]": {
                                        "type": "boolean",
                                        "description": "Can this phone number receive SMS?"
                                    },
                                    "phone_number[country_code]": {
                                        "type": "string",
                                        "description": "Country code for the phone number. Defaults to <tt>1</tt>, if not specified."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Care Team Members: Phone Numbers"],
                "summary": "Remove an existing Care Team Member phone number.",
                "operationId": "delete_v3_groups_group_id_contacts_contact_id_care-team_members_member_id_phone-numbers_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "member_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Care Team Members: Phone Numbers"],
                "summary": "Update an existing Care Team Member phone number.",
                "operationId": "patch_v3_groups_group_id_contacts_contact_id_care-team_members_member_id_phone-numbers_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "member_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["phone_number[phone_number]"],
                                "properties": {
                                    "phone_number[phone_number]": {
                                        "type": "string",
                                        "description": "The phone number itself. Minimum 7 digits, only numbers will be stored."
                                    },
                                    "phone_number[is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this phone number the care team member's primary contact number."
                                    },
                                    "phone_number[phone_type]": {
                                        "type": "string",
                                        "description": "Type of phone number.",
                                        "enum": ["mobile", "home", "work", "fax", "unknown"]
                                    },
                                    "phone_number[can_sms]": {
                                        "type": "boolean",
                                        "description": "Can this phone number receive SMS?"
                                    },
                                    "phone_number[country_code]": {
                                        "type": "string",
                                        "description": "Country code for the phone number. Defaults to <tt>1</tt>, if not specified."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["phone_number[phone_number]"],
                                "properties": {
                                    "phone_number[phone_number]": {
                                        "type": "string",
                                        "description": "The phone number itself. Minimum 7 digits, only numbers will be stored."
                                    },
                                    "phone_number[is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this phone number the care team member's primary contact number."
                                    },
                                    "phone_number[phone_type]": {
                                        "type": "string",
                                        "description": "Type of phone number.",
                                        "enum": ["mobile", "home", "work", "fax", "unknown"]
                                    },
                                    "phone_number[can_sms]": {
                                        "type": "boolean",
                                        "description": "Can this phone number receive SMS?"
                                    },
                                    "phone_number[country_code]": {
                                        "type": "string",
                                        "description": "Country code for the phone number. Defaults to <tt>1</tt>, if not specified."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/cases": {
            "get": {
                "tags": ["Cases"],
                "summary": "Return cases for the selected contact.",
                "operationId": "get_v3_groups_group_id_contacts_contact_id_cases",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "post": {
                "tags": ["Cases"],
                "summary": "Create a new case for the selected contact.",
                "operationId": "post_v3_groups_group_id_contacts_contact_id_cases",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["program[program_id]", "service_type_id"],
                                "properties": {
                                    "program[program_id]": {
                                        "type": "string",
                                        "description": "The identifier of the Program the contact and case is being enrolled in."
                                    },
                                    "service_type_id": {
                                        "type": "string",
                                        "description": "The identifier of the requested service type (need)."
                                    },
                                    "assistance_request_id": {
                                        "type": "string",
                                        "description": "The identifier of an assistance request submitted by the Contact. This will connect the originating assistance request to the case."
                                    },
                                    "service_case[description]": {
                                        "type": "string",
                                        "description": "The full-text details or description of the case."
                                    },
                                    "service_case[primary_worker_id]": {
                                        "type": "string",
                                        "description": "The user ID of the primary case worker."
                                    },
                                    "service_case[documents]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "service_case[out_of_network_providers]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "primary_data_source": {
                                        "type": "boolean",
                                        "description": "Boolean to disable performance optimization for retrieving service cases."
                                    },
                                    "network_id": {
                                        "type": "string",
                                        "description": "The identifier of the Network that is managing the case."
                                    },
                                    "program[entry_date]": {
                                        "type": "number",
                                        "description": "Timestamp representing the enrollment date."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["program[program_id]", "service_type_id"],
                                "properties": {
                                    "program[program_id]": {
                                        "type": "string",
                                        "description": "The identifier of the Program the contact and case is being enrolled in."
                                    },
                                    "service_type_id": {
                                        "type": "string",
                                        "description": "The identifier of the requested service type (need)."
                                    },
                                    "assistance_request_id": {
                                        "type": "string",
                                        "description": "The identifier of an assistance request submitted by the Contact. This will connect the originating assistance request to the case."
                                    },
                                    "service_case[description]": {
                                        "type": "string",
                                        "description": "The full-text details or description of the case."
                                    },
                                    "service_case[primary_worker_id]": {
                                        "type": "string",
                                        "description": "The user ID of the primary case worker."
                                    },
                                    "service_case[documents]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "service_case[out_of_network_providers]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "primary_data_source": {
                                        "type": "boolean",
                                        "description": "Boolean to disable performance optimization for retrieving service cases."
                                    },
                                    "network_id": {
                                        "type": "string",
                                        "description": "The identifier of the Network that is managing the case."
                                    },
                                    "program[entry_date]": {
                                        "type": "number",
                                        "description": "Timestamp representing the enrollment date."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/cases/{id}": {
            "get": {
                "tags": ["Cases"],
                "summary": "Return details for the selected case.",
                "operationId": "get_v3_groups_group_id_contacts_contact_id_cases_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": ["Cases"],
                "summary": "Update a case for the selected contact.",
                "operationId": "put_v3_groups_group_id_contacts_contact_id_cases_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "assistance_request_id": {
                                        "type": "string",
                                        "description": "The identifier of an assistance request submitted by the Contact. This will connect the originating assistance request to the case."
                                    },
                                    "service_type_id": {
                                        "type": "string",
                                        "description": "The identifier of the requested service type (need)."
                                    },
                                    "service_case[description]": {
                                        "type": "string",
                                        "description": "The full-text details or description of the case."
                                    },
                                    "service_case[primary_worker_id]": {
                                        "type": "string",
                                        "description": "The user ID of the primary case worker."
                                    },
                                    "service_case[documents]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "service_case[out_of_network_providers]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "primary_data_source": {
                                        "type": "boolean",
                                        "description": "Boolean to disable performance optimization for retrieving service cases."
                                    },
                                    "network_id": {
                                        "type": "string",
                                        "description": "The identifier of the Network that is managing the case."
                                    },
                                    "program[program_id]": {
                                        "type": "string",
                                        "description": "The identifier of the Program the contact and case is being enrolled in."
                                    },
                                    "program[entry_date]": {
                                        "type": "number",
                                        "description": "Timestamp representing the enrollment date."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "assistance_request_id": {
                                        "type": "string",
                                        "description": "The identifier of an assistance request submitted by the Contact. This will connect the originating assistance request to the case."
                                    },
                                    "service_type_id": {
                                        "type": "string",
                                        "description": "The identifier of the requested service type (need)."
                                    },
                                    "service_case[description]": {
                                        "type": "string",
                                        "description": "The full-text details or description of the case."
                                    },
                                    "service_case[primary_worker_id]": {
                                        "type": "string",
                                        "description": "The user ID of the primary case worker."
                                    },
                                    "service_case[documents]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "service_case[out_of_network_providers]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "primary_data_source": {
                                        "type": "boolean",
                                        "description": "Boolean to disable performance optimization for retrieving service cases."
                                    },
                                    "network_id": {
                                        "type": "string",
                                        "description": "The identifier of the Network that is managing the case."
                                    },
                                    "program[program_id]": {
                                        "type": "string",
                                        "description": "The identifier of the Program the contact and case is being enrolled in."
                                    },
                                    "program[entry_date]": {
                                        "type": "number",
                                        "description": "Timestamp representing the enrollment date."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Cases"],
                "summary": "Update a case for the selected contact.",
                "operationId": "patch_v3_groups_group_id_contacts_contact_id_cases_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "assistance_request_id": {
                                        "type": "string",
                                        "description": "The identifier of an assistance request submitted by the Contact. This will connect the originating assistance request to the case."
                                    },
                                    "service_type_id": {
                                        "type": "string",
                                        "description": "The identifier of the requested service type (need)."
                                    },
                                    "service_case[description]": {
                                        "type": "string",
                                        "description": "The full-text details or description of the case."
                                    },
                                    "service_case[primary_worker_id]": {
                                        "type": "string",
                                        "description": "The user ID of the primary case worker."
                                    },
                                    "service_case[documents]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "service_case[out_of_network_providers]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "primary_data_source": {
                                        "type": "boolean",
                                        "description": "Boolean to disable performance optimization for retrieving service cases."
                                    },
                                    "network_id": {
                                        "type": "string",
                                        "description": "The identifier of the Network that is managing the case."
                                    },
                                    "program[program_id]": {
                                        "type": "string",
                                        "description": "The identifier of the Program the contact and case is being enrolled in."
                                    },
                                    "program[entry_date]": {
                                        "type": "number",
                                        "description": "Timestamp representing the enrollment date."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "assistance_request_id": {
                                        "type": "string",
                                        "description": "The identifier of an assistance request submitted by the Contact. This will connect the originating assistance request to the case."
                                    },
                                    "service_type_id": {
                                        "type": "string",
                                        "description": "The identifier of the requested service type (need)."
                                    },
                                    "service_case[description]": {
                                        "type": "string",
                                        "description": "The full-text details or description of the case."
                                    },
                                    "service_case[primary_worker_id]": {
                                        "type": "string",
                                        "description": "The user ID of the primary case worker."
                                    },
                                    "service_case[documents]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "service_case[out_of_network_providers]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "primary_data_source": {
                                        "type": "boolean",
                                        "description": "Boolean to disable performance optimization for retrieving service cases."
                                    },
                                    "network_id": {
                                        "type": "string",
                                        "description": "The identifier of the Network that is managing the case."
                                    },
                                    "program[program_id]": {
                                        "type": "string",
                                        "description": "The identifier of the Program the contact and case is being enrolled in."
                                    },
                                    "program[entry_date]": {
                                        "type": "number",
                                        "description": "Timestamp representing the enrollment date."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/cases/{service_case_id}/activity-stream/events": {
            "get": {
                "tags": ["Groups::Contacts::Cases: Timeline Events"],
                "summary": "Returns a list of events for the selected Contact.",
                "description": "\n<p>Activity Stream or Timeline events are returned loosely based on the\nActivity Stream specification (<a\nhref=\"http://activitystrea.ms\">activitystrea.ms</a>).</p>\n\n<p>Available <code>verb</code> values include: <code>accept</code>,\n<code>add</code>, <code>assign</code>, <code>close</code>,\n<code>complete</code>, <code>create</code>, <code>delete</code>,\n<code>deny</code>, <code>join</code>, <code>leave</code>,\n<code>open</code>, <code>post</code>, <code>replace</code>,\n<code>retract</code>, <code>save</code>, <code>send</code>, and\n<code>update</code>.</p>\n\n<p>Use the verb, object, and target values to determine the event that\noccurred.</p>\n",
                "operationId": "get_v3_groups_group_id_contacts_contact_id_cases_service_case_id_activity-stream_events",
                "parameters": [{
                    "name": "service_case_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/cases/{service_case_id}/activity-stream/events/filter": {
            "post": {
                "tags": ["Groups::Contacts::Cases: Filter Timeline Events"],
                "summary": "Returns a list of filtered events.",
                "description": "\n<p>Filtered activity stream or timeline events are returned loosely based on\nthe Activity Stream specification (<a\nhref=\"http://activitystrea.ms\">activitystrea.ms</a>).</p>\n\n<p>Available <code>verb</code> values include: <code>accept</code>,\n<code>add</code>, <code>assign</code>, <code>close</code>,\n<code>complete</code>, <code>create</code>, <code>delete</code>,\n<code>deny</code>, <code>join</code>, <code>leave</code>,\n<code>open</code>, <code>post</code>, <code>replace</code>,\n<code>retract</code>, <code>save</code>, <code>send</code>, and\n<code>update</code>.</p>\n\n<p>Use the verb, object, and target values to determine the event that\noccurred.</p>\n",
                "operationId": "post_v3_groups_group_id_contacts_contact_id_cases_service_case_id_activity-stream_events_filter",
                "parameters": [{
                    "name": "service_case_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "q[filter_names]": {
                                        "type": "string",
                                        "description": "Name of filter to be appliied",
                                        "enum": ["client_updates", "closed_records", "notes", "record_updates", "network_updates", "care_team"]
                                    },
                                    "page": {
                                        "type": "number",
                                        "description": "The page of results to be returned."
                                    },
                                    "per": {
                                        "type": "number",
                                        "description": "The number of records to be returned per page."
                                    },
                                    "sord": {
                                        "type": "string",
                                        "description": "The order to sort the results.",
                                        "enum": ["asc", "desc"]
                                    },
                                    "sidx": {
                                        "type": "string",
                                        "description": "The attribute to sort the results by."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "q[filter_names]": {
                                        "type": "string",
                                        "description": "Name of filter to be appliied",
                                        "enum": ["client_updates", "closed_records", "notes", "record_updates", "network_updates", "care_team"]
                                    },
                                    "page": {
                                        "type": "number",
                                        "description": "The page of results to be returned."
                                    },
                                    "per": {
                                        "type": "number",
                                        "description": "The number of records to be returned per page."
                                    },
                                    "sord": {
                                        "type": "string",
                                        "description": "The order to sort the results.",
                                        "enum": ["asc", "desc"]
                                    },
                                    "sidx": {
                                        "type": "string",
                                        "description": "The attribute to sort the results by."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/cases/{service_case_id}/case-workers/primary": {
            "get": {
                "tags": ["Cases: Primary Case Worker"],
                "summary": "Show the primary case worker for the selected case.",
                "operationId": "get_v3_groups_group_id_contacts_contact_id_cases_service_case_id_case-workers_primary",
                "parameters": [{
                    "name": "service_case_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": ["Cases: Primary Case Worker"],
                "summary": "Update the primary case worker for the selected case.",
                "operationId": "put_v3_groups_group_id_contacts_contact_id_cases_service_case_id_case-workers_primary",
                "parameters": [{
                    "name": "service_case_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["user_id"],
                                "properties": {
                                    "user_id": {
                                        "type": "string",
                                        "description": "The ID of the user to be set as the primary case worker."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["user_id"],
                                "properties": {
                                    "user_id": {
                                        "type": "string",
                                        "description": "The ID of the user to be set as the primary case worker."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Cases: Primary Case Worker"],
                "summary": "Update the primary case worker for the selected case.",
                "operationId": "patch_v3_groups_group_id_contacts_contact_id_cases_service_case_id_case-workers_primary",
                "parameters": [{
                    "name": "service_case_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["user_id"],
                                "properties": {
                                    "user_id": {
                                        "type": "string",
                                        "description": "The ID of the user to be set as the primary case worker."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["user_id"],
                                "properties": {
                                    "user_id": {
                                        "type": "string",
                                        "description": "The ID of the user to be set as the primary case worker."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/cases/{service_case_id}/close": {
            "put": {
                "tags": ["Apiv3groupscontactscasesservice casesclosings"],
                "summary": "Set the selected case to closed and create a closing node",
                "operationId": "put_v3_groups_group_id_contacts_contact_id_cases_service_case_id_close",
                "parameters": [{
                    "name": "service_case_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["outcome_id", "status"],
                                "properties": {
                                    "outcome_id": {
                                        "type": "string",
                                        "description": "The id of the outcome this closing is associated with"
                                    },
                                    "status": {
                                        "type": "string",
                                        "description": "The status of the case; either `resolved` or `unresolved`.",
                                        "enum": ["resolved", "unresolved"]
                                    },
                                    "note": {
                                        "type": "string",
                                        "description": "A note pertaining to the closing"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["outcome_id", "status"],
                                "properties": {
                                    "outcome_id": {
                                        "type": "string",
                                        "description": "The id of the outcome this closing is associated with"
                                    },
                                    "status": {
                                        "type": "string",
                                        "description": "The status of the case; either `resolved` or `unresolved`.",
                                        "enum": ["resolved", "unresolved"]
                                    },
                                    "note": {
                                        "type": "string",
                                        "description": "A note pertaining to the closing"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Apiv3groupscontactscasesservice casesclosings"],
                "summary": "Set the selected case to closed and create a closing node",
                "operationId": "patch_v3_groups_group_id_contacts_contact_id_cases_service_case_id_close",
                "parameters": [{
                    "name": "service_case_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["outcome_id", "status"],
                                "properties": {
                                    "outcome_id": {
                                        "type": "string",
                                        "description": "The id of the outcome this closing is associated with"
                                    },
                                    "status": {
                                        "type": "string",
                                        "description": "The status of the case; either `resolved` or `unresolved`.",
                                        "enum": ["resolved", "unresolved"]
                                    },
                                    "note": {
                                        "type": "string",
                                        "description": "A note pertaining to the closing"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["outcome_id", "status"],
                                "properties": {
                                    "outcome_id": {
                                        "type": "string",
                                        "description": "The id of the outcome this closing is associated with"
                                    },
                                    "status": {
                                        "type": "string",
                                        "description": "The status of the case; either `resolved` or `unresolved`.",
                                        "enum": ["resolved", "unresolved"]
                                    },
                                    "note": {
                                        "type": "string",
                                        "description": "A note pertaining to the closing"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/cases/{service_case_id}/documents": {
            "get": {
                "tags": ["Cases: Documents"],
                "summary": "Displays a list of all the documents attached.",
                "operationId": "get_v3_groups_group_id_contacts_contact_id_cases_service_case_id_documents",
                "parameters": [{
                    "name": "service_case_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/cases/{service_case_id}/documents/{id}": {
            "get": {
                "tags": ["Cases: Documents"],
                "summary": "Displays a single document.",
                "operationId": "get_v3_groups_group_id_contacts_contact_id_cases_service_case_id_documents_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "service_case_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": ["Cases: Documents"],
                "summary": "Updates a document.",
                "operationId": "put_v3_groups_group_id_contacts_contact_id_cases_service_case_id_documents_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "service_case_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["document[title]"],
                                "properties": {
                                    "document[title]": {
                                        "type": "string",
                                        "description": "The name associated with the document"
                                    },
                                    "attach_to_id": {
                                        "type": "string",
                                        "description": "The ID of the object to change the document attachment to."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["document[title]"],
                                "properties": {
                                    "document[title]": {
                                        "type": "string",
                                        "description": "The name associated with the document"
                                    },
                                    "attach_to_id": {
                                        "type": "string",
                                        "description": "The ID of the object to change the document attachment to."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Cases: Documents"],
                "summary": "Deletes an attached document.",
                "operationId": "delete_v3_groups_group_id_contacts_contact_id_cases_service_case_id_documents_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "service_case_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Cases: Documents"],
                "summary": "Updates a document.",
                "operationId": "patch_v3_groups_group_id_contacts_contact_id_cases_service_case_id_documents_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "service_case_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["document[title]"],
                                "properties": {
                                    "document[title]": {
                                        "type": "string",
                                        "description": "The name associated with the document"
                                    },
                                    "attach_to_id": {
                                        "type": "string",
                                        "description": "The ID of the object to change the document attachment to."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["document[title]"],
                                "properties": {
                                    "document[title]": {
                                        "type": "string",
                                        "description": "The name associated with the document"
                                    },
                                    "attach_to_id": {
                                        "type": "string",
                                        "description": "The ID of the object to change the document attachment to."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/cases/{service_case_id}/enrollment": {
            "put": {
                "tags": ["Group Cases: Enrollment"],
                "summary": "Updates the case program enrollment",
                "operationId": "put_v3_groups_group_id_contacts_contact_id_cases_service_case_id_enrollment",
                "parameters": [{
                    "name": "service_case_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "enrollment[referred_to]": {
                                        "type": "string",
                                        "description": "Freeform text for information about where the client was referred"
                                    },
                                    "enrollment[enrolled_at]": {
                                        "type": "number",
                                        "description": "Timestamp representing the enrollment date."
                                    },
                                    "enrollment[exited_at]": {
                                        "type": "number",
                                        "description": "Timestamp representing the exit date."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "enrollment[referred_to]": {
                                        "type": "string",
                                        "description": "Freeform text for information about where the client was referred"
                                    },
                                    "enrollment[enrolled_at]": {
                                        "type": "number",
                                        "description": "Timestamp representing the enrollment date."
                                    },
                                    "enrollment[exited_at]": {
                                        "type": "number",
                                        "description": "Timestamp representing the exit date."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Group Cases: Enrollment"],
                "summary": "Updates the case program enrollment",
                "operationId": "patch_v3_groups_group_id_contacts_contact_id_cases_service_case_id_enrollment",
                "parameters": [{
                    "name": "service_case_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "enrollment[referred_to]": {
                                        "type": "string",
                                        "description": "Freeform text for information about where the client was referred"
                                    },
                                    "enrollment[enrolled_at]": {
                                        "type": "number",
                                        "description": "Timestamp representing the enrollment date."
                                    },
                                    "enrollment[exited_at]": {
                                        "type": "number",
                                        "description": "Timestamp representing the exit date."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "enrollment[referred_to]": {
                                        "type": "string",
                                        "description": "Freeform text for information about where the client was referred"
                                    },
                                    "enrollment[enrolled_at]": {
                                        "type": "number",
                                        "description": "Timestamp representing the enrollment date."
                                    },
                                    "enrollment[exited_at]": {
                                        "type": "number",
                                        "description": "Timestamp representing the exit date."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/cases/{service_case_id}/forms": {
            "get": {
                "tags": ["Cases: Assessments/Forms"],
                "summary": "Returns forms that have been completed (at least one response) for the specified case (uses service type).",
                "operationId": "get_v3_groups_group_id_contacts_contact_id_cases_service_case_id_forms",
                "parameters": [{
                    "name": "service_case_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/consents/documents": {
            "post": {
                "tags": ["Contacts: Consents - Create and accept a document consent request"],
                "summary": "Create and Accepts a new document consent request for the selected contact.",
                "operationId": "post_v3_groups_group_id_contacts_contact_id_consents_documents",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "consents[documents]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "consents[documents]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/consents/emails": {
            "post": {
                "tags": ["Contacts: Consents - Create an email consent request"],
                "summary": "Create new email consent request for the selected contact.",
                "operationId": "post_v3_groups_group_id_contacts_contact_id_consents_emails",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["consents[email_address]"],
                                "properties": {
                                    "consents[email_address]": {
                                        "type": "string",
                                        "description": "Email you would like to deliver the consent request to."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["consents[email_address]"],
                                "properties": {
                                    "consents[email_address]": {
                                        "type": "string",
                                        "description": "Email you would like to deliver the consent request to."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/consents/immediate/accept": {
            "post": {
                "tags": ["Area to Accept Consent Requests that are created via Attestation"],
                "summary": "Accepts consent and stores captured signature",
                "operationId": "post_v3_groups_group_id_contacts_contact_id_consents_immediate_accept",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "consent[signature_image]": {
                                        "type": "string",
                                        "description": "Base64 of the signature image"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "consent[signature_image]": {
                                        "type": "string",
                                        "description": "Base64 of the signature image"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/consents/immediate/reject": {
            "post": {
                "tags": ["Area to Reject Consent Requests that are created via Attestation"],
                "summary": "Rejects consent request that is found",
                "operationId": "post_v3_groups_group_id_contacts_contact_id_consents_immediate_reject",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/consents/revoke-consent": {
            "post": {
                "tags": ["Controller for Revoking Consent for a Client"],
                "summary": "Updates consent request status for a user",
                "operationId": "post_v3_groups_group_id_contacts_contact_id_consents_revoke-consent",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/consents/sms": {
            "post": {
                "tags": ["Contacts: Consents - Create an sms consent request"],
                "summary": "Create new sms consent request for the selected contact.",
                "operationId": "post_v3_groups_group_id_contacts_contact_id_consents_sms",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["consents[phone_number]"],
                                "properties": {
                                    "consents[phone_number]": {
                                        "type": "string",
                                        "description": "Phone number to deliver the consent request to."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["consents[phone_number]"],
                                "properties": {
                                    "consents[phone_number]": {
                                        "type": "string",
                                        "description": "Phone number to deliver the consent request to."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/consents/web": {
            "post": {
                "tags": ["Contacts: Consents - Create consent request URL"],
                "summary": "Create new consent request URL for the selected contact.",
                "operationId": "post_v3_groups_group_id_contacts_contact_id_consents_web",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/documents": {
            "get": {
                "tags": ["Contacts: Documents"],
                "summary": "Displays a list of all the documents attached.",
                "operationId": "get_v3_groups_group_id_contacts_contact_id_documents",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/documents/assign": {
            "post": {
                "tags": ["Documents"],
                "summary": "Assign existing documents to provided resources",
                "operationId": "post_v3_groups_group_id_contacts_contact_id_documents_assign",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "options[attach_to_contact]": {
                                        "type": "boolean",
                                        "description": "A boolean specifying whether to attach documents to the contact"
                                    },
                                    "options[resource_ids]": {
                                        "type": "array",
                                        "description": "An array of ids for cases, referrals, intakes for a contact",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "document_ids": {
                                        "type": "array",
                                        "description": "The ids of existing documents",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "options[attach_to_contact]": {
                                        "type": "boolean",
                                        "description": "A boolean specifying whether to attach documents to the contact"
                                    },
                                    "options[resource_ids]": {
                                        "type": "array",
                                        "description": "An array of ids for cases, referrals, intakes for a contact",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "document_ids": {
                                        "type": "array",
                                        "description": "The ids of existing documents",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/documents/remove": {
            "post": {
                "tags": ["Document Deletion"],
                "summary": "Create new documents for provided resources",
                "operationId": "post_v3_groups_group_id_contacts_contact_id_documents_remove",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["document_id", "resource_ids"],
                                "properties": {
                                    "resource_ids": {
                                        "type": "array",
                                        "description": "The ids of the resources from which the document will be removed",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "document_id": {
                                        "type": "string",
                                        "description": "The id of the document to remove"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["document_id", "resource_ids"],
                                "properties": {
                                    "resource_ids": {
                                        "type": "array",
                                        "description": "The ids of the resources from which the document will be removed",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "document_id": {
                                        "type": "string",
                                        "description": "The id of the document to remove"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/documents/{id}": {
            "get": {
                "tags": ["Contacts: Documents"],
                "summary": "Displays a single document.",
                "operationId": "get_v3_groups_group_id_contacts_contact_id_documents_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": ["Contacts: Documents"],
                "summary": "Updates a document.",
                "operationId": "put_v3_groups_group_id_contacts_contact_id_documents_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["document[title]"],
                                "properties": {
                                    "document[title]": {
                                        "type": "string",
                                        "description": "The name associated with the document"
                                    },
                                    "attach_to_id": {
                                        "type": "string",
                                        "description": "The ID of the object to change the document attachment to."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["document[title]"],
                                "properties": {
                                    "document[title]": {
                                        "type": "string",
                                        "description": "The name associated with the document"
                                    },
                                    "attach_to_id": {
                                        "type": "string",
                                        "description": "The ID of the object to change the document attachment to."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Contacts: Documents"],
                "summary": "Deletes an attached document.",
                "operationId": "delete_v3_groups_group_id_contacts_contact_id_documents_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Contacts: Documents"],
                "summary": "Updates a document.",
                "operationId": "patch_v3_groups_group_id_contacts_contact_id_documents_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["document[title]"],
                                "properties": {
                                    "document[title]": {
                                        "type": "string",
                                        "description": "The name associated with the document"
                                    },
                                    "attach_to_id": {
                                        "type": "string",
                                        "description": "The ID of the object to change the document attachment to."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["document[title]"],
                                "properties": {
                                    "document[title]": {
                                        "type": "string",
                                        "description": "The name associated with the document"
                                    },
                                    "attach_to_id": {
                                        "type": "string",
                                        "description": "The ID of the object to change the document attachment to."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/email-addresses": {
            "post": {
                "tags": ["Contacts: Email Addresses"],
                "summary": "Add a new email address to the selected Contact.",
                "operationId": "post_v3_groups_group_id_contacts_contact_id_email-addresses",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["email_address[email_address]"],
                                "properties": {
                                    "email_address[email_address]": {
                                        "type": "string",
                                        "description": "A valid email address"
                                    },
                                    "email_address[is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this email address the primary one for the contact."
                                    },
                                    "email_address[acceptable_communication_types]": {
                                        "type": "string",
                                        "description": "Acceptable methods by which to contact the user at this email",
                                        "enum": ["message", "notification"]
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["email_address[email_address]"],
                                "properties": {
                                    "email_address[email_address]": {
                                        "type": "string",
                                        "description": "A valid email address"
                                    },
                                    "email_address[is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this email address the primary one for the contact."
                                    },
                                    "email_address[acceptable_communication_types]": {
                                        "type": "string",
                                        "description": "Acceptable methods by which to contact the user at this email",
                                        "enum": ["message", "notification"]
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/email-addresses/{id}": {
            "put": {
                "tags": ["Contacts: Email Addresses"],
                "summary": "Update an existing Contact email address.",
                "operationId": "put_v3_groups_group_id_contacts_contact_id_email-addresses_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["email_address[email_address]"],
                                "properties": {
                                    "email_address[email_address]": {
                                        "type": "string",
                                        "description": "A valid email address"
                                    },
                                    "email_address[is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this email address the primary one for the contact."
                                    },
                                    "email_address[acceptable_communication_types]": {
                                        "type": "string",
                                        "description": "Acceptable methods by which to contact the user at this email",
                                        "enum": ["message", "notification"]
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["email_address[email_address]"],
                                "properties": {
                                    "email_address[email_address]": {
                                        "type": "string",
                                        "description": "A valid email address"
                                    },
                                    "email_address[is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this email address the primary one for the contact."
                                    },
                                    "email_address[acceptable_communication_types]": {
                                        "type": "string",
                                        "description": "Acceptable methods by which to contact the user at this email",
                                        "enum": ["message", "notification"]
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Contacts: Email Addresses"],
                "summary": "Remove an existing Contact email address.",
                "operationId": "delete_v3_groups_group_id_contacts_contact_id_email-addresses_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Contacts: Email Addresses"],
                "summary": "Update an existing Contact email address.",
                "operationId": "patch_v3_groups_group_id_contacts_contact_id_email-addresses_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["email_address[email_address]"],
                                "properties": {
                                    "email_address[email_address]": {
                                        "type": "string",
                                        "description": "A valid email address"
                                    },
                                    "email_address[is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this email address the primary one for the contact."
                                    },
                                    "email_address[acceptable_communication_types]": {
                                        "type": "string",
                                        "description": "Acceptable methods by which to contact the user at this email",
                                        "enum": ["message", "notification"]
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["email_address[email_address]"],
                                "properties": {
                                    "email_address[email_address]": {
                                        "type": "string",
                                        "description": "A valid email address"
                                    },
                                    "email_address[is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this email address the primary one for the contact."
                                    },
                                    "email_address[acceptable_communication_types]": {
                                        "type": "string",
                                        "description": "Acceptable methods by which to contact the user at this email",
                                        "enum": ["message", "notification"]
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/forms": {
            "get": {
                "tags": ["Contacts: Forms"],
                "summary": "Returns forms available to the selected contact.",
                "operationId": "get_v3_groups_group_id_contacts_contact_id_forms",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/forms/{form_id}/response": {
            "put": {
                "tags": ["Contacts: Respond to Form"],
                "summary": "Upserts a contact's response to the specified form/assessment.",
                "operationId": "put_v3_groups_group_id_contacts_contact_id_forms_form_id_response",
                "parameters": [{
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Contacts: Respond to Form"],
                "summary": "Upserts a contact's response to the specified form/assessment.",
                "operationId": "patch_v3_groups_group_id_contacts_contact_id_forms_form_id_response",
                "parameters": [{
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/forms/{form_id}/screenings": {
            "get": {
                "tags": ["Screenings: Respond to Screening"],
                "summary": "Displays an index of screenings",
                "operationId": "get_v3_groups_group_id_contacts_contact_id_forms_form_id_screenings",
                "parameters": [{
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "post": {
                "tags": ["Screenings: Respond to Screening"],
                "summary": "Creates a new screening",
                "operationId": "post_v3_groups_group_id_contacts_contact_id_forms_form_id_screenings",
                "parameters": [{
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/forms/{form_id}/screenings/{id}": {
            "put": {
                "tags": ["Screenings: Respond to Screening"],
                "summary": "Upserts a contact's response to the specified screening",
                "operationId": "put_v3_groups_group_id_contacts_contact_id_forms_form_id_screenings_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Screenings: Respond to Screening"],
                "summary": "Upserts a contact's response to the specified screening",
                "operationId": "patch_v3_groups_group_id_contacts_contact_id_forms_form_id_screenings_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/forms/{id}": {
            "get": {
                "tags": ["Contacts: Forms"],
                "summary": "Returns form details with any existing responses spliced into the question.",
                "operationId": "get_v3_groups_group_id_contacts_contact_id_forms_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/households/members": {
            "get": {
                "tags": ["Groups::Contacts::Households::Members"],
                "summary": "Returns a list of household members for the select contact",
                "operationId": "get_v3_groups_group_id_contacts_contact_id_households_members",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "post": {
                "tags": ["Groups::Contacts::Households::Members"],
                "summary": "Creates a new household member for a contact. If the new member is not marked as the head_of_household, the parent contact will become the head_of_household",
                "operationId": "post_v3_groups_group_id_contacts_contact_id_households_members",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["household_member[first_name]", "household_member[last_name]"],
                                "properties": {
                                    "household_member[last_name]": {
                                        "type": "string",
                                        "description": "Household Member's last name."
                                    },
                                    "household_member[first_name]": {
                                        "type": "string",
                                        "description": "Household Member's first name."
                                    },
                                    "household_member[gender]": {
                                        "type": "string",
                                        "description": "Household Member's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "household_member[title]": {
                                        "type": "string",
                                        "description": "Household Member's title.",
                                        "enum": ["Mr.", "Miss", "Mrs.", "Ms.", "Dr."]
                                    },
                                    "household_member[suffix]": {
                                        "type": "string",
                                        "description": "Household Member's suffix.",
                                        "enum": ["Jr.", "Sr.", "III", "IV", "V", "Esq.", "Ph.D"]
                                    },
                                    "household_member[relation_to_primary]": {
                                        "type": "string",
                                        "description": "Household Member's relationship to the Contact",
                                        "enum": ["self", "child", "spouse", "parent", "partner", "other-relation", "non-relation"]
                                    },
                                    "household_member[date_of_birth]": {
                                        "type": "number",
                                        "description": "Unix (epoch) timestamp representing the contact's date of birth."
                                    },
                                    "household_member[head_of_household]": {
                                        "type": "boolean",
                                        "description": "Is the household member the head of the household?"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["household_member[first_name]", "household_member[last_name]"],
                                "properties": {
                                    "household_member[last_name]": {
                                        "type": "string",
                                        "description": "Household Member's last name."
                                    },
                                    "household_member[first_name]": {
                                        "type": "string",
                                        "description": "Household Member's first name."
                                    },
                                    "household_member[gender]": {
                                        "type": "string",
                                        "description": "Household Member's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "household_member[title]": {
                                        "type": "string",
                                        "description": "Household Member's title.",
                                        "enum": ["Mr.", "Miss", "Mrs.", "Ms.", "Dr."]
                                    },
                                    "household_member[suffix]": {
                                        "type": "string",
                                        "description": "Household Member's suffix.",
                                        "enum": ["Jr.", "Sr.", "III", "IV", "V", "Esq.", "Ph.D"]
                                    },
                                    "household_member[relation_to_primary]": {
                                        "type": "string",
                                        "description": "Household Member's relationship to the Contact",
                                        "enum": ["self", "child", "spouse", "parent", "partner", "other-relation", "non-relation"]
                                    },
                                    "household_member[date_of_birth]": {
                                        "type": "number",
                                        "description": "Unix (epoch) timestamp representing the contact's date of birth."
                                    },
                                    "household_member[head_of_household]": {
                                        "type": "boolean",
                                        "description": "Is the household member the head of the household?"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/households/members-counts": {
            "get": {
                "tags": ["Groups::Contacts::Households::MembersCounts"],
                "summary": "Get the household count",
                "operationId": "get_v3_groups_group_id_contacts_contact_id_households_members-counts",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": ["Groups::Contacts::Households::MembersCounts"],
                "summary": "Update a household count",
                "operationId": "put_v3_groups_group_id_contacts_contact_id_households_members-counts",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "total": {
                                        "type": "number",
                                        "description": "Total number of members in the Household"
                                    },
                                    "children": {
                                        "type": "number",
                                        "description": "Number of children in the Household"
                                    },
                                    "adults": {
                                        "type": "number",
                                        "description": "Number of adults in the Household"
                                    },
                                    "should_enable": {
                                        "type": "boolean",
                                        "description": "Should the `static_count` be enabled?"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "total": {
                                        "type": "number",
                                        "description": "Total number of members in the Household"
                                    },
                                    "children": {
                                        "type": "number",
                                        "description": "Number of children in the Household"
                                    },
                                    "adults": {
                                        "type": "number",
                                        "description": "Number of adults in the Household"
                                    },
                                    "should_enable": {
                                        "type": "boolean",
                                        "description": "Should the `static_count` be enabled?"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Groups::Contacts::Households::MembersCounts"],
                "summary": "Update a household count",
                "operationId": "patch_v3_groups_group_id_contacts_contact_id_households_members-counts",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "total": {
                                        "type": "number",
                                        "description": "Total number of members in the Household"
                                    },
                                    "children": {
                                        "type": "number",
                                        "description": "Number of children in the Household"
                                    },
                                    "adults": {
                                        "type": "number",
                                        "description": "Number of adults in the Household"
                                    },
                                    "should_enable": {
                                        "type": "boolean",
                                        "description": "Should the `static_count` be enabled?"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "total": {
                                        "type": "number",
                                        "description": "Total number of members in the Household"
                                    },
                                    "children": {
                                        "type": "number",
                                        "description": "Number of children in the Household"
                                    },
                                    "adults": {
                                        "type": "number",
                                        "description": "Number of adults in the Household"
                                    },
                                    "should_enable": {
                                        "type": "boolean",
                                        "description": "Should the `static_count` be enabled?"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/households/members-counts/disable": {
            "put": {
                "tags": ["Groups::Contacts::Households::MembersCounts::Disable"],
                "summary": "Sets Household count to come dynamically from the number of related Members",
                "operationId": "put_v3_groups_group_id_contacts_contact_id_households_members-counts_disable",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Groups::Contacts::Households::MembersCounts::Disable"],
                "summary": "Sets Household count to come dynamically from the number of related Members",
                "operationId": "patch_v3_groups_group_id_contacts_contact_id_households_members-counts_disable",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/households/members-counts/dynamic-count": {
            "put": {
                "tags": ["Groups::Contacts::Households::MembersCounts::Disable"],
                "summary": "Sets Household count to come dynamically from the number of related Members",
                "operationId": "put_v3_groups_group_id_contacts_contact_id_households_members-counts_dynamic-count",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Groups::Contacts::Households::MembersCounts::Disable"],
                "summary": "Sets Household count to come dynamically from the number of related Members",
                "operationId": "patch_v3_groups_group_id_contacts_contact_id_households_members-counts_dynamic-count",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/households/members-counts/enable": {
            "put": {
                "tags": ["Groups::Contacts::Households::MembersCounts::Enable"],
                "summary": "Sets Household Count to come from static Households::MembersCount node",
                "operationId": "put_v3_groups_group_id_contacts_contact_id_households_members-counts_enable",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Groups::Contacts::Households::MembersCounts::Enable"],
                "summary": "Sets Household Count to come from static Households::MembersCount node",
                "operationId": "patch_v3_groups_group_id_contacts_contact_id_households_members-counts_enable",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/households/members-counts/static-count": {
            "put": {
                "tags": ["Groups::Contacts::Households::MembersCounts::Enable"],
                "summary": "Sets Household Count to come from static Households::MembersCount node",
                "operationId": "put_v3_groups_group_id_contacts_contact_id_households_members-counts_static-count",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Groups::Contacts::Households::MembersCounts::Enable"],
                "summary": "Sets Household Count to come from static Households::MembersCount node",
                "operationId": "patch_v3_groups_group_id_contacts_contact_id_households_members-counts_static-count",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/households/members/{id}": {
            "put": {
                "tags": ["Groups::Contacts::Households::Members"],
                "summary": "Update a household member.",
                "operationId": "put_v3_groups_group_id_contacts_contact_id_households_members_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "household_member[first_name]": {
                                        "type": "string",
                                        "description": "Household Member's first name."
                                    },
                                    "household_member[last_name]": {
                                        "type": "string",
                                        "description": "Household Member's last name."
                                    },
                                    "household_member[gender]": {
                                        "type": "string",
                                        "description": "Household Member's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "household_member[title]": {
                                        "type": "string",
                                        "description": "Household Member's title.",
                                        "enum": ["Mr.", "Miss", "Mrs.", "Ms.", "Dr."]
                                    },
                                    "household_member[suffix]": {
                                        "type": "string",
                                        "description": "Household Member's suffix.",
                                        "enum": ["Jr.", "Sr.", "III", "IV", "V", "Esq.", "Ph.D"]
                                    },
                                    "household_member[relation_to_primary]": {
                                        "type": "string",
                                        "description": "Household Member's relationship to the Contact",
                                        "enum": ["self", "child", "spouse", "parent", "partner", "other-relation", "non-relation"]
                                    },
                                    "household_member[date_of_birth]": {
                                        "type": "number",
                                        "description": "Unix (epoch) timestamp representing the contact's date of birth."
                                    },
                                    "household_member[head_of_household]": {
                                        "type": "boolean",
                                        "description": "Is the household member the head of the household?"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "household_member[first_name]": {
                                        "type": "string",
                                        "description": "Household Member's first name."
                                    },
                                    "household_member[last_name]": {
                                        "type": "string",
                                        "description": "Household Member's last name."
                                    },
                                    "household_member[gender]": {
                                        "type": "string",
                                        "description": "Household Member's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "household_member[title]": {
                                        "type": "string",
                                        "description": "Household Member's title.",
                                        "enum": ["Mr.", "Miss", "Mrs.", "Ms.", "Dr."]
                                    },
                                    "household_member[suffix]": {
                                        "type": "string",
                                        "description": "Household Member's suffix.",
                                        "enum": ["Jr.", "Sr.", "III", "IV", "V", "Esq.", "Ph.D"]
                                    },
                                    "household_member[relation_to_primary]": {
                                        "type": "string",
                                        "description": "Household Member's relationship to the Contact",
                                        "enum": ["self", "child", "spouse", "parent", "partner", "other-relation", "non-relation"]
                                    },
                                    "household_member[date_of_birth]": {
                                        "type": "number",
                                        "description": "Unix (epoch) timestamp representing the contact's date of birth."
                                    },
                                    "household_member[head_of_household]": {
                                        "type": "boolean",
                                        "description": "Is the household member the head of the household?"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Groups::Contacts::Households::Members"],
                "summary": "Destroy a household member",
                "operationId": "delete_v3_groups_group_id_contacts_contact_id_households_members_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Groups::Contacts::Households::Members"],
                "summary": "Update a household member.",
                "operationId": "patch_v3_groups_group_id_contacts_contact_id_households_members_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "household_member[first_name]": {
                                        "type": "string",
                                        "description": "Household Member's first name."
                                    },
                                    "household_member[last_name]": {
                                        "type": "string",
                                        "description": "Household Member's last name."
                                    },
                                    "household_member[gender]": {
                                        "type": "string",
                                        "description": "Household Member's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "household_member[title]": {
                                        "type": "string",
                                        "description": "Household Member's title.",
                                        "enum": ["Mr.", "Miss", "Mrs.", "Ms.", "Dr."]
                                    },
                                    "household_member[suffix]": {
                                        "type": "string",
                                        "description": "Household Member's suffix.",
                                        "enum": ["Jr.", "Sr.", "III", "IV", "V", "Esq.", "Ph.D"]
                                    },
                                    "household_member[relation_to_primary]": {
                                        "type": "string",
                                        "description": "Household Member's relationship to the Contact",
                                        "enum": ["self", "child", "spouse", "parent", "partner", "other-relation", "non-relation"]
                                    },
                                    "household_member[date_of_birth]": {
                                        "type": "number",
                                        "description": "Unix (epoch) timestamp representing the contact's date of birth."
                                    },
                                    "household_member[head_of_household]": {
                                        "type": "boolean",
                                        "description": "Is the household member the head of the household?"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "household_member[first_name]": {
                                        "type": "string",
                                        "description": "Household Member's first name."
                                    },
                                    "household_member[last_name]": {
                                        "type": "string",
                                        "description": "Household Member's last name."
                                    },
                                    "household_member[gender]": {
                                        "type": "string",
                                        "description": "Household Member's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "household_member[title]": {
                                        "type": "string",
                                        "description": "Household Member's title.",
                                        "enum": ["Mr.", "Miss", "Mrs.", "Ms.", "Dr."]
                                    },
                                    "household_member[suffix]": {
                                        "type": "string",
                                        "description": "Household Member's suffix.",
                                        "enum": ["Jr.", "Sr.", "III", "IV", "V", "Esq.", "Ph.D"]
                                    },
                                    "household_member[relation_to_primary]": {
                                        "type": "string",
                                        "description": "Household Member's relationship to the Contact",
                                        "enum": ["self", "child", "spouse", "parent", "partner", "other-relation", "non-relation"]
                                    },
                                    "household_member[date_of_birth]": {
                                        "type": "number",
                                        "description": "Unix (epoch) timestamp representing the contact's date of birth."
                                    },
                                    "household_member[head_of_household]": {
                                        "type": "boolean",
                                        "description": "Is the household member the head of the household?"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/intakes/{intake_id}/documents": {
            "get": {
                "tags": ["Intake: Documents"],
                "summary": "Displays a list of all the documents attached.",
                "operationId": "get_v3_groups_group_id_contacts_contact_id_intakes_intake_id_documents",
                "parameters": [{
                    "name": "intake_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/intakes/{intake_id}/documents/{id}": {
            "get": {
                "tags": ["Intake: Documents"],
                "summary": "Displays a single document.",
                "operationId": "get_v3_groups_group_id_contacts_contact_id_intakes_intake_id_documents_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "intake_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": ["Intake: Documents"],
                "summary": "Updates a document.",
                "operationId": "put_v3_groups_group_id_contacts_contact_id_intakes_intake_id_documents_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "intake_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["document[title]"],
                                "properties": {
                                    "document[title]": {
                                        "type": "string",
                                        "description": "The name associated with the document"
                                    },
                                    "attach_to_id": {
                                        "type": "string",
                                        "description": "The ID of the object to change the document attachment to."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["document[title]"],
                                "properties": {
                                    "document[title]": {
                                        "type": "string",
                                        "description": "The name associated with the document"
                                    },
                                    "attach_to_id": {
                                        "type": "string",
                                        "description": "The ID of the object to change the document attachment to."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Intake: Documents"],
                "summary": "Deletes an attached document.",
                "operationId": "delete_v3_groups_group_id_contacts_contact_id_intakes_intake_id_documents_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "intake_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Intake: Documents"],
                "summary": "Updates a document.",
                "operationId": "patch_v3_groups_group_id_contacts_contact_id_intakes_intake_id_documents_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "intake_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["document[title]"],
                                "properties": {
                                    "document[title]": {
                                        "type": "string",
                                        "description": "The name associated with the document"
                                    },
                                    "attach_to_id": {
                                        "type": "string",
                                        "description": "The ID of the object to change the document attachment to."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["document[title]"],
                                "properties": {
                                    "document[title]": {
                                        "type": "string",
                                        "description": "The name associated with the document"
                                    },
                                    "attach_to_id": {
                                        "type": "string",
                                        "description": "The ID of the object to change the document attachment to."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/interactions": {
            "post": {
                "tags": ["Contacts: Interactions"],
                "summary": "Creates an interaction.",
                "operationId": "post_v3_groups_group_id_contacts_contact_id_interactions",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "collection_class_id": {
                                        "type": "string",
                                        "description": ""
                                    },
                                    "interaction[note]": {
                                        "type": "string",
                                        "description": "Information about the interaction"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "collection_class_id": {
                                        "type": "string",
                                        "description": ""
                                    },
                                    "interaction[note]": {
                                        "type": "string",
                                        "description": "Information about the interaction"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/interactions/{id}": {
            "put": {
                "tags": ["Contacts: Interactions"],
                "summary": "Updates an interaction.",
                "operationId": "put_v3_groups_group_id_contacts_contact_id_interactions_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "collection_class_id": {
                                        "type": "string",
                                        "description": ""
                                    },
                                    "interaction[note]": {
                                        "type": "string",
                                        "description": "Information about the interaction"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "collection_class_id": {
                                        "type": "string",
                                        "description": ""
                                    },
                                    "interaction[note]": {
                                        "type": "string",
                                        "description": "Information about the interaction"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Contacts: Interactions"],
                "summary": "Updates an interaction.",
                "operationId": "patch_v3_groups_group_id_contacts_contact_id_interactions_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "collection_class_id": {
                                        "type": "string",
                                        "description": ""
                                    },
                                    "interaction[note]": {
                                        "type": "string",
                                        "description": "Information about the interaction"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "collection_class_id": {
                                        "type": "string",
                                        "description": ""
                                    },
                                    "interaction[note]": {
                                        "type": "string",
                                        "description": "Information about the interaction"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/phone-numbers": {
            "post": {
                "tags": ["Contacts: Phone Numbers"],
                "summary": "Add a new phone number to the selected Contact.",
                "operationId": "post_v3_groups_group_id_contacts_contact_id_phone-numbers",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["phone_number[phone_number]"],
                                "properties": {
                                    "phone_number[phone_number]": {
                                        "type": "string",
                                        "description": "The phone number itself. Minimum 7 digits, only numbers will be stored."
                                    },
                                    "phone_number[is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this phone number the contact's primary contact number."
                                    },
                                    "phone_number[phone_type]": {
                                        "type": "string",
                                        "description": "Type of phone number.",
                                        "enum": ["mobile", "home", "work", "fax", "unknown"]
                                    },
                                    "phone_number[can_sms]": {
                                        "type": "boolean",
                                        "description": "Can this phone number receive SMS?"
                                    },
                                    "phone_number[country_code]": {
                                        "type": "string",
                                        "description": "Country code for the phone number. Defaults to <tt>1</tt>, if not specified."
                                    },
                                    "phone_number[acceptable_communication_types]": {
                                        "type": "string",
                                        "description": "Acceptable methods by which to contact the user at this email",
                                        "enum": ["phone_call", "message", "notification"]
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["phone_number[phone_number]"],
                                "properties": {
                                    "phone_number[phone_number]": {
                                        "type": "string",
                                        "description": "The phone number itself. Minimum 7 digits, only numbers will be stored."
                                    },
                                    "phone_number[is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this phone number the contact's primary contact number."
                                    },
                                    "phone_number[phone_type]": {
                                        "type": "string",
                                        "description": "Type of phone number.",
                                        "enum": ["mobile", "home", "work", "fax", "unknown"]
                                    },
                                    "phone_number[can_sms]": {
                                        "type": "boolean",
                                        "description": "Can this phone number receive SMS?"
                                    },
                                    "phone_number[country_code]": {
                                        "type": "string",
                                        "description": "Country code for the phone number. Defaults to <tt>1</tt>, if not specified."
                                    },
                                    "phone_number[acceptable_communication_types]": {
                                        "type": "string",
                                        "description": "Acceptable methods by which to contact the user at this email",
                                        "enum": ["phone_call", "message", "notification"]
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/phone-numbers/{id}": {
            "put": {
                "tags": ["Contacts: Phone Numbers"],
                "summary": "Update an existing Contact phone number.",
                "operationId": "put_v3_groups_group_id_contacts_contact_id_phone-numbers_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["phone_number[phone_number]"],
                                "properties": {
                                    "phone_number[phone_number]": {
                                        "type": "string",
                                        "description": "The phone number itself. Minimum 7 digits, only numbers will be stored."
                                    },
                                    "phone_number[is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this phone number the contact's primary contact number."
                                    },
                                    "phone_number[phone_type]": {
                                        "type": "string",
                                        "description": "Type of phone number.",
                                        "enum": ["mobile", "home", "work", "fax", "unknown"]
                                    },
                                    "phone_number[can_sms]": {
                                        "type": "boolean",
                                        "description": "Can this phone number receive SMS?"
                                    },
                                    "phone_number[country_code]": {
                                        "type": "string",
                                        "description": "Country code for the phone number. Defaults to <tt>1</tt>, if not specified."
                                    },
                                    "phone_number[acceptable_communication_types]": {
                                        "type": "string",
                                        "description": "Acceptable methods by which to contact the user at this email",
                                        "enum": ["phone_call", "message", "notification"]
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["phone_number[phone_number]"],
                                "properties": {
                                    "phone_number[phone_number]": {
                                        "type": "string",
                                        "description": "The phone number itself. Minimum 7 digits, only numbers will be stored."
                                    },
                                    "phone_number[is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this phone number the contact's primary contact number."
                                    },
                                    "phone_number[phone_type]": {
                                        "type": "string",
                                        "description": "Type of phone number.",
                                        "enum": ["mobile", "home", "work", "fax", "unknown"]
                                    },
                                    "phone_number[can_sms]": {
                                        "type": "boolean",
                                        "description": "Can this phone number receive SMS?"
                                    },
                                    "phone_number[country_code]": {
                                        "type": "string",
                                        "description": "Country code for the phone number. Defaults to <tt>1</tt>, if not specified."
                                    },
                                    "phone_number[acceptable_communication_types]": {
                                        "type": "string",
                                        "description": "Acceptable methods by which to contact the user at this email",
                                        "enum": ["phone_call", "message", "notification"]
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Contacts: Phone Numbers"],
                "summary": "Remove an existing Contact phone number.",
                "operationId": "delete_v3_groups_group_id_contacts_contact_id_phone-numbers_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Contacts: Phone Numbers"],
                "summary": "Update an existing Contact phone number.",
                "operationId": "patch_v3_groups_group_id_contacts_contact_id_phone-numbers_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["phone_number[phone_number]"],
                                "properties": {
                                    "phone_number[phone_number]": {
                                        "type": "string",
                                        "description": "The phone number itself. Minimum 7 digits, only numbers will be stored."
                                    },
                                    "phone_number[is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this phone number the contact's primary contact number."
                                    },
                                    "phone_number[phone_type]": {
                                        "type": "string",
                                        "description": "Type of phone number.",
                                        "enum": ["mobile", "home", "work", "fax", "unknown"]
                                    },
                                    "phone_number[can_sms]": {
                                        "type": "boolean",
                                        "description": "Can this phone number receive SMS?"
                                    },
                                    "phone_number[country_code]": {
                                        "type": "string",
                                        "description": "Country code for the phone number. Defaults to <tt>1</tt>, if not specified."
                                    },
                                    "phone_number[acceptable_communication_types]": {
                                        "type": "string",
                                        "description": "Acceptable methods by which to contact the user at this email",
                                        "enum": ["phone_call", "message", "notification"]
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["phone_number[phone_number]"],
                                "properties": {
                                    "phone_number[phone_number]": {
                                        "type": "string",
                                        "description": "The phone number itself. Minimum 7 digits, only numbers will be stored."
                                    },
                                    "phone_number[is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this phone number the contact's primary contact number."
                                    },
                                    "phone_number[phone_type]": {
                                        "type": "string",
                                        "description": "Type of phone number.",
                                        "enum": ["mobile", "home", "work", "fax", "unknown"]
                                    },
                                    "phone_number[can_sms]": {
                                        "type": "boolean",
                                        "description": "Can this phone number receive SMS?"
                                    },
                                    "phone_number[country_code]": {
                                        "type": "string",
                                        "description": "Country code for the phone number. Defaults to <tt>1</tt>, if not specified."
                                    },
                                    "phone_number[acceptable_communication_types]": {
                                        "type": "string",
                                        "description": "Acceptable methods by which to contact the user at this email",
                                        "enum": ["phone_call", "message", "notification"]
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/programs/{program_id}/enrollment": {
            "get": {
                "tags": ["Contacts: Program Enrollment"],
                "summary": "Returns enrollment details for the contact and the selected program.",
                "operationId": "get_v3_groups_group_id_contacts_contact_id_programs_program_id_enrollment",
                "parameters": [{
                    "name": "program_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/referrals": {
            "get": {
                "tags": ["Contacts: Referrals"],
                "summary": "Returns a list of referrals sent on behalf of the Contact.",
                "operationId": "get_v3_groups_group_id_contacts_contact_id_referrals",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "post": {
                "tags": ["Contacts: Referrals"],
                "summary": "Create new referral(s) for the selected contact.",
                "operationId": "post_v3_groups_group_id_contacts_contact_id_referrals",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "assistance_request_id": {
                                        "type": "string",
                                        "description": "The identifier of an assistance request submitted by the Contact. This will connect the originating assistance request to the referral."
                                    },
                                    "referrals": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "assistance_request_id": {
                                        "type": "string",
                                        "description": "The identifier of an assistance request submitted by the Contact. This will connect the originating assistance request to the referral."
                                    },
                                    "referrals": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/referrals/draft": {
            "post": {
                "tags": ["Contacts: Referrals"],
                "summary": "Create new referral(s) for the selected contact.",
                "operationId": "post_v3_groups_group_id_contacts_contact_id_referrals_draft",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "assistance_request_id": {
                                        "type": "string",
                                        "description": "The identifier of an assistance request submitted by the Contact. This will connect the originating assistance request to the referral."
                                    },
                                    "referrals": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "assistance_request_id": {
                                        "type": "string",
                                        "description": "The identifier of an assistance request submitted by the Contact. This will connect the originating assistance request to the referral."
                                    },
                                    "referrals": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/referrals/{id}": {
            "get": {
                "tags": ["Contacts: Referrals"],
                "summary": "Returns details for the selected referral.",
                "operationId": "get_v3_groups_group_id_contacts_contact_id_referrals_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": ["Contacts: Referrals"],
                "summary": "Branchs a referral for the selected contact.",
                "operationId": "put_v3_groups_group_id_contacts_contact_id_referrals_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "assistance_request_id": {
                                        "type": "string",
                                        "description": "The identifier of an assistance request submitted by the Contact. This will connect the originating assistance request to the referral."
                                    },
                                    "referrals": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "assistance_request_id": {
                                        "type": "string",
                                        "description": "The identifier of an assistance request submitted by the Contact. This will connect the originating assistance request to the referral."
                                    },
                                    "referrals": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Contacts: Referrals"],
                "summary": "Branchs a referral for the selected contact.",
                "operationId": "patch_v3_groups_group_id_contacts_contact_id_referrals_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "assistance_request_id": {
                                        "type": "string",
                                        "description": "The identifier of an assistance request submitted by the Contact. This will connect the originating assistance request to the referral."
                                    },
                                    "referrals": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "assistance_request_id": {
                                        "type": "string",
                                        "description": "The identifier of an assistance request submitted by the Contact. This will connect the originating assistance request to the referral."
                                    },
                                    "referrals": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/screenings": {
            "get": {
                "tags": ["Screenings: Fetch screenings for contact"],
                "summary": "Displays an index of screenings",
                "operationId": "get_v3_groups_group_id_contacts_contact_id_screenings",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{contact_id}/select": {
            "put": {
                "tags": ["Contacts: Select/Use by Group"],
                "summary": "Creates a relationship between the selected contact and the Group.",
                "operationId": "put_v3_groups_group_id_contacts_contact_id_select",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "assistance_request_id": {
                                        "type": "string",
                                        "description": "The identifier of an assistance request submitted by the Contact. This will cause the API to attempt to transfer data from the assistance request requestor to the Contact."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "assistance_request_id": {
                                        "type": "string",
                                        "description": "The identifier of an assistance request submitted by the Contact. This will cause the API to attempt to transfer data from the assistance request requestor to the Contact."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Contacts: Select/Use by Group"],
                "summary": "Creates a relationship between the selected contact and the Group.",
                "operationId": "patch_v3_groups_group_id_contacts_contact_id_select",
                "parameters": [{
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "assistance_request_id": {
                                        "type": "string",
                                        "description": "The identifier of an assistance request submitted by the Contact. This will cause the API to attempt to transfer data from the assistance request requestor to the Contact."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "assistance_request_id": {
                                        "type": "string",
                                        "description": "The identifier of an assistance request submitted by the Contact. This will cause the API to attempt to transfer data from the assistance request requestor to the Contact."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/contacts/{id}": {
            "get": {
                "tags": ["Contacts"],
                "summary": "Returns details for the selected contact.",
                "operationId": "get_v3_groups_group_id_contacts_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": ["Contacts"],
                "summary": "Updates a contact.",
                "operationId": "put_v3_groups_group_id_contacts_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "network_id": {
                                        "type": "string",
                                        "description": "The identifier of the Network the contact is participating in."
                                    },
                                    "assistance_request_id": {
                                        "type": "string",
                                        "description": "The identifier of an assistance request submitted by the Contact. This will cause the API to attempt to transfer data from the assistance request requestor to the Contact."
                                    },
                                    "contact[first_name]": {
                                        "type": "string",
                                        "description": "Contact's first name."
                                    },
                                    "contact[last_name]": {
                                        "type": "string",
                                        "description": "Contact's last name."
                                    },
                                    "contact[email]": {
                                        "type": "string",
                                        "description": "Contact's email address."
                                    },
                                    "contact[date_of_birth]": {
                                        "type": "number",
                                        "description": "Unix (epoch) timestamp representing the contact's date of birth."
                                    },
                                    "contact[gender]": {
                                        "type": "string",
                                        "description": "Contact's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "contact[citizenship]": {
                                        "type": "string",
                                        "description": "Contact's specified citizenship.",
                                        "enum": ["us-citizen", "us-national", "lawful-permanent-resident", "other", "undisclosed"]
                                    },
                                    "contact[ethnicity]": {
                                        "type": "string",
                                        "description": "Contact's specified ethnicity.",
                                        "enum": ["hispanic-or-latino", "not-hispanic-or-latino", "undisclosed"]
                                    },
                                    "contact[marital_status]": {
                                        "type": "string",
                                        "description": "Contact's specified marital status.",
                                        "enum": ["divorced", "domestic_partner", "married-civil-union", "single/never-married", "separated", "undisclosed", "widowed"]
                                    },
                                    "contact[race]": {
                                        "type": "string",
                                        "description": "Contact's specified race.",
                                        "enum": ["american-indian-alaska-native", "asian", "black-african-american", "native-hawaiian-or-pacific-islander", "other-race", "undisclosed", "white"]
                                    },
                                    "contact[email_address]": {
                                        "type": "string",
                                        "description": "Contact's primary email address."
                                    },
                                    "contact[preferred_first_name]": {
                                        "type": "string",
                                        "description": "Contact's preferred first name."
                                    },
                                    "contact[title]": {
                                        "type": "string",
                                        "description": "Contact's title.",
                                        "enum": ["Mr.", "Miss", "Mrs.", "Ms.", "Dr."]
                                    },
                                    "contact[middle_name_initial]": {
                                        "type": "string",
                                        "description": "Contact's middle name or initial."
                                    },
                                    "contact[suffix]": {
                                        "type": "string",
                                        "description": "Contact's suffix.",
                                        "enum": ["Jr.", "Sr.", "III", "IV", "V", "Esq.", "Ph.D"]
                                    },
                                    "contact[nicknames]": {
                                        "type": "array",
                                        "description": "Contact's nicknames.",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[preferred_communication_method]": {
                                        "type": "string",
                                        "description": "Preferred communication method",
                                        "enum": ["phone_call", "sms", "email", "no_preference"]
                                    },
                                    "contact[preferred_communication_time_of_day]": {
                                        "type": "string",
                                        "description": "Preferred communication time of day",
                                        "enum": ["any_time", "morning", "afternoon", "evening"]
                                    },
                                    "contact[addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[email_addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[phone_numbers]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[military][affiliation]": {
                                        "type": "string",
                                        "description": "Military affiliation",
                                        "enum": ["military_member_or_veteran", "spouse", "widow", "family_member", "caregiver", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][current_status]": {
                                        "type": "string",
                                        "description": "Current military status",
                                        "enum": ["active_duty", "national_guard", "reserve", "retiree", "veteran", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][currently_transitioning]": {
                                        "type": "string",
                                        "description": "Is the contact currently transitioning?",
                                        "enum": ["yes_12mos_before", "yes_12mos_after", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][at_least_one_day_active_duty]": {
                                        "type": "string",
                                        "description": "Has at least one day of active duty outside of basic training?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][branch]": {
                                        "type": "string",
                                        "description": "Branch of service",
                                        "enum": ["air_force", "army", "coast_guard", "marines", "navy", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_era]": {
                                        "type": "string",
                                        "description": "Service era",
                                        "enum": ["post_911", "persian_gulf", "post_vietnam", "vietnam", "post_korean", "korean_war", "pre_korean", "ww2", "merchant_marine", "ww1", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][entry_date]": {
                                        "type": "number",
                                        "description": "Date of entry"
                                    },
                                    "contact[military][exit_date]": {
                                        "type": "number",
                                        "description": "Date of exit"
                                    },
                                    "contact[military][deployed]": {
                                        "type": "string",
                                        "description": "Deployed?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][deployment_starts_at]": {
                                        "type": "number",
                                        "description": "Deployment start date"
                                    },
                                    "contact[military][deployment_ends_at]": {
                                        "type": "number",
                                        "description": "Deployment end date"
                                    },
                                    "contact[military][discharge_type]": {
                                        "type": "string",
                                        "description": "Discharge type",
                                        "enum": ["honorable", "general", "other_than_honorable", "bad_conduct", "dishonorable", "uncharacterized", "other", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][discharged_due_to_disability]": {
                                        "type": "string",
                                        "description": "Discharged or retired from military service for a disability incurred in the line of duty?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_connected_disability]": {
                                        "type": "string",
                                        "description": "Has VA-rated Service-Connected Disability?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_connected_disability_rating]": {
                                        "type": "string",
                                        "description": "Service-Connected Disability Rating",
                                        "enum": ["0", "10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][proof_of_veteran_status]": {
                                        "type": "string",
                                        "description": "Have proof of veteran status?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][proof_type]": {
                                        "type": "string",
                                        "description": "Proof type",
                                        "enum": ["dd214", "va_id", "statement_of_service", "retiree_id", "drivers_license", "military_id", "other", "prefer_not_to_disclose"]
                                    },
                                    "contact[insurance_ids]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "network_id": {
                                        "type": "string",
                                        "description": "The identifier of the Network the contact is participating in."
                                    },
                                    "assistance_request_id": {
                                        "type": "string",
                                        "description": "The identifier of an assistance request submitted by the Contact. This will cause the API to attempt to transfer data from the assistance request requestor to the Contact."
                                    },
                                    "contact[first_name]": {
                                        "type": "string",
                                        "description": "Contact's first name."
                                    },
                                    "contact[last_name]": {
                                        "type": "string",
                                        "description": "Contact's last name."
                                    },
                                    "contact[email]": {
                                        "type": "string",
                                        "description": "Contact's email address."
                                    },
                                    "contact[date_of_birth]": {
                                        "type": "number",
                                        "description": "Unix (epoch) timestamp representing the contact's date of birth."
                                    },
                                    "contact[gender]": {
                                        "type": "string",
                                        "description": "Contact's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "contact[citizenship]": {
                                        "type": "string",
                                        "description": "Contact's specified citizenship.",
                                        "enum": ["us-citizen", "us-national", "lawful-permanent-resident", "other", "undisclosed"]
                                    },
                                    "contact[ethnicity]": {
                                        "type": "string",
                                        "description": "Contact's specified ethnicity.",
                                        "enum": ["hispanic-or-latino", "not-hispanic-or-latino", "undisclosed"]
                                    },
                                    "contact[marital_status]": {
                                        "type": "string",
                                        "description": "Contact's specified marital status.",
                                        "enum": ["divorced", "domestic_partner", "married-civil-union", "single/never-married", "separated", "undisclosed", "widowed"]
                                    },
                                    "contact[race]": {
                                        "type": "string",
                                        "description": "Contact's specified race.",
                                        "enum": ["american-indian-alaska-native", "asian", "black-african-american", "native-hawaiian-or-pacific-islander", "other-race", "undisclosed", "white"]
                                    },
                                    "contact[email_address]": {
                                        "type": "string",
                                        "description": "Contact's primary email address."
                                    },
                                    "contact[preferred_first_name]": {
                                        "type": "string",
                                        "description": "Contact's preferred first name."
                                    },
                                    "contact[title]": {
                                        "type": "string",
                                        "description": "Contact's title.",
                                        "enum": ["Mr.", "Miss", "Mrs.", "Ms.", "Dr."]
                                    },
                                    "contact[middle_name_initial]": {
                                        "type": "string",
                                        "description": "Contact's middle name or initial."
                                    },
                                    "contact[suffix]": {
                                        "type": "string",
                                        "description": "Contact's suffix.",
                                        "enum": ["Jr.", "Sr.", "III", "IV", "V", "Esq.", "Ph.D"]
                                    },
                                    "contact[nicknames]": {
                                        "type": "array",
                                        "description": "Contact's nicknames.",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[preferred_communication_method]": {
                                        "type": "string",
                                        "description": "Preferred communication method",
                                        "enum": ["phone_call", "sms", "email", "no_preference"]
                                    },
                                    "contact[preferred_communication_time_of_day]": {
                                        "type": "string",
                                        "description": "Preferred communication time of day",
                                        "enum": ["any_time", "morning", "afternoon", "evening"]
                                    },
                                    "contact[addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[email_addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[phone_numbers]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[military][affiliation]": {
                                        "type": "string",
                                        "description": "Military affiliation",
                                        "enum": ["military_member_or_veteran", "spouse", "widow", "family_member", "caregiver", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][current_status]": {
                                        "type": "string",
                                        "description": "Current military status",
                                        "enum": ["active_duty", "national_guard", "reserve", "retiree", "veteran", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][currently_transitioning]": {
                                        "type": "string",
                                        "description": "Is the contact currently transitioning?",
                                        "enum": ["yes_12mos_before", "yes_12mos_after", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][at_least_one_day_active_duty]": {
                                        "type": "string",
                                        "description": "Has at least one day of active duty outside of basic training?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][branch]": {
                                        "type": "string",
                                        "description": "Branch of service",
                                        "enum": ["air_force", "army", "coast_guard", "marines", "navy", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_era]": {
                                        "type": "string",
                                        "description": "Service era",
                                        "enum": ["post_911", "persian_gulf", "post_vietnam", "vietnam", "post_korean", "korean_war", "pre_korean", "ww2", "merchant_marine", "ww1", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][entry_date]": {
                                        "type": "number",
                                        "description": "Date of entry"
                                    },
                                    "contact[military][exit_date]": {
                                        "type": "number",
                                        "description": "Date of exit"
                                    },
                                    "contact[military][deployed]": {
                                        "type": "string",
                                        "description": "Deployed?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][deployment_starts_at]": {
                                        "type": "number",
                                        "description": "Deployment start date"
                                    },
                                    "contact[military][deployment_ends_at]": {
                                        "type": "number",
                                        "description": "Deployment end date"
                                    },
                                    "contact[military][discharge_type]": {
                                        "type": "string",
                                        "description": "Discharge type",
                                        "enum": ["honorable", "general", "other_than_honorable", "bad_conduct", "dishonorable", "uncharacterized", "other", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][discharged_due_to_disability]": {
                                        "type": "string",
                                        "description": "Discharged or retired from military service for a disability incurred in the line of duty?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_connected_disability]": {
                                        "type": "string",
                                        "description": "Has VA-rated Service-Connected Disability?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_connected_disability_rating]": {
                                        "type": "string",
                                        "description": "Service-Connected Disability Rating",
                                        "enum": ["0", "10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][proof_of_veteran_status]": {
                                        "type": "string",
                                        "description": "Have proof of veteran status?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][proof_type]": {
                                        "type": "string",
                                        "description": "Proof type",
                                        "enum": ["dd214", "va_id", "statement_of_service", "retiree_id", "drivers_license", "military_id", "other", "prefer_not_to_disclose"]
                                    },
                                    "contact[insurance_ids]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Contacts"],
                "summary": "Destroys the contact.",
                "operationId": "delete_v3_groups_group_id_contacts_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Contacts"],
                "summary": "Updates a contact.",
                "operationId": "patch_v3_groups_group_id_contacts_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "network_id": {
                                        "type": "string",
                                        "description": "The identifier of the Network the contact is participating in."
                                    },
                                    "assistance_request_id": {
                                        "type": "string",
                                        "description": "The identifier of an assistance request submitted by the Contact. This will cause the API to attempt to transfer data from the assistance request requestor to the Contact."
                                    },
                                    "contact[first_name]": {
                                        "type": "string",
                                        "description": "Contact's first name."
                                    },
                                    "contact[last_name]": {
                                        "type": "string",
                                        "description": "Contact's last name."
                                    },
                                    "contact[email]": {
                                        "type": "string",
                                        "description": "Contact's email address."
                                    },
                                    "contact[date_of_birth]": {
                                        "type": "number",
                                        "description": "Unix (epoch) timestamp representing the contact's date of birth."
                                    },
                                    "contact[gender]": {
                                        "type": "string",
                                        "description": "Contact's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "contact[citizenship]": {
                                        "type": "string",
                                        "description": "Contact's specified citizenship.",
                                        "enum": ["us-citizen", "us-national", "lawful-permanent-resident", "other", "undisclosed"]
                                    },
                                    "contact[ethnicity]": {
                                        "type": "string",
                                        "description": "Contact's specified ethnicity.",
                                        "enum": ["hispanic-or-latino", "not-hispanic-or-latino", "undisclosed"]
                                    },
                                    "contact[marital_status]": {
                                        "type": "string",
                                        "description": "Contact's specified marital status.",
                                        "enum": ["divorced", "domestic_partner", "married-civil-union", "single/never-married", "separated", "undisclosed", "widowed"]
                                    },
                                    "contact[race]": {
                                        "type": "string",
                                        "description": "Contact's specified race.",
                                        "enum": ["american-indian-alaska-native", "asian", "black-african-american", "native-hawaiian-or-pacific-islander", "other-race", "undisclosed", "white"]
                                    },
                                    "contact[email_address]": {
                                        "type": "string",
                                        "description": "Contact's primary email address."
                                    },
                                    "contact[preferred_first_name]": {
                                        "type": "string",
                                        "description": "Contact's preferred first name."
                                    },
                                    "contact[title]": {
                                        "type": "string",
                                        "description": "Contact's title.",
                                        "enum": ["Mr.", "Miss", "Mrs.", "Ms.", "Dr."]
                                    },
                                    "contact[middle_name_initial]": {
                                        "type": "string",
                                        "description": "Contact's middle name or initial."
                                    },
                                    "contact[suffix]": {
                                        "type": "string",
                                        "description": "Contact's suffix.",
                                        "enum": ["Jr.", "Sr.", "III", "IV", "V", "Esq.", "Ph.D"]
                                    },
                                    "contact[nicknames]": {
                                        "type": "array",
                                        "description": "Contact's nicknames.",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[preferred_communication_method]": {
                                        "type": "string",
                                        "description": "Preferred communication method",
                                        "enum": ["phone_call", "sms", "email", "no_preference"]
                                    },
                                    "contact[preferred_communication_time_of_day]": {
                                        "type": "string",
                                        "description": "Preferred communication time of day",
                                        "enum": ["any_time", "morning", "afternoon", "evening"]
                                    },
                                    "contact[addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[email_addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[phone_numbers]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[military][affiliation]": {
                                        "type": "string",
                                        "description": "Military affiliation",
                                        "enum": ["military_member_or_veteran", "spouse", "widow", "family_member", "caregiver", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][current_status]": {
                                        "type": "string",
                                        "description": "Current military status",
                                        "enum": ["active_duty", "national_guard", "reserve", "retiree", "veteran", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][currently_transitioning]": {
                                        "type": "string",
                                        "description": "Is the contact currently transitioning?",
                                        "enum": ["yes_12mos_before", "yes_12mos_after", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][at_least_one_day_active_duty]": {
                                        "type": "string",
                                        "description": "Has at least one day of active duty outside of basic training?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][branch]": {
                                        "type": "string",
                                        "description": "Branch of service",
                                        "enum": ["air_force", "army", "coast_guard", "marines", "navy", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_era]": {
                                        "type": "string",
                                        "description": "Service era",
                                        "enum": ["post_911", "persian_gulf", "post_vietnam", "vietnam", "post_korean", "korean_war", "pre_korean", "ww2", "merchant_marine", "ww1", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][entry_date]": {
                                        "type": "number",
                                        "description": "Date of entry"
                                    },
                                    "contact[military][exit_date]": {
                                        "type": "number",
                                        "description": "Date of exit"
                                    },
                                    "contact[military][deployed]": {
                                        "type": "string",
                                        "description": "Deployed?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][deployment_starts_at]": {
                                        "type": "number",
                                        "description": "Deployment start date"
                                    },
                                    "contact[military][deployment_ends_at]": {
                                        "type": "number",
                                        "description": "Deployment end date"
                                    },
                                    "contact[military][discharge_type]": {
                                        "type": "string",
                                        "description": "Discharge type",
                                        "enum": ["honorable", "general", "other_than_honorable", "bad_conduct", "dishonorable", "uncharacterized", "other", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][discharged_due_to_disability]": {
                                        "type": "string",
                                        "description": "Discharged or retired from military service for a disability incurred in the line of duty?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_connected_disability]": {
                                        "type": "string",
                                        "description": "Has VA-rated Service-Connected Disability?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_connected_disability_rating]": {
                                        "type": "string",
                                        "description": "Service-Connected Disability Rating",
                                        "enum": ["0", "10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][proof_of_veteran_status]": {
                                        "type": "string",
                                        "description": "Have proof of veteran status?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][proof_type]": {
                                        "type": "string",
                                        "description": "Proof type",
                                        "enum": ["dd214", "va_id", "statement_of_service", "retiree_id", "drivers_license", "military_id", "other", "prefer_not_to_disclose"]
                                    },
                                    "contact[insurance_ids]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "network_id": {
                                        "type": "string",
                                        "description": "The identifier of the Network the contact is participating in."
                                    },
                                    "assistance_request_id": {
                                        "type": "string",
                                        "description": "The identifier of an assistance request submitted by the Contact. This will cause the API to attempt to transfer data from the assistance request requestor to the Contact."
                                    },
                                    "contact[first_name]": {
                                        "type": "string",
                                        "description": "Contact's first name."
                                    },
                                    "contact[last_name]": {
                                        "type": "string",
                                        "description": "Contact's last name."
                                    },
                                    "contact[email]": {
                                        "type": "string",
                                        "description": "Contact's email address."
                                    },
                                    "contact[date_of_birth]": {
                                        "type": "number",
                                        "description": "Unix (epoch) timestamp representing the contact's date of birth."
                                    },
                                    "contact[gender]": {
                                        "type": "string",
                                        "description": "Contact's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "contact[citizenship]": {
                                        "type": "string",
                                        "description": "Contact's specified citizenship.",
                                        "enum": ["us-citizen", "us-national", "lawful-permanent-resident", "other", "undisclosed"]
                                    },
                                    "contact[ethnicity]": {
                                        "type": "string",
                                        "description": "Contact's specified ethnicity.",
                                        "enum": ["hispanic-or-latino", "not-hispanic-or-latino", "undisclosed"]
                                    },
                                    "contact[marital_status]": {
                                        "type": "string",
                                        "description": "Contact's specified marital status.",
                                        "enum": ["divorced", "domestic_partner", "married-civil-union", "single/never-married", "separated", "undisclosed", "widowed"]
                                    },
                                    "contact[race]": {
                                        "type": "string",
                                        "description": "Contact's specified race.",
                                        "enum": ["american-indian-alaska-native", "asian", "black-african-american", "native-hawaiian-or-pacific-islander", "other-race", "undisclosed", "white"]
                                    },
                                    "contact[email_address]": {
                                        "type": "string",
                                        "description": "Contact's primary email address."
                                    },
                                    "contact[preferred_first_name]": {
                                        "type": "string",
                                        "description": "Contact's preferred first name."
                                    },
                                    "contact[title]": {
                                        "type": "string",
                                        "description": "Contact's title.",
                                        "enum": ["Mr.", "Miss", "Mrs.", "Ms.", "Dr."]
                                    },
                                    "contact[middle_name_initial]": {
                                        "type": "string",
                                        "description": "Contact's middle name or initial."
                                    },
                                    "contact[suffix]": {
                                        "type": "string",
                                        "description": "Contact's suffix.",
                                        "enum": ["Jr.", "Sr.", "III", "IV", "V", "Esq.", "Ph.D"]
                                    },
                                    "contact[nicknames]": {
                                        "type": "array",
                                        "description": "Contact's nicknames.",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[preferred_communication_method]": {
                                        "type": "string",
                                        "description": "Preferred communication method",
                                        "enum": ["phone_call", "sms", "email", "no_preference"]
                                    },
                                    "contact[preferred_communication_time_of_day]": {
                                        "type": "string",
                                        "description": "Preferred communication time of day",
                                        "enum": ["any_time", "morning", "afternoon", "evening"]
                                    },
                                    "contact[addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[email_addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[phone_numbers]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[military][affiliation]": {
                                        "type": "string",
                                        "description": "Military affiliation",
                                        "enum": ["military_member_or_veteran", "spouse", "widow", "family_member", "caregiver", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][current_status]": {
                                        "type": "string",
                                        "description": "Current military status",
                                        "enum": ["active_duty", "national_guard", "reserve", "retiree", "veteran", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][currently_transitioning]": {
                                        "type": "string",
                                        "description": "Is the contact currently transitioning?",
                                        "enum": ["yes_12mos_before", "yes_12mos_after", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][at_least_one_day_active_duty]": {
                                        "type": "string",
                                        "description": "Has at least one day of active duty outside of basic training?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][branch]": {
                                        "type": "string",
                                        "description": "Branch of service",
                                        "enum": ["air_force", "army", "coast_guard", "marines", "navy", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_era]": {
                                        "type": "string",
                                        "description": "Service era",
                                        "enum": ["post_911", "persian_gulf", "post_vietnam", "vietnam", "post_korean", "korean_war", "pre_korean", "ww2", "merchant_marine", "ww1", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][entry_date]": {
                                        "type": "number",
                                        "description": "Date of entry"
                                    },
                                    "contact[military][exit_date]": {
                                        "type": "number",
                                        "description": "Date of exit"
                                    },
                                    "contact[military][deployed]": {
                                        "type": "string",
                                        "description": "Deployed?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][deployment_starts_at]": {
                                        "type": "number",
                                        "description": "Deployment start date"
                                    },
                                    "contact[military][deployment_ends_at]": {
                                        "type": "number",
                                        "description": "Deployment end date"
                                    },
                                    "contact[military][discharge_type]": {
                                        "type": "string",
                                        "description": "Discharge type",
                                        "enum": ["honorable", "general", "other_than_honorable", "bad_conduct", "dishonorable", "uncharacterized", "other", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][discharged_due_to_disability]": {
                                        "type": "string",
                                        "description": "Discharged or retired from military service for a disability incurred in the line of duty?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_connected_disability]": {
                                        "type": "string",
                                        "description": "Has VA-rated Service-Connected Disability?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_connected_disability_rating]": {
                                        "type": "string",
                                        "description": "Service-Connected Disability Rating",
                                        "enum": ["0", "10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][proof_of_veteran_status]": {
                                        "type": "string",
                                        "description": "Have proof of veteran status?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][proof_type]": {
                                        "type": "string",
                                        "description": "Proof type",
                                        "enum": ["dd214", "va_id", "statement_of_service", "retiree_id", "drivers_license", "military_id", "other", "prefer_not_to_disclose"]
                                    },
                                    "contact[insurance_ids]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/exports": {
            "get": {
                "tags": ["Exports"],
                "summary": "Retrieve a paginated list of all exports belonging to the current group",
                "operationId": "get_v3_groups_group_id_exports",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "post": {
                "tags": ["Exports"],
                "summary": "Create a new export",
                "operationId": "post_v3_groups_group_id_exports",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["export[send_email]", "export[target_type]", "export[time_field]", "export[type]"],
                                "properties": {
                                    "export[send_email]": {
                                        "type": "boolean",
                                        "description": "Should send email?"
                                    },
                                    "export[time_field]": {
                                        "type": "string",
                                        "description": "To which timestamp field should export apply the time constraint",
                                        "enum": ["created_at", "updated_at", "created_or_updated"]
                                    },
                                    "export[type]": {
                                        "type": "string",
                                        "description": "Type of export that should be created",
                                        "enum": ["assessment", "contact", "interaction", "referral", "service_case", "service_episode_raw", "service_episode_snapshot", "user"]
                                    },
                                    "export[target_type]": {
                                        "type": "string",
                                        "description": "Type of target that is being provided",
                                        "enum": ["network", "provider"]
                                    },
                                    "export[target_ids]": {
                                        "type": "array",
                                        "description": "Array of IDs that identify the targets of the export (ie: Group or Network IDs)",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "export[start_at]": {
                                        "type": "string",
                                        "description": "Earliest date for export (yyyy-mm-dd)"
                                    },
                                    "export[end_at]": {
                                        "type": "string",
                                        "description": "Ending date for export (yyyy-mm-dd)"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["export[send_email]", "export[target_type]", "export[time_field]", "export[type]"],
                                "properties": {
                                    "export[send_email]": {
                                        "type": "boolean",
                                        "description": "Should send email?"
                                    },
                                    "export[time_field]": {
                                        "type": "string",
                                        "description": "To which timestamp field should export apply the time constraint",
                                        "enum": ["created_at", "updated_at", "created_or_updated"]
                                    },
                                    "export[type]": {
                                        "type": "string",
                                        "description": "Type of export that should be created",
                                        "enum": ["assessment", "contact", "interaction", "referral", "service_case", "service_episode_raw", "service_episode_snapshot", "user"]
                                    },
                                    "export[target_type]": {
                                        "type": "string",
                                        "description": "Type of target that is being provided",
                                        "enum": ["network", "provider"]
                                    },
                                    "export[target_ids]": {
                                        "type": "array",
                                        "description": "Array of IDs that identify the targets of the export (ie: Group or Network IDs)",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "export[start_at]": {
                                        "type": "string",
                                        "description": "Earliest date for export (yyyy-mm-dd)"
                                    },
                                    "export[end_at]": {
                                        "type": "string",
                                        "description": "Ending date for export (yyyy-mm-dd)"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/forms/usage": {
            "get": {
                "tags": ["Groups: Forms Available for Use"],
                "summary": "Retrieve a complete group profile.",
                "operationId": "get_v3_groups_group_id_forms_usage",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "q[use_type]",
                    "in": "query",
                    "description": "Limit the available forms returned to the specified use type.",
                    "schema": {
                        "type": "string",
                        "enum": ["intake", "exit", "general", "screening", "any"]
                    }
                }, {
                    "name": "q[service_type_ids]",
                    "in": "query",
                    "description": "Identifiers of the service type(s) being provided.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[network_ids]",
                    "in": "query",
                    "description": "Identifiers of the Network(s) being used to provide the service.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "q[program_id]",
                    "in": "query",
                    "description": "Identifier of the Program being used to provide the service.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "q[contact_id]",
                    "in": "query",
                    "description": "Identifier of the Contact that will be attached to the used forms.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/hours-of-operation": {
            "put": {
                "tags": ["Groups: Hours of Operation"],
                "summary": "Update hours of operation for the selected Group",
                "operationId": "put_v3_groups_group_id_hours-of-operation",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "schedule[week]": {
                                        "type": "array",
                                        "description": "The hours of operation for the provided day",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "schedule[week]": {
                                        "type": "array",
                                        "description": "The hours of operation for the provided day",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "post": {
                "tags": ["Groups: Hours of Operation"],
                "summary": "Add hours of operation to the selected Group",
                "operationId": "post_v3_groups_group_id_hours-of-operation",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "schedule[week]": {
                                        "type": "array",
                                        "description": "The hours of operation for the provided day",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "schedule[week]": {
                                        "type": "array",
                                        "description": "The hours of operation for the provided day",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Groups: Hours of Operation"],
                "summary": "Delete hours of operation for the selected Group",
                "operationId": "delete_v3_groups_group_id_hours-of-operation",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "schedule[week]": {
                                        "type": "array",
                                        "description": "The hours of operation for the provided day",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "schedule[week]": {
                                        "type": "array",
                                        "description": "The hours of operation for the provided day",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Groups: Hours of Operation"],
                "summary": "Update hours of operation for the selected Group",
                "operationId": "patch_v3_groups_group_id_hours-of-operation",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "schedule[week]": {
                                        "type": "array",
                                        "description": "The hours of operation for the provided day",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "schedule[week]": {
                                        "type": "array",
                                        "description": "The hours of operation for the provided day",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/invitations": {
            "get": {
                "tags": ["Groups: User Invitations"],
                "summary": "Returns a list of invitations sent by the selected group.",
                "operationId": "get_v3_groups_group_id_invitations",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "post": {
                "tags": ["Groups: User Invitations"],
                "summary": "Creates a new user invitation for the selected group.",
                "operationId": "post_v3_groups_group_id_invitations",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["invitation[email]", "invitation[first_name]", "invitation[last_name]"],
                                "properties": {
                                    "invitation[last_name]": {
                                        "type": "string",
                                        "description": "Last name of the invitation recipient."
                                    },
                                    "invitation[first_name]": {
                                        "type": "string",
                                        "description": "First name of the invitation recipient."
                                    },
                                    "invitation[email]": {
                                        "type": "string",
                                        "description": "Email address where the invitation should be delivered."
                                    },
                                    "invitation[send_immediately]": {
                                        "type": "boolean",
                                        "description": "Should the invitation be delivered immediately. Defaults to <tt>false</tt>."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["invitation[email]", "invitation[first_name]", "invitation[last_name]"],
                                "properties": {
                                    "invitation[last_name]": {
                                        "type": "string",
                                        "description": "Last name of the invitation recipient."
                                    },
                                    "invitation[first_name]": {
                                        "type": "string",
                                        "description": "First name of the invitation recipient."
                                    },
                                    "invitation[email]": {
                                        "type": "string",
                                        "description": "Email address where the invitation should be delivered."
                                    },
                                    "invitation[send_immediately]": {
                                        "type": "boolean",
                                        "description": "Should the invitation be delivered immediately. Defaults to <tt>false</tt>."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/invitations/{id}": {
            "get": {
                "tags": ["Groups: User Invitations"],
                "summary": "Returns details for an invitation.",
                "operationId": "get_v3_groups_group_id_invitations_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": ["Groups: User Invitations"],
                "summary": "Updates an existing user invitation for the selected group.",
                "operationId": "put_v3_groups_group_id_invitations_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "invitation[email]": {
                                        "type": "string",
                                        "description": "Email address where the invitation should be delivered."
                                    },
                                    "invitation[first_name]": {
                                        "type": "string",
                                        "description": "First name of the invitation recipient."
                                    },
                                    "invitation[last_name]": {
                                        "type": "string",
                                        "description": "Last name of the invitation recipient."
                                    },
                                    "invitation[send_immediately]": {
                                        "type": "boolean",
                                        "description": "Should the invitation be delivered immediately. Defaults to <tt>false</tt>."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "invitation[email]": {
                                        "type": "string",
                                        "description": "Email address where the invitation should be delivered."
                                    },
                                    "invitation[first_name]": {
                                        "type": "string",
                                        "description": "First name of the invitation recipient."
                                    },
                                    "invitation[last_name]": {
                                        "type": "string",
                                        "description": "Last name of the invitation recipient."
                                    },
                                    "invitation[send_immediately]": {
                                        "type": "boolean",
                                        "description": "Should the invitation be delivered immediately. Defaults to <tt>false</tt>."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Groups: User Invitations"],
                "summary": "Deletes a user invitation for the selected group. Renders the invitation invalid.",
                "operationId": "delete_v3_groups_group_id_invitations_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Groups: User Invitations"],
                "summary": "Updates an existing user invitation for the selected group.",
                "operationId": "patch_v3_groups_group_id_invitations_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "invitation[email]": {
                                        "type": "string",
                                        "description": "Email address where the invitation should be delivered."
                                    },
                                    "invitation[first_name]": {
                                        "type": "string",
                                        "description": "First name of the invitation recipient."
                                    },
                                    "invitation[last_name]": {
                                        "type": "string",
                                        "description": "Last name of the invitation recipient."
                                    },
                                    "invitation[send_immediately]": {
                                        "type": "boolean",
                                        "description": "Should the invitation be delivered immediately. Defaults to <tt>false</tt>."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "invitation[email]": {
                                        "type": "string",
                                        "description": "Email address where the invitation should be delivered."
                                    },
                                    "invitation[first_name]": {
                                        "type": "string",
                                        "description": "First name of the invitation recipient."
                                    },
                                    "invitation[last_name]": {
                                        "type": "string",
                                        "description": "Last name of the invitation recipient."
                                    },
                                    "invitation[send_immediately]": {
                                        "type": "boolean",
                                        "description": "Should the invitation be delivered immediately. Defaults to <tt>false</tt>."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/invitations/{invitation_id}/reminders": {
            "post": {
                "tags": ["Groups: User Invitation Reminders"],
                "summary": "Re-send an invitation to join the selected group.",
                "operationId": "post_v3_groups_group_id_invitations_invitation_id_reminders",
                "parameters": [{
                    "name": "invitation_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/messages/share-group": {
            "post": {
                "tags": ["Group sharing"],
                "summary": "Sends a message in order to share a group with someone",
                "operationId": "post_v3_groups_group_id_messages_share-group",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["message[group_id]", "message[message_method]", "message[to]"],
                                "properties": {
                                    "message[group_id]": {
                                        "type": "string",
                                        "description": "The id of the group to share"
                                    },
                                    "message[message_method]": {
                                        "type": "string",
                                        "description": "How the message is to be sent",
                                        "enum": ["email", "sms"]
                                    },
                                    "message[to]": {
                                        "type": "string",
                                        "description": "The phone number or email address of the recipient"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["message[group_id]", "message[message_method]", "message[to]"],
                                "properties": {
                                    "message[group_id]": {
                                        "type": "string",
                                        "description": "The id of the group to share"
                                    },
                                    "message[message_method]": {
                                        "type": "string",
                                        "description": "How the message is to be sent",
                                        "enum": ["email", "sms"]
                                    },
                                    "message[to]": {
                                        "type": "string",
                                        "description": "The phone number or email address of the recipient"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/programs": {
            "get": {
                "tags": ["Groups: Programs"],
                "summary": "Returns a list of programs available to the group.",
                "operationId": "get_v3_groups_group_id_programs",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/programs/{id}": {
            "get": {
                "tags": ["Groups: Programs"],
                "summary": "Returns details of the selected program.",
                "operationId": "get_v3_groups_group_id_programs_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/programs/{program_id}/users": {
            "get": {
                "tags": ["Groups: Program Users"],
                "summary": "Returns a list of users with access to the program.",
                "operationId": "get_v3_groups_group_id_programs_program_id_users",
                "parameters": [{
                    "name": "program_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "q[text]",
                    "in": "query",
                    "description": "Query to search user's first or last name",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "q[employ_state]",
                    "in": "query",
                    "description": "Filter the results returned by the user's employment status with the group.",
                    "schema": {
                        "type": "string",
                        "enum": ["is_active", "is_inactive", "any"]
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/programs/{program_id}/users/{id}": {
            "put": {
                "tags": ["Groups: Program Users"],
                "summary": "Updates a user's access to the selected program.",
                "operationId": "put_v3_groups_group_id_programs_program_id_users_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "program_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Groups: Program Users"],
                "summary": "Removes a user from the selected program.",
                "operationId": "delete_v3_groups_group_id_programs_program_id_users_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "program_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Groups: Program Users"],
                "summary": "Updates a user's access to the selected program.",
                "operationId": "patch_v3_groups_group_id_programs_program_id_users_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "program_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/closed": {
            "get": {
                "tags": ["Groups: Closed Referrals"],
                "summary": "Return a list of closed Referrals",
                "operationId": "get_v3_groups_group_id_referrals_closed",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/drafts": {
            "get": {
                "tags": ["Groups: Draft Referrals"],
                "summary": "Returns a list of draft referrals for the Group.",
                "operationId": "get_v3_groups_group_id_referrals_drafts",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/drafts/{id}": {
            "get": {
                "tags": ["Groups: Draft Referrals"],
                "summary": "Returns details for the selected draft referral.",
                "operationId": "get_v3_groups_group_id_referrals_drafts_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": ["Groups: Draft Referrals"],
                "summary": "Updates the details of the selected referral.",
                "operationId": "put_v3_groups_group_id_referrals_drafts_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "referral[description]": {
                                        "type": "string",
                                        "description": "Referral notes or description."
                                    },
                                    "referral[referred_by_network_id]": {
                                        "type": "string",
                                        "description": "Network from which the referral will be sent."
                                    },
                                    "referral[referred_to_network_id]": {
                                        "type": "string",
                                        "description": "Network to which the referral will be sent."
                                    },
                                    "referral[service_type]": {
                                        "type": "string",
                                        "description": "Service type for the referral."
                                    },
                                    "referral[documents]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "referral[description]": {
                                        "type": "string",
                                        "description": "Referral notes or description."
                                    },
                                    "referral[referred_by_network_id]": {
                                        "type": "string",
                                        "description": "Network from which the referral will be sent."
                                    },
                                    "referral[referred_to_network_id]": {
                                        "type": "string",
                                        "description": "Network to which the referral will be sent."
                                    },
                                    "referral[service_type]": {
                                        "type": "string",
                                        "description": "Service type for the referral."
                                    },
                                    "referral[documents]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Groups: Draft Referrals"],
                "summary": "Deletes the selected draft referral.",
                "operationId": "delete_v3_groups_group_id_referrals_drafts_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Groups: Draft Referrals"],
                "summary": "Updates the details of the selected referral.",
                "operationId": "patch_v3_groups_group_id_referrals_drafts_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "referral[description]": {
                                        "type": "string",
                                        "description": "Referral notes or description."
                                    },
                                    "referral[referred_by_network_id]": {
                                        "type": "string",
                                        "description": "Network from which the referral will be sent."
                                    },
                                    "referral[referred_to_network_id]": {
                                        "type": "string",
                                        "description": "Network to which the referral will be sent."
                                    },
                                    "referral[service_type]": {
                                        "type": "string",
                                        "description": "Service type for the referral."
                                    },
                                    "referral[documents]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "referral[description]": {
                                        "type": "string",
                                        "description": "Referral notes or description."
                                    },
                                    "referral[referred_by_network_id]": {
                                        "type": "string",
                                        "description": "Network from which the referral will be sent."
                                    },
                                    "referral[referred_to_network_id]": {
                                        "type": "string",
                                        "description": "Network to which the referral will be sent."
                                    },
                                    "referral[service_type]": {
                                        "type": "string",
                                        "description": "Service type for the referral."
                                    },
                                    "referral[documents]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/open-channel": {
            "get": {
                "tags": ["Groups: Open Channel referrals"],
                "summary": "Returns a list of referrals which were neither sent nor received by the Coordination Center.",
                "operationId": "get_v3_groups_group_id_referrals_open-channel",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/open-channel/accepted": {
            "get": {
                "tags": ["Groups: Open Channel referrals"],
                "summary": "Returns a list of referrals which were neither sent nor received by the Coordination Center.",
                "operationId": "get_v3_groups_group_id_referrals_open-channel_accepted",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/open-channel/auto-recalled": {
            "get": {
                "tags": ["Groups: Open Channel referrals"],
                "summary": "Returns a list of referrals which were neither sent nor received by the Coordination Center.",
                "operationId": "get_v3_groups_group_id_referrals_open-channel_auto-recalled",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/open-channel/awaiting-response": {
            "get": {
                "tags": ["Groups: Open Channel referrals"],
                "summary": "Returns a list of referrals which were neither sent nor received by the Coordination Center.",
                "operationId": "get_v3_groups_group_id_referrals_open-channel_awaiting-response",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/open-channel/closed": {
            "get": {
                "tags": ["Groups: Open Channel referrals"],
                "summary": "Returns a list of referrals which were neither sent nor received by the Coordination Center.",
                "operationId": "get_v3_groups_group_id_referrals_open-channel_closed",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/open-channel/declined-consent": {
            "get": {
                "tags": ["Groups: Open Channel referrals"],
                "summary": "Returns a list of referrals which were neither sent nor received by the Coordination Center.",
                "operationId": "get_v3_groups_group_id_referrals_open-channel_declined-consent",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/open-channel/in-review": {
            "get": {
                "tags": ["Groups: Open Channel referrals"],
                "summary": "Returns a list of referrals which were neither sent nor received by the Coordination Center.",
                "operationId": "get_v3_groups_group_id_referrals_open-channel_in-review",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/open-channel/pending-consent": {
            "get": {
                "tags": ["Groups: Open Channel referrals"],
                "summary": "Returns a list of referrals which were neither sent nor received by the Coordination Center.",
                "operationId": "get_v3_groups_group_id_referrals_open-channel_pending-consent",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/open-channel/recalled": {
            "get": {
                "tags": ["Groups: Open Channel referrals"],
                "summary": "Returns a list of referrals which were neither sent nor received by the Coordination Center.",
                "operationId": "get_v3_groups_group_id_referrals_open-channel_recalled",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/open-channel/recalled-or-auto-recalled": {
            "get": {
                "tags": ["Groups: Open Channel referrals"],
                "summary": "Returns a list of referrals which were neither sent nor received by the Coordination Center.",
                "operationId": "get_v3_groups_group_id_referrals_open-channel_recalled-or-auto-recalled",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/open-channel/rejected": {
            "get": {
                "tags": ["Groups: Open Channel referrals"],
                "summary": "Returns a list of referrals which were neither sent nor received by the Coordination Center.",
                "operationId": "get_v3_groups_group_id_referrals_open-channel_rejected",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/received": {
            "get": {
                "tags": ["Groups: Referrals Received"],
                "summary": "Returns a list of referrals received by the Group.",
                "operationId": "get_v3_groups_group_id_referrals_received",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/received/in-review": {
            "get": {
                "tags": ["Groups: Referrals Received"],
                "summary": "Returns a list of referrals received by the Group.",
                "operationId": "get_v3_groups_group_id_referrals_received_in-review",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/received/pending": {
            "get": {
                "tags": ["Groups: Referrals Received"],
                "summary": "Returns a list of referrals received by the Group.",
                "operationId": "get_v3_groups_group_id_referrals_received_pending",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/received/pending-consent": {
            "get": {
                "tags": ["Groups: Referrals Received"],
                "summary": "Returns a list of referrals received by the Group.",
                "operationId": "get_v3_groups_group_id_referrals_received_pending-consent",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/received/pending-or-accepted-consent": {
            "get": {
                "tags": ["Groups: Referrals Received"],
                "summary": "Returns a list of referrals received by the Group.",
                "operationId": "get_v3_groups_group_id_referrals_received_pending-or-accepted-consent",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/sent": {
            "get": {
                "tags": ["Groups: Referrals Sent"],
                "summary": "Returns a list of referrals sent by the Group.",
                "operationId": "get_v3_groups_group_id_referrals_sent",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/sent/accepted": {
            "get": {
                "tags": ["Groups: Referrals Sent"],
                "summary": "Returns a list of referrals sent by the Group.",
                "operationId": "get_v3_groups_group_id_referrals_sent_accepted",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/sent/auto-recalled": {
            "get": {
                "tags": ["Groups: Referrals Sent"],
                "summary": "Returns a list of referrals sent by the Group.",
                "operationId": "get_v3_groups_group_id_referrals_sent_auto-recalled",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/sent/awaiting-response": {
            "get": {
                "tags": ["Groups: Referrals Sent"],
                "summary": "Returns a list of referrals sent by the Group.",
                "operationId": "get_v3_groups_group_id_referrals_sent_awaiting-response",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/sent/closed": {
            "get": {
                "tags": ["Groups: Referrals Sent"],
                "summary": "Returns a list of referrals sent by the Group.",
                "operationId": "get_v3_groups_group_id_referrals_sent_closed",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/sent/declined-consent": {
            "get": {
                "tags": ["Groups: Referrals Sent"],
                "summary": "Returns a list of referrals sent by the Group.",
                "operationId": "get_v3_groups_group_id_referrals_sent_declined-consent",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/sent/in-review": {
            "get": {
                "tags": ["Groups: Referrals Sent"],
                "summary": "Returns a list of referrals sent by the Group.",
                "operationId": "get_v3_groups_group_id_referrals_sent_in-review",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/sent/pending-consent": {
            "get": {
                "tags": ["Groups: Referrals Sent"],
                "summary": "Returns a list of referrals sent by the Group.",
                "operationId": "get_v3_groups_group_id_referrals_sent_pending-consent",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/sent/recalled": {
            "get": {
                "tags": ["Groups: Referrals Sent"],
                "summary": "Returns a list of referrals sent by the Group.",
                "operationId": "get_v3_groups_group_id_referrals_sent_recalled",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/sent/recalled-or-auto-recalled": {
            "get": {
                "tags": ["Groups: Referrals Sent"],
                "summary": "Returns a list of referrals sent by the Group.",
                "operationId": "get_v3_groups_group_id_referrals_sent_recalled-or-auto-recalled",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/sent/rejected": {
            "get": {
                "tags": ["Groups: Referrals Sent"],
                "summary": "Returns a list of referrals sent by the Group.",
                "operationId": "get_v3_groups_group_id_referrals_sent_rejected",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/{id}": {
            "get": {
                "tags": ["Groups: Referrals"],
                "summary": "Returns details for the selected referral.",
                "operationId": "get_v3_groups_group_id_referrals_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": ["Groups: Referrals"],
                "summary": "Updates the details of the selected referral.",
                "operationId": "put_v3_groups_group_id_referrals_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "referral[description]": {
                                        "type": "string",
                                        "description": "Referral notes or description."
                                    },
                                    "referral[referred_by_network_id]": {
                                        "type": "string",
                                        "description": "Network from which the referral will be sent."
                                    },
                                    "referral[referred_to_network_id]": {
                                        "type": "string",
                                        "description": "Network to which the referral will be sent."
                                    },
                                    "referral[service_type]": {
                                        "type": "string",
                                        "description": "Service type for the referral."
                                    },
                                    "referral[documents]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "referral[description]": {
                                        "type": "string",
                                        "description": "Referral notes or description."
                                    },
                                    "referral[referred_by_network_id]": {
                                        "type": "string",
                                        "description": "Network from which the referral will be sent."
                                    },
                                    "referral[referred_to_network_id]": {
                                        "type": "string",
                                        "description": "Network to which the referral will be sent."
                                    },
                                    "referral[service_type]": {
                                        "type": "string",
                                        "description": "Service type for the referral."
                                    },
                                    "referral[documents]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Groups: Referrals"],
                "summary": "Updates the details of the selected referral.",
                "operationId": "patch_v3_groups_group_id_referrals_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "referral[description]": {
                                        "type": "string",
                                        "description": "Referral notes or description."
                                    },
                                    "referral[referred_by_network_id]": {
                                        "type": "string",
                                        "description": "Network from which the referral will be sent."
                                    },
                                    "referral[referred_to_network_id]": {
                                        "type": "string",
                                        "description": "Network to which the referral will be sent."
                                    },
                                    "referral[service_type]": {
                                        "type": "string",
                                        "description": "Service type for the referral."
                                    },
                                    "referral[documents]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "referral[description]": {
                                        "type": "string",
                                        "description": "Referral notes or description."
                                    },
                                    "referral[referred_by_network_id]": {
                                        "type": "string",
                                        "description": "Network from which the referral will be sent."
                                    },
                                    "referral[referred_to_network_id]": {
                                        "type": "string",
                                        "description": "Network to which the referral will be sent."
                                    },
                                    "referral[service_type]": {
                                        "type": "string",
                                        "description": "Service type for the referral."
                                    },
                                    "referral[documents]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/{referral_id}/activity-stream/events": {
            "get": {
                "tags": ["Referrals: Timeline Events"],
                "summary": "Returns a list of events for the selected Contact.",
                "description": "\n<p>Activity Stream or Timeline events are returned loosely based on the\nActivity Stream specification (<a\nhref=\"http://activitystrea.ms\">activitystrea.ms</a>).</p>\n\n<p>Available <code>verb</code> values include: <code>accept</code>,\n<code>add</code>, <code>assign</code>, <code>close</code>,\n<code>complete</code>, <code>create</code>, <code>delete</code>,\n<code>deny</code>, <code>join</code>, <code>leave</code>,\n<code>open</code>, <code>post</code>, <code>replace</code>,\n<code>retract</code>, <code>save</code>, <code>send</code>, and\n<code>update</code>.</p>\n\n<p>Use the verb, object, and target values to determine the event that\noccurred.</p>\n",
                "operationId": "get_v3_groups_group_id_referrals_referral_id_activity-stream_events",
                "parameters": [{
                    "name": "referral_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/{referral_id}/activity-stream/events/filter": {
            "post": {
                "tags": ["Referrals: Filter Timeline Events"],
                "summary": "Returns a list of filtered events.",
                "description": "\n<p>Filtered activity stream or timeline events are returned loosely based on\nthe Activity Stream specification (<a\nhref=\"http://activitystrea.ms\">activitystrea.ms</a>).</p>\n\n<p>Available <code>verb</code> values include: <code>accept</code>,\n<code>add</code>, <code>assign</code>, <code>close</code>,\n<code>complete</code>, <code>create</code>, <code>delete</code>,\n<code>deny</code>, <code>join</code>, <code>leave</code>,\n<code>open</code>, <code>post</code>, <code>replace</code>,\n<code>retract</code>, <code>save</code>, <code>send</code>, and\n<code>update</code>.</p>\n\n<p>Use the verb, object, and target values to determine the event that\noccurred.</p>\n",
                "operationId": "post_v3_groups_group_id_referrals_referral_id_activity-stream_events_filter",
                "parameters": [{
                    "name": "referral_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "q[filter_names]": {
                                        "type": "string",
                                        "description": "Name of filter to be appliied",
                                        "enum": ["client_updates", "closed_records", "notes", "record_updates", "network_updates", "care_team"]
                                    },
                                    "page": {
                                        "type": "number",
                                        "description": "The page of results to be returned."
                                    },
                                    "per": {
                                        "type": "number",
                                        "description": "The number of records to be returned per page."
                                    },
                                    "sord": {
                                        "type": "string",
                                        "description": "The order to sort the results.",
                                        "enum": ["asc", "desc"]
                                    },
                                    "sidx": {
                                        "type": "string",
                                        "description": "The attribute to sort the results by."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "q[filter_names]": {
                                        "type": "string",
                                        "description": "Name of filter to be appliied",
                                        "enum": ["client_updates", "closed_records", "notes", "record_updates", "network_updates", "care_team"]
                                    },
                                    "page": {
                                        "type": "number",
                                        "description": "The page of results to be returned."
                                    },
                                    "per": {
                                        "type": "number",
                                        "description": "The number of records to be returned per page."
                                    },
                                    "sord": {
                                        "type": "string",
                                        "description": "The order to sort the results.",
                                        "enum": ["asc", "desc"]
                                    },
                                    "sidx": {
                                        "type": "string",
                                        "description": "The attribute to sort the results by."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/{referral_id}/close": {
            "put": {
                "tags": ["Groups: Closed Referrals"],
                "summary": "Set the selected referral to closed and create a closing node",
                "operationId": "put_v3_groups_group_id_referrals_referral_id_close",
                "parameters": [{
                    "name": "referral_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["closing[outcome_id]", "closing[status]"],
                                "properties": {
                                    "closing[outcome_id]": {
                                        "type": "string",
                                        "description": "The id of the outcome this closing is associated with"
                                    },
                                    "closing[status]": {
                                        "type": "string",
                                        "description": "The status of the case; either `resolved` or `unresolved`.",
                                        "enum": ["resolved", "unresolved"]
                                    },
                                    "closing[note]": {
                                        "type": "string",
                                        "description": "A note pertaining to the closing"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["closing[outcome_id]", "closing[status]"],
                                "properties": {
                                    "closing[outcome_id]": {
                                        "type": "string",
                                        "description": "The id of the outcome this closing is associated with"
                                    },
                                    "closing[status]": {
                                        "type": "string",
                                        "description": "The status of the case; either `resolved` or `unresolved`.",
                                        "enum": ["resolved", "unresolved"]
                                    },
                                    "closing[note]": {
                                        "type": "string",
                                        "description": "A note pertaining to the closing"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Groups: Closed Referrals"],
                "summary": "Set the selected referral to closed and create a closing node",
                "operationId": "patch_v3_groups_group_id_referrals_referral_id_close",
                "parameters": [{
                    "name": "referral_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["closing[outcome_id]", "closing[status]"],
                                "properties": {
                                    "closing[outcome_id]": {
                                        "type": "string",
                                        "description": "The id of the outcome this closing is associated with"
                                    },
                                    "closing[status]": {
                                        "type": "string",
                                        "description": "The status of the case; either `resolved` or `unresolved`.",
                                        "enum": ["resolved", "unresolved"]
                                    },
                                    "closing[note]": {
                                        "type": "string",
                                        "description": "A note pertaining to the closing"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["closing[outcome_id]", "closing[status]"],
                                "properties": {
                                    "closing[outcome_id]": {
                                        "type": "string",
                                        "description": "The id of the outcome this closing is associated with"
                                    },
                                    "closing[status]": {
                                        "type": "string",
                                        "description": "The status of the case; either `resolved` or `unresolved`.",
                                        "enum": ["resolved", "unresolved"]
                                    },
                                    "closing[note]": {
                                        "type": "string",
                                        "description": "A note pertaining to the closing"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/{referral_id}/contact": {
            "get": {
                "tags": ["Groups: Referral Contact"],
                "summary": "Returns details for the contact connected to the selected referral.",
                "operationId": "get_v3_groups_group_id_referrals_referral_id_contact",
                "parameters": [{
                    "name": "referral_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": ["Groups: Referral Contact"],
                "summary": "Updates a contact.",
                "operationId": "put_v3_groups_group_id_referrals_referral_id_contact",
                "parameters": [{
                    "name": "referral_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "contact[first_name]": {
                                        "type": "string",
                                        "description": "Contact's first name."
                                    },
                                    "contact[last_name]": {
                                        "type": "string",
                                        "description": "Contact's last name."
                                    },
                                    "contact[email]": {
                                        "type": "string",
                                        "description": "Contact's email address."
                                    },
                                    "contact[date_of_birth]": {
                                        "type": "number",
                                        "description": "Unix (epoch) timestamp representing the contact's date of birth."
                                    },
                                    "contact[gender]": {
                                        "type": "string",
                                        "description": "Contact's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "contact[citizenship]": {
                                        "type": "string",
                                        "description": "Contact's specified citizenship.",
                                        "enum": ["us-citizen", "us-national", "lawful-permanent-resident", "other", "undisclosed"]
                                    },
                                    "contact[ethnicity]": {
                                        "type": "string",
                                        "description": "Contact's specified ethnicity.",
                                        "enum": ["hispanic-or-latino", "not-hispanic-or-latino", "undisclosed"]
                                    },
                                    "contact[marital_status]": {
                                        "type": "string",
                                        "description": "Contact's specified marital status.",
                                        "enum": ["divorced", "domestic_partner", "married-civil-union", "single/never-married", "separated", "undisclosed", "widowed"]
                                    },
                                    "contact[race]": {
                                        "type": "string",
                                        "description": "Contact's specified race.",
                                        "enum": ["american-indian-alaska-native", "asian", "black-african-american", "native-hawaiian-or-pacific-islander", "other-race", "undisclosed", "white"]
                                    },
                                    "contact[email_address]": {
                                        "type": "string",
                                        "description": "Contact's primary email address."
                                    },
                                    "contact[preferred_first_name]": {
                                        "type": "string",
                                        "description": "Contact's preferred first name."
                                    },
                                    "contact[title]": {
                                        "type": "string",
                                        "description": "Contact's title.",
                                        "enum": ["Mr.", "Miss", "Mrs.", "Ms.", "Dr."]
                                    },
                                    "contact[middle_name_initial]": {
                                        "type": "string",
                                        "description": "Contact's middle name or initial."
                                    },
                                    "contact[suffix]": {
                                        "type": "string",
                                        "description": "Contact's suffix.",
                                        "enum": ["Jr.", "Sr.", "III", "IV", "V", "Esq.", "Ph.D"]
                                    },
                                    "contact[nicknames]": {
                                        "type": "array",
                                        "description": "Contact's nicknames.",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[email_addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[phone_numbers]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[military][affiliation]": {
                                        "type": "string",
                                        "description": "Military affiliation",
                                        "enum": ["military_member_or_veteran", "spouse", "widow", "family_member", "caregiver", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][current_status]": {
                                        "type": "string",
                                        "description": "Current military status",
                                        "enum": ["active_duty", "national_guard", "reserve", "retiree", "veteran", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][currently_transitioning]": {
                                        "type": "string",
                                        "description": "Is the contact currently transitioning?",
                                        "enum": ["yes_12mos_before", "yes_12mos_after", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][at_least_one_day_active_duty]": {
                                        "type": "string",
                                        "description": "Has at least one day of active duty outside of basic training?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][branch]": {
                                        "type": "string",
                                        "description": "Branch of service",
                                        "enum": ["air_force", "army", "coast_guard", "marines", "navy", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_era]": {
                                        "type": "string",
                                        "description": "Service era",
                                        "enum": ["post_911", "persian_gulf", "post_vietnam", "vietnam", "post_korean", "korean_war", "pre_korean", "ww2", "merchant_marine", "ww1", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][entry_date]": {
                                        "type": "number",
                                        "description": "Date of entry"
                                    },
                                    "contact[military][exit_date]": {
                                        "type": "number",
                                        "description": "Date of exit"
                                    },
                                    "contact[military][deployed]": {
                                        "type": "string",
                                        "description": "Deployed?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][deployment_starts_at]": {
                                        "type": "number",
                                        "description": "Deployment start date"
                                    },
                                    "contact[military][deployment_ends_at]": {
                                        "type": "number",
                                        "description": "Deployment end date"
                                    },
                                    "contact[military][discharge_type]": {
                                        "type": "string",
                                        "description": "Discharge type",
                                        "enum": ["honorable", "general", "other_than_honorable", "bad_conduct", "dishonorable", "uncharacterized", "other", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][discharged_due_to_disability]": {
                                        "type": "string",
                                        "description": "Discharged or retired from military service for a disability incurred in the line of duty?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_connected_disability]": {
                                        "type": "string",
                                        "description": "Has VA-rated Service-Connected Disability?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_connected_disability_rating]": {
                                        "type": "string",
                                        "description": "Service-Connected Disability Rating",
                                        "enum": ["0", "10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][proof_of_veteran_status]": {
                                        "type": "string",
                                        "description": "Have proof of veteran status?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][proof_type]": {
                                        "type": "string",
                                        "description": "Proof type",
                                        "enum": ["dd214", "va_id", "statement_of_service", "retiree_id", "drivers_license", "military_id", "other", "prefer_not_to_disclose"]
                                    },
                                    "contact[data]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "contact[first_name]": {
                                        "type": "string",
                                        "description": "Contact's first name."
                                    },
                                    "contact[last_name]": {
                                        "type": "string",
                                        "description": "Contact's last name."
                                    },
                                    "contact[email]": {
                                        "type": "string",
                                        "description": "Contact's email address."
                                    },
                                    "contact[date_of_birth]": {
                                        "type": "number",
                                        "description": "Unix (epoch) timestamp representing the contact's date of birth."
                                    },
                                    "contact[gender]": {
                                        "type": "string",
                                        "description": "Contact's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "contact[citizenship]": {
                                        "type": "string",
                                        "description": "Contact's specified citizenship.",
                                        "enum": ["us-citizen", "us-national", "lawful-permanent-resident", "other", "undisclosed"]
                                    },
                                    "contact[ethnicity]": {
                                        "type": "string",
                                        "description": "Contact's specified ethnicity.",
                                        "enum": ["hispanic-or-latino", "not-hispanic-or-latino", "undisclosed"]
                                    },
                                    "contact[marital_status]": {
                                        "type": "string",
                                        "description": "Contact's specified marital status.",
                                        "enum": ["divorced", "domestic_partner", "married-civil-union", "single/never-married", "separated", "undisclosed", "widowed"]
                                    },
                                    "contact[race]": {
                                        "type": "string",
                                        "description": "Contact's specified race.",
                                        "enum": ["american-indian-alaska-native", "asian", "black-african-american", "native-hawaiian-or-pacific-islander", "other-race", "undisclosed", "white"]
                                    },
                                    "contact[email_address]": {
                                        "type": "string",
                                        "description": "Contact's primary email address."
                                    },
                                    "contact[preferred_first_name]": {
                                        "type": "string",
                                        "description": "Contact's preferred first name."
                                    },
                                    "contact[title]": {
                                        "type": "string",
                                        "description": "Contact's title.",
                                        "enum": ["Mr.", "Miss", "Mrs.", "Ms.", "Dr."]
                                    },
                                    "contact[middle_name_initial]": {
                                        "type": "string",
                                        "description": "Contact's middle name or initial."
                                    },
                                    "contact[suffix]": {
                                        "type": "string",
                                        "description": "Contact's suffix.",
                                        "enum": ["Jr.", "Sr.", "III", "IV", "V", "Esq.", "Ph.D"]
                                    },
                                    "contact[nicknames]": {
                                        "type": "array",
                                        "description": "Contact's nicknames.",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[email_addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[phone_numbers]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[military][affiliation]": {
                                        "type": "string",
                                        "description": "Military affiliation",
                                        "enum": ["military_member_or_veteran", "spouse", "widow", "family_member", "caregiver", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][current_status]": {
                                        "type": "string",
                                        "description": "Current military status",
                                        "enum": ["active_duty", "national_guard", "reserve", "retiree", "veteran", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][currently_transitioning]": {
                                        "type": "string",
                                        "description": "Is the contact currently transitioning?",
                                        "enum": ["yes_12mos_before", "yes_12mos_after", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][at_least_one_day_active_duty]": {
                                        "type": "string",
                                        "description": "Has at least one day of active duty outside of basic training?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][branch]": {
                                        "type": "string",
                                        "description": "Branch of service",
                                        "enum": ["air_force", "army", "coast_guard", "marines", "navy", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_era]": {
                                        "type": "string",
                                        "description": "Service era",
                                        "enum": ["post_911", "persian_gulf", "post_vietnam", "vietnam", "post_korean", "korean_war", "pre_korean", "ww2", "merchant_marine", "ww1", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][entry_date]": {
                                        "type": "number",
                                        "description": "Date of entry"
                                    },
                                    "contact[military][exit_date]": {
                                        "type": "number",
                                        "description": "Date of exit"
                                    },
                                    "contact[military][deployed]": {
                                        "type": "string",
                                        "description": "Deployed?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][deployment_starts_at]": {
                                        "type": "number",
                                        "description": "Deployment start date"
                                    },
                                    "contact[military][deployment_ends_at]": {
                                        "type": "number",
                                        "description": "Deployment end date"
                                    },
                                    "contact[military][discharge_type]": {
                                        "type": "string",
                                        "description": "Discharge type",
                                        "enum": ["honorable", "general", "other_than_honorable", "bad_conduct", "dishonorable", "uncharacterized", "other", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][discharged_due_to_disability]": {
                                        "type": "string",
                                        "description": "Discharged or retired from military service for a disability incurred in the line of duty?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_connected_disability]": {
                                        "type": "string",
                                        "description": "Has VA-rated Service-Connected Disability?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_connected_disability_rating]": {
                                        "type": "string",
                                        "description": "Service-Connected Disability Rating",
                                        "enum": ["0", "10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][proof_of_veteran_status]": {
                                        "type": "string",
                                        "description": "Have proof of veteran status?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][proof_type]": {
                                        "type": "string",
                                        "description": "Proof type",
                                        "enum": ["dd214", "va_id", "statement_of_service", "retiree_id", "drivers_license", "military_id", "other", "prefer_not_to_disclose"]
                                    },
                                    "contact[data]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Groups: Referral Contact"],
                "summary": "Updates a contact.",
                "operationId": "patch_v3_groups_group_id_referrals_referral_id_contact",
                "parameters": [{
                    "name": "referral_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "contact[first_name]": {
                                        "type": "string",
                                        "description": "Contact's first name."
                                    },
                                    "contact[last_name]": {
                                        "type": "string",
                                        "description": "Contact's last name."
                                    },
                                    "contact[email]": {
                                        "type": "string",
                                        "description": "Contact's email address."
                                    },
                                    "contact[date_of_birth]": {
                                        "type": "number",
                                        "description": "Unix (epoch) timestamp representing the contact's date of birth."
                                    },
                                    "contact[gender]": {
                                        "type": "string",
                                        "description": "Contact's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "contact[citizenship]": {
                                        "type": "string",
                                        "description": "Contact's specified citizenship.",
                                        "enum": ["us-citizen", "us-national", "lawful-permanent-resident", "other", "undisclosed"]
                                    },
                                    "contact[ethnicity]": {
                                        "type": "string",
                                        "description": "Contact's specified ethnicity.",
                                        "enum": ["hispanic-or-latino", "not-hispanic-or-latino", "undisclosed"]
                                    },
                                    "contact[marital_status]": {
                                        "type": "string",
                                        "description": "Contact's specified marital status.",
                                        "enum": ["divorced", "domestic_partner", "married-civil-union", "single/never-married", "separated", "undisclosed", "widowed"]
                                    },
                                    "contact[race]": {
                                        "type": "string",
                                        "description": "Contact's specified race.",
                                        "enum": ["american-indian-alaska-native", "asian", "black-african-american", "native-hawaiian-or-pacific-islander", "other-race", "undisclosed", "white"]
                                    },
                                    "contact[email_address]": {
                                        "type": "string",
                                        "description": "Contact's primary email address."
                                    },
                                    "contact[preferred_first_name]": {
                                        "type": "string",
                                        "description": "Contact's preferred first name."
                                    },
                                    "contact[title]": {
                                        "type": "string",
                                        "description": "Contact's title.",
                                        "enum": ["Mr.", "Miss", "Mrs.", "Ms.", "Dr."]
                                    },
                                    "contact[middle_name_initial]": {
                                        "type": "string",
                                        "description": "Contact's middle name or initial."
                                    },
                                    "contact[suffix]": {
                                        "type": "string",
                                        "description": "Contact's suffix.",
                                        "enum": ["Jr.", "Sr.", "III", "IV", "V", "Esq.", "Ph.D"]
                                    },
                                    "contact[nicknames]": {
                                        "type": "array",
                                        "description": "Contact's nicknames.",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[email_addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[phone_numbers]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[military][affiliation]": {
                                        "type": "string",
                                        "description": "Military affiliation",
                                        "enum": ["military_member_or_veteran", "spouse", "widow", "family_member", "caregiver", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][current_status]": {
                                        "type": "string",
                                        "description": "Current military status",
                                        "enum": ["active_duty", "national_guard", "reserve", "retiree", "veteran", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][currently_transitioning]": {
                                        "type": "string",
                                        "description": "Is the contact currently transitioning?",
                                        "enum": ["yes_12mos_before", "yes_12mos_after", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][at_least_one_day_active_duty]": {
                                        "type": "string",
                                        "description": "Has at least one day of active duty outside of basic training?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][branch]": {
                                        "type": "string",
                                        "description": "Branch of service",
                                        "enum": ["air_force", "army", "coast_guard", "marines", "navy", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_era]": {
                                        "type": "string",
                                        "description": "Service era",
                                        "enum": ["post_911", "persian_gulf", "post_vietnam", "vietnam", "post_korean", "korean_war", "pre_korean", "ww2", "merchant_marine", "ww1", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][entry_date]": {
                                        "type": "number",
                                        "description": "Date of entry"
                                    },
                                    "contact[military][exit_date]": {
                                        "type": "number",
                                        "description": "Date of exit"
                                    },
                                    "contact[military][deployed]": {
                                        "type": "string",
                                        "description": "Deployed?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][deployment_starts_at]": {
                                        "type": "number",
                                        "description": "Deployment start date"
                                    },
                                    "contact[military][deployment_ends_at]": {
                                        "type": "number",
                                        "description": "Deployment end date"
                                    },
                                    "contact[military][discharge_type]": {
                                        "type": "string",
                                        "description": "Discharge type",
                                        "enum": ["honorable", "general", "other_than_honorable", "bad_conduct", "dishonorable", "uncharacterized", "other", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][discharged_due_to_disability]": {
                                        "type": "string",
                                        "description": "Discharged or retired from military service for a disability incurred in the line of duty?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_connected_disability]": {
                                        "type": "string",
                                        "description": "Has VA-rated Service-Connected Disability?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_connected_disability_rating]": {
                                        "type": "string",
                                        "description": "Service-Connected Disability Rating",
                                        "enum": ["0", "10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][proof_of_veteran_status]": {
                                        "type": "string",
                                        "description": "Have proof of veteran status?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][proof_type]": {
                                        "type": "string",
                                        "description": "Proof type",
                                        "enum": ["dd214", "va_id", "statement_of_service", "retiree_id", "drivers_license", "military_id", "other", "prefer_not_to_disclose"]
                                    },
                                    "contact[data]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "contact[first_name]": {
                                        "type": "string",
                                        "description": "Contact's first name."
                                    },
                                    "contact[last_name]": {
                                        "type": "string",
                                        "description": "Contact's last name."
                                    },
                                    "contact[email]": {
                                        "type": "string",
                                        "description": "Contact's email address."
                                    },
                                    "contact[date_of_birth]": {
                                        "type": "number",
                                        "description": "Unix (epoch) timestamp representing the contact's date of birth."
                                    },
                                    "contact[gender]": {
                                        "type": "string",
                                        "description": "Contact's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "contact[citizenship]": {
                                        "type": "string",
                                        "description": "Contact's specified citizenship.",
                                        "enum": ["us-citizen", "us-national", "lawful-permanent-resident", "other", "undisclosed"]
                                    },
                                    "contact[ethnicity]": {
                                        "type": "string",
                                        "description": "Contact's specified ethnicity.",
                                        "enum": ["hispanic-or-latino", "not-hispanic-or-latino", "undisclosed"]
                                    },
                                    "contact[marital_status]": {
                                        "type": "string",
                                        "description": "Contact's specified marital status.",
                                        "enum": ["divorced", "domestic_partner", "married-civil-union", "single/never-married", "separated", "undisclosed", "widowed"]
                                    },
                                    "contact[race]": {
                                        "type": "string",
                                        "description": "Contact's specified race.",
                                        "enum": ["american-indian-alaska-native", "asian", "black-african-american", "native-hawaiian-or-pacific-islander", "other-race", "undisclosed", "white"]
                                    },
                                    "contact[email_address]": {
                                        "type": "string",
                                        "description": "Contact's primary email address."
                                    },
                                    "contact[preferred_first_name]": {
                                        "type": "string",
                                        "description": "Contact's preferred first name."
                                    },
                                    "contact[title]": {
                                        "type": "string",
                                        "description": "Contact's title.",
                                        "enum": ["Mr.", "Miss", "Mrs.", "Ms.", "Dr."]
                                    },
                                    "contact[middle_name_initial]": {
                                        "type": "string",
                                        "description": "Contact's middle name or initial."
                                    },
                                    "contact[suffix]": {
                                        "type": "string",
                                        "description": "Contact's suffix.",
                                        "enum": ["Jr.", "Sr.", "III", "IV", "V", "Esq.", "Ph.D"]
                                    },
                                    "contact[nicknames]": {
                                        "type": "array",
                                        "description": "Contact's nicknames.",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[email_addresses]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[phone_numbers]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "contact[military][affiliation]": {
                                        "type": "string",
                                        "description": "Military affiliation",
                                        "enum": ["military_member_or_veteran", "spouse", "widow", "family_member", "caregiver", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][current_status]": {
                                        "type": "string",
                                        "description": "Current military status",
                                        "enum": ["active_duty", "national_guard", "reserve", "retiree", "veteran", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][currently_transitioning]": {
                                        "type": "string",
                                        "description": "Is the contact currently transitioning?",
                                        "enum": ["yes_12mos_before", "yes_12mos_after", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][at_least_one_day_active_duty]": {
                                        "type": "string",
                                        "description": "Has at least one day of active duty outside of basic training?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][branch]": {
                                        "type": "string",
                                        "description": "Branch of service",
                                        "enum": ["air_force", "army", "coast_guard", "marines", "navy", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_era]": {
                                        "type": "string",
                                        "description": "Service era",
                                        "enum": ["post_911", "persian_gulf", "post_vietnam", "vietnam", "post_korean", "korean_war", "pre_korean", "ww2", "merchant_marine", "ww1", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][entry_date]": {
                                        "type": "number",
                                        "description": "Date of entry"
                                    },
                                    "contact[military][exit_date]": {
                                        "type": "number",
                                        "description": "Date of exit"
                                    },
                                    "contact[military][deployed]": {
                                        "type": "string",
                                        "description": "Deployed?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][deployment_starts_at]": {
                                        "type": "number",
                                        "description": "Deployment start date"
                                    },
                                    "contact[military][deployment_ends_at]": {
                                        "type": "number",
                                        "description": "Deployment end date"
                                    },
                                    "contact[military][discharge_type]": {
                                        "type": "string",
                                        "description": "Discharge type",
                                        "enum": ["honorable", "general", "other_than_honorable", "bad_conduct", "dishonorable", "uncharacterized", "other", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][discharged_due_to_disability]": {
                                        "type": "string",
                                        "description": "Discharged or retired from military service for a disability incurred in the line of duty?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_connected_disability]": {
                                        "type": "string",
                                        "description": "Has VA-rated Service-Connected Disability?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][service_connected_disability_rating]": {
                                        "type": "string",
                                        "description": "Service-Connected Disability Rating",
                                        "enum": ["0", "10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][proof_of_veteran_status]": {
                                        "type": "string",
                                        "description": "Have proof of veteran status?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "contact[military][proof_type]": {
                                        "type": "string",
                                        "description": "Proof type",
                                        "enum": ["dd214", "va_id", "statement_of_service", "retiree_id", "drivers_license", "military_id", "other", "prefer_not_to_disclose"]
                                    },
                                    "contact[data]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/{referral_id}/contact/documents/assign": {
            "post": {
                "tags": ["Documents"],
                "summary": "Assign existing documents to provided resources",
                "operationId": "post_v3_groups_group_id_referrals_referral_id_contact_documents_assign",
                "parameters": [{
                    "name": "referral_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "options[attach_to_contact]": {
                                        "type": "boolean",
                                        "description": "A boolean specifying whether to attach documents to the contact"
                                    },
                                    "options[resource_ids]": {
                                        "type": "array",
                                        "description": "An array of ids for cases, referrals, intakes for a contact",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "document_ids": {
                                        "type": "array",
                                        "description": "The ids of existing documents",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "options[attach_to_contact]": {
                                        "type": "boolean",
                                        "description": "A boolean specifying whether to attach documents to the contact"
                                    },
                                    "options[resource_ids]": {
                                        "type": "array",
                                        "description": "An array of ids for cases, referrals, intakes for a contact",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "document_ids": {
                                        "type": "array",
                                        "description": "The ids of existing documents",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/{referral_id}/contact/forms/usage": {
            "get": {
                "tags": ["Referral: Forms Available for Use"],
                "summary": "Retrieve a complete group profile.",
                "operationId": "get_v3_groups_group_id_referrals_referral_id_contact_forms_usage",
                "parameters": [{
                    "name": "referral_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/{referral_id}/contact/forms/{form_id}/response": {
            "put": {
                "tags": ["Groups: Referral Contact Respond to Form"],
                "summary": "Upserts a contact's response to the specified form/assessment.",
                "operationId": "put_v3_groups_group_id_referrals_referral_id_contact_forms_form_id_response",
                "parameters": [{
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "referral_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Groups: Referral Contact Respond to Form"],
                "summary": "Upserts a contact's response to the specified form/assessment.",
                "operationId": "patch_v3_groups_group_id_referrals_referral_id_contact_forms_form_id_response",
                "parameters": [{
                    "name": "form_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "referral_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "data": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/{referral_id}/contact/forms/{id}": {
            "get": {
                "tags": ["Groups: Referral Contact Forms"],
                "summary": "Returns form details with any existing responses spliced into the question.",
                "operationId": "get_v3_groups_group_id_referrals_referral_id_contact_forms_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "referral_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/{referral_id}/contact/programs/{program_id}/enrollment": {
            "get": {
                "tags": ["Groups: Referral Contact Program Enrollment"],
                "summary": "Returns enrollment details for the contact and the selected program.",
                "operationId": "get_v3_groups_group_id_referrals_referral_id_contact_programs_program_id_enrollment",
                "parameters": [{
                    "name": "program_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "referral_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/{referral_id}/documents": {
            "get": {
                "tags": ["Referrals: Documents"],
                "summary": "Displays a list of all the documents attached.",
                "operationId": "get_v3_groups_group_id_referrals_referral_id_documents",
                "parameters": [{
                    "name": "referral_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/{referral_id}/documents/{id}": {
            "get": {
                "tags": ["Referrals: Documents"],
                "summary": "Displays a single document.",
                "operationId": "get_v3_groups_group_id_referrals_referral_id_documents_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "referral_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": ["Referrals: Documents"],
                "summary": "Updates a document.",
                "operationId": "put_v3_groups_group_id_referrals_referral_id_documents_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "referral_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["document[title]"],
                                "properties": {
                                    "document[title]": {
                                        "type": "string",
                                        "description": "The name associated with the document"
                                    },
                                    "attach_to_id": {
                                        "type": "string",
                                        "description": "The ID of the object to change the document attachment to."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["document[title]"],
                                "properties": {
                                    "document[title]": {
                                        "type": "string",
                                        "description": "The name associated with the document"
                                    },
                                    "attach_to_id": {
                                        "type": "string",
                                        "description": "The ID of the object to change the document attachment to."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Referrals: Documents"],
                "summary": "Deletes an attached document.",
                "operationId": "delete_v3_groups_group_id_referrals_referral_id_documents_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "referral_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Referrals: Documents"],
                "summary": "Updates a document.",
                "operationId": "patch_v3_groups_group_id_referrals_referral_id_documents_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "referral_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["document[title]"],
                                "properties": {
                                    "document[title]": {
                                        "type": "string",
                                        "description": "The name associated with the document"
                                    },
                                    "attach_to_id": {
                                        "type": "string",
                                        "description": "The ID of the object to change the document attachment to."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["document[title]"],
                                "properties": {
                                    "document[title]": {
                                        "type": "string",
                                        "description": "The name associated with the document"
                                    },
                                    "attach_to_id": {
                                        "type": "string",
                                        "description": "The ID of the object to change the document attachment to."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/{referral_id}/hold": {
            "put": {
                "tags": ["Groups::Referrals: Hold"],
                "summary": "Places the Referral into a status of IN_REVIEW",
                "operationId": "put_v3_groups_group_id_referrals_referral_id_hold",
                "parameters": [{
                    "name": "referral_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "referral_hold[reason]": {
                                        "type": "string",
                                        "description": "A reason for the referral being put in review."
                                    },
                                    "referral_hold[note]": {
                                        "type": "string",
                                        "description": "A note concerning the referral being put in review."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "referral_hold[reason]": {
                                        "type": "string",
                                        "description": "A reason for the referral being put in review."
                                    },
                                    "referral_hold[note]": {
                                        "type": "string",
                                        "description": "A note concerning the referral being put in review."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Groups::Referrals: Hold"],
                "summary": "Places the Referral into a status of IN_REVIEW",
                "operationId": "patch_v3_groups_group_id_referrals_referral_id_hold",
                "parameters": [{
                    "name": "referral_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "referral_hold[reason]": {
                                        "type": "string",
                                        "description": "A reason for the referral being put in review."
                                    },
                                    "referral_hold[note]": {
                                        "type": "string",
                                        "description": "A note concerning the referral being put in review."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "referral_hold[reason]": {
                                        "type": "string",
                                        "description": "A reason for the referral being put in review."
                                    },
                                    "referral_hold[note]": {
                                        "type": "string",
                                        "description": "A note concerning the referral being put in review."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/{referral_id}/reassign": {
            "put": {
                "tags": ["Groups::Referrals: Reassign Program"],
                "summary": "Reassigns the referral to another program within the recipient group",
                "operationId": "put_v3_groups_group_id_referrals_referral_id_reassign",
                "parameters": [{
                    "name": "referral_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "referral[referred_to_program_id]": {
                                        "type": "string",
                                        "description": "ID of the Program to which the referral should be assigned"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "referral[referred_to_program_id]": {
                                        "type": "string",
                                        "description": "ID of the Program to which the referral should be assigned"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Groups::Referrals: Reassign Program"],
                "summary": "Reassigns the referral to another program within the recipient group",
                "operationId": "patch_v3_groups_group_id_referrals_referral_id_reassign",
                "parameters": [{
                    "name": "referral_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "referral[referred_to_program_id]": {
                                        "type": "string",
                                        "description": "ID of the Program to which the referral should be assigned"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "referral[referred_to_program_id]": {
                                        "type": "string",
                                        "description": "ID of the Program to which the referral should be assigned"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/{referral_id}/recall": {
            "put": {
                "tags": ["Groups::Referrals: Recall"],
                "summary": "Places the Referral into a status of RECALLED",
                "operationId": "put_v3_groups_group_id_referrals_referral_id_recall",
                "parameters": [{
                    "name": "referral_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "referral_recall[reason]": {
                                        "type": "string",
                                        "description": "A reason for the referral being recalled"
                                    },
                                    "referral_recall[note]": {
                                        "type": "string",
                                        "description": "A note concerning the referral being recalled"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "referral_recall[reason]": {
                                        "type": "string",
                                        "description": "A reason for the referral being recalled"
                                    },
                                    "referral_recall[note]": {
                                        "type": "string",
                                        "description": "A note concerning the referral being recalled"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Groups::Referrals: Recall"],
                "summary": "Places the Referral into a status of RECALLED",
                "operationId": "patch_v3_groups_group_id_referrals_referral_id_recall",
                "parameters": [{
                    "name": "referral_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "referral_recall[reason]": {
                                        "type": "string",
                                        "description": "A reason for the referral being recalled"
                                    },
                                    "referral_recall[note]": {
                                        "type": "string",
                                        "description": "A note concerning the referral being recalled"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "referral_recall[reason]": {
                                        "type": "string",
                                        "description": "A reason for the referral being recalled"
                                    },
                                    "referral_recall[note]": {
                                        "type": "string",
                                        "description": "A note concerning the referral being recalled"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/referrals/{referral_id}/referral-workers/primary": {
            "put": {
                "tags": ["Referrals: Primary Referral Worker"],
                "summary": "Update the primary referral worker for the selected referral.",
                "operationId": "put_v3_groups_group_id_referrals_referral_id_referral-workers_primary",
                "parameters": [{
                    "name": "referral_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["user_id"],
                                "properties": {
                                    "user_id": {
                                        "type": "string",
                                        "description": "The ID of the user to be set as the primary referral worker."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["user_id"],
                                "properties": {
                                    "user_id": {
                                        "type": "string",
                                        "description": "The ID of the user to be set as the primary referral worker."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Referrals: Primary Referral Worker"],
                "summary": "Update the primary referral worker for the selected referral.",
                "operationId": "patch_v3_groups_group_id_referrals_referral_id_referral-workers_primary",
                "parameters": [{
                    "name": "referral_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["user_id"],
                                "properties": {
                                    "user_id": {
                                        "type": "string",
                                        "description": "The ID of the user to be set as the primary referral worker."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["user_id"],
                                "properties": {
                                    "user_id": {
                                        "type": "string",
                                        "description": "The ID of the user to be set as the primary referral worker."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/screenings/{id}": {
            "get": {
                "tags": ["Groups: Screenings"],
                "summary": "Retrieve a screening for a group",
                "operationId": "get_v3_groups_group_id_screenings_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/search": {
            "post": {
                "tags": ["Search"],
                "summary": "Search the group using a keyword or phrase.",
                "operationId": "post_v3_groups_group_id_search",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["q[text]"],
                                "properties": {
                                    "q[text]": {
                                        "type": "string",
                                        "description": "Text to search the index for."
                                    },
                                    "q[include]": {
                                        "type": "string",
                                        "description": "An array of the types of models to include in the search. Defaults to \"any\".",
                                        "enum": ["any", "cases_servicecase", "contact", "document", "interactions_base", "referrals_referral"]
                                    },
                                    "v": {
                                        "type": "string",
                                        "description": "Indicates which version of search to execute. A value of \"v2\" indicates to use the \"grouped\" by type search type.",
                                        "enum": ["v1", "v2"]
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["q[text]"],
                                "properties": {
                                    "q[text]": {
                                        "type": "string",
                                        "description": "Text to search the index for."
                                    },
                                    "q[include]": {
                                        "type": "string",
                                        "description": "An array of the types of models to include in the search. Defaults to \"any\".",
                                        "enum": ["any", "cases_servicecase", "contact", "document", "interactions_base", "referrals_referral"]
                                    },
                                    "v": {
                                        "type": "string",
                                        "description": "Indicates which version of search to execute. A value of \"v2\" indicates to use the \"grouped\" by type search type.",
                                        "enum": ["v1", "v2"]
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/search/contacts/global": {
            "post": {
                "tags": ["Groups: Search -> Global Contacts"],
                "summary": "Search the group's contacts using a keyword or phrase.",
                "operationId": "post_v3_groups_group_id_search_contacts_global",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["q[first_name]", "q[last_name]"],
                                "properties": {
                                    "q[last_name]": {
                                        "type": "string",
                                        "description": "Last name of contact being queried."
                                    },
                                    "q[first_name]": {
                                        "type": "string",
                                        "description": "First name of the contact being queried."
                                    },
                                    "q[ssn]": {
                                        "type": "string",
                                        "description": "Complete Social Security Number of contact being queried. (not yet supported)"
                                    },
                                    "q[ssn_last4]": {
                                        "type": "string",
                                        "description": "Last 4 digits of Social Security Number of contact being queried. (not yet supported)"
                                    },
                                    "q[date_of_birth]": {
                                        "type": "string",
                                        "description": "UNIX timestamp representing the birth date of the contact being queried."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["q[first_name]", "q[last_name]"],
                                "properties": {
                                    "q[last_name]": {
                                        "type": "string",
                                        "description": "Last name of contact being queried."
                                    },
                                    "q[first_name]": {
                                        "type": "string",
                                        "description": "First name of the contact being queried."
                                    },
                                    "q[ssn]": {
                                        "type": "string",
                                        "description": "Complete Social Security Number of contact being queried. (not yet supported)"
                                    },
                                    "q[ssn_last4]": {
                                        "type": "string",
                                        "description": "Last 4 digits of Social Security Number of contact being queried. (not yet supported)"
                                    },
                                    "q[date_of_birth]": {
                                        "type": "string",
                                        "description": "UNIX timestamp representing the birth date of the contact being queried."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/service-types": {
            "get": {
                "tags": ["Groups: Service Types Offered"],
                "summary": "Returns all service types provided by the specified group.",
                "operationId": "get_v3_groups_group_id_service-types",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "q[group_id]",
                    "in": "query",
                    "description": "ID of group which should be used to filter results; defaults to current group",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "q[program_id]",
                    "in": "query",
                    "description": "ID of program which should be used to filter results",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/service-types/with-outcomes": {
            "get": {
                "tags": ["Groups: Service Types Offered along with Outcomes scope to the Group"],
                "summary": "Returns all service types with outcomes provided by the specified group.",
                "operationId": "get_v3_groups_group_id_service-types_with-outcomes",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/service-types/{service_type_id}/outcomes": {
            "get": {
                "tags": ["Groups Service Types: Outcomes"],
                "summary": "Returns all outcomes provided by the specified groups service_type.",
                "operationId": "get_v3_groups_group_id_service-types_service_type_id_outcomes",
                "parameters": [{
                    "name": "service_type_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/service-types/{service_type_id}/sub-types": {
            "get": {
                "tags": ["Groups: Service Types Offered: Sub-Types"],
                "summary": "Returns the list of sub-service/case types for the selected service/case type.",
                "operationId": "get_v3_groups_group_id_service-types_service_type_id_sub-types",
                "parameters": [{
                    "name": "service_type_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/service-types/{service_type_id}/with-outcomes": {
            "get": {
                "tags": ["Groups: Service Types Offered along with Outcomes scope to the Group"],
                "summary": "Returns a specific service type with outcomes provided by the specified group.",
                "operationId": "get_v3_groups_group_id_service-types_service_type_id_with-outcomes",
                "parameters": [{
                    "name": "service_type_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/user-contact-count": {
            "get": {
                "tags": ["Groups: Users With Contacts"],
                "summary": "Returns a list of users and a count of their contacts with open cases or referrals",
                "operationId": "get_v3_groups_group_id_user-contact-count",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/users": {
            "get": {
                "tags": ["Groups: Users"],
                "summary": "Returns a list of users that are part of the selected group.",
                "operationId": "get_v3_groups_group_id_users",
                "parameters": [{
                    "name": "user[profile][gender]",
                    "in": "query",
                    "description": "User's specified gender.",
                    "required": true,
                    "schema": {
                        "type": "string",
                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "q[text]",
                    "in": "query",
                    "description": "Query to search user's first or last name",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "q[employ_state]",
                    "in": "query",
                    "description": "Filter the results returned by the user's employment status with the group.",
                    "schema": {
                        "type": "string",
                        "enum": ["is_active", "is_inactive", "any"]
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "user[email]",
                    "in": "query",
                    "description": "User's email address.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "user[first_name]",
                    "in": "query",
                    "description": "User's first name.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "user[last_name]",
                    "in": "query",
                    "description": "User's last name.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "user[password]",
                    "in": "query",
                    "description": "User's preferred password, only if changing it.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "user[password_confirmation]",
                    "in": "query",
                    "description": "Confirmation of user's preferred password, only if changing it.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "user[profile][description]",
                    "in": "query",
                    "description": "User's profile description or bio text.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "user[work_title]",
                    "in": "query",
                    "description": "User's work title or position name.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_licenses",
                    "in": "query",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "network_licenses",
                    "in": "query",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "role_ids",
                    "in": "query",
                    "description": "Identifiers for the roles to assign to the user.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "post": {
                "tags": ["Groups: Users"],
                "summary": "Creates a new User, Connects it to Group and to a Groups::Role",
                "operationId": "post_v3_groups_group_id_users",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["user[profile][gender]"],
                                "properties": {
                                    "user[profile][gender]": {
                                        "type": "string",
                                        "description": "User's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "q[text]": {
                                        "type": "string",
                                        "description": "Query to search user's first or last name"
                                    },
                                    "q[employ_state]": {
                                        "type": "string",
                                        "description": "Filter the results returned by the user's employment status with the group.",
                                        "enum": ["is_active", "is_inactive", "any"]
                                    },
                                    "page": {
                                        "type": "number",
                                        "description": "The page of results to be returned."
                                    },
                                    "per": {
                                        "type": "number",
                                        "description": "The number of records to be returned per page."
                                    },
                                    "sord": {
                                        "type": "string",
                                        "description": "The order to sort the results.",
                                        "enum": ["asc", "desc"]
                                    },
                                    "sidx": {
                                        "type": "string",
                                        "description": "The attribute to sort the results by."
                                    },
                                    "user[email]": {
                                        "type": "string",
                                        "description": "User's email address."
                                    },
                                    "user[first_name]": {
                                        "type": "string",
                                        "description": "User's first name."
                                    },
                                    "user[last_name]": {
                                        "type": "string",
                                        "description": "User's last name."
                                    },
                                    "user[password]": {
                                        "type": "string",
                                        "description": "User's preferred password, only if changing it."
                                    },
                                    "user[password_confirmation]": {
                                        "type": "string",
                                        "description": "Confirmation of user's preferred password, only if changing it."
                                    },
                                    "user[profile][description]": {
                                        "type": "string",
                                        "description": "User's profile description or bio text."
                                    },
                                    "user[work_title]": {
                                        "type": "string",
                                        "description": "User's work title or position name."
                                    },
                                    "group_licenses": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "network_licenses": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "role_ids": {
                                        "type": "array",
                                        "description": "Identifiers for the roles to assign to the user.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["user[profile][gender]"],
                                "properties": {
                                    "user[profile][gender]": {
                                        "type": "string",
                                        "description": "User's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "q[text]": {
                                        "type": "string",
                                        "description": "Query to search user's first or last name"
                                    },
                                    "q[employ_state]": {
                                        "type": "string",
                                        "description": "Filter the results returned by the user's employment status with the group.",
                                        "enum": ["is_active", "is_inactive", "any"]
                                    },
                                    "page": {
                                        "type": "number",
                                        "description": "The page of results to be returned."
                                    },
                                    "per": {
                                        "type": "number",
                                        "description": "The number of records to be returned per page."
                                    },
                                    "sord": {
                                        "type": "string",
                                        "description": "The order to sort the results.",
                                        "enum": ["asc", "desc"]
                                    },
                                    "sidx": {
                                        "type": "string",
                                        "description": "The attribute to sort the results by."
                                    },
                                    "user[email]": {
                                        "type": "string",
                                        "description": "User's email address."
                                    },
                                    "user[first_name]": {
                                        "type": "string",
                                        "description": "User's first name."
                                    },
                                    "user[last_name]": {
                                        "type": "string",
                                        "description": "User's last name."
                                    },
                                    "user[password]": {
                                        "type": "string",
                                        "description": "User's preferred password, only if changing it."
                                    },
                                    "user[password_confirmation]": {
                                        "type": "string",
                                        "description": "Confirmation of user's preferred password, only if changing it."
                                    },
                                    "user[profile][description]": {
                                        "type": "string",
                                        "description": "User's profile description or bio text."
                                    },
                                    "user[work_title]": {
                                        "type": "string",
                                        "description": "User's work title or position name."
                                    },
                                    "group_licenses": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "network_licenses": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "role_ids": {
                                        "type": "array",
                                        "description": "Identifiers for the roles to assign to the user.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/users/{user_id}": {
            "get": {
                "tags": ["Groups: Users"],
                "summary": "Returns details for a user that is part of the selected group.",
                "operationId": "get_v3_groups_group_id_users_user_id",
                "parameters": [{
                    "name": "user_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": ["Groups: Users"],
                "summary": "Updates a User.",
                "operationId": "put_v3_groups_group_id_users_user_id",
                "parameters": [{
                    "name": "user_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["user[profile][gender]"],
                                "properties": {
                                    "user[profile][gender]": {
                                        "type": "string",
                                        "description": "User's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "q[text]": {
                                        "type": "string",
                                        "description": "Query to search user's first or last name"
                                    },
                                    "q[employ_state]": {
                                        "type": "string",
                                        "description": "Filter the results returned by the user's employment status with the group.",
                                        "enum": ["is_active", "is_inactive", "any"]
                                    },
                                    "page": {
                                        "type": "number",
                                        "description": "The page of results to be returned."
                                    },
                                    "per": {
                                        "type": "number",
                                        "description": "The number of records to be returned per page."
                                    },
                                    "sord": {
                                        "type": "string",
                                        "description": "The order to sort the results.",
                                        "enum": ["asc", "desc"]
                                    },
                                    "sidx": {
                                        "type": "string",
                                        "description": "The attribute to sort the results by."
                                    },
                                    "user[email]": {
                                        "type": "string",
                                        "description": "User's email address."
                                    },
                                    "user[first_name]": {
                                        "type": "string",
                                        "description": "User's first name."
                                    },
                                    "user[last_name]": {
                                        "type": "string",
                                        "description": "User's last name."
                                    },
                                    "user[password]": {
                                        "type": "string",
                                        "description": "User's preferred password, only if changing it."
                                    },
                                    "user[password_confirmation]": {
                                        "type": "string",
                                        "description": "Confirmation of user's preferred password, only if changing it."
                                    },
                                    "user[profile][description]": {
                                        "type": "string",
                                        "description": "User's profile description or bio text."
                                    },
                                    "user[work_title]": {
                                        "type": "string",
                                        "description": "User's work title or position name."
                                    },
                                    "group_licenses": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "network_licenses": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "role_ids": {
                                        "type": "array",
                                        "description": "Identifiers for the roles to assign to the user.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["user[profile][gender]"],
                                "properties": {
                                    "user[profile][gender]": {
                                        "type": "string",
                                        "description": "User's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "q[text]": {
                                        "type": "string",
                                        "description": "Query to search user's first or last name"
                                    },
                                    "q[employ_state]": {
                                        "type": "string",
                                        "description": "Filter the results returned by the user's employment status with the group.",
                                        "enum": ["is_active", "is_inactive", "any"]
                                    },
                                    "page": {
                                        "type": "number",
                                        "description": "The page of results to be returned."
                                    },
                                    "per": {
                                        "type": "number",
                                        "description": "The number of records to be returned per page."
                                    },
                                    "sord": {
                                        "type": "string",
                                        "description": "The order to sort the results.",
                                        "enum": ["asc", "desc"]
                                    },
                                    "sidx": {
                                        "type": "string",
                                        "description": "The attribute to sort the results by."
                                    },
                                    "user[email]": {
                                        "type": "string",
                                        "description": "User's email address."
                                    },
                                    "user[first_name]": {
                                        "type": "string",
                                        "description": "User's first name."
                                    },
                                    "user[last_name]": {
                                        "type": "string",
                                        "description": "User's last name."
                                    },
                                    "user[password]": {
                                        "type": "string",
                                        "description": "User's preferred password, only if changing it."
                                    },
                                    "user[password_confirmation]": {
                                        "type": "string",
                                        "description": "Confirmation of user's preferred password, only if changing it."
                                    },
                                    "user[profile][description]": {
                                        "type": "string",
                                        "description": "User's profile description or bio text."
                                    },
                                    "user[work_title]": {
                                        "type": "string",
                                        "description": "User's work title or position name."
                                    },
                                    "group_licenses": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "network_licenses": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "role_ids": {
                                        "type": "array",
                                        "description": "Identifiers for the roles to assign to the user.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Groups: Users"],
                "summary": "Updates a User.",
                "operationId": "patch_v3_groups_group_id_users_user_id",
                "parameters": [{
                    "name": "user_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["user[profile][gender]"],
                                "properties": {
                                    "user[profile][gender]": {
                                        "type": "string",
                                        "description": "User's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "q[text]": {
                                        "type": "string",
                                        "description": "Query to search user's first or last name"
                                    },
                                    "q[employ_state]": {
                                        "type": "string",
                                        "description": "Filter the results returned by the user's employment status with the group.",
                                        "enum": ["is_active", "is_inactive", "any"]
                                    },
                                    "page": {
                                        "type": "number",
                                        "description": "The page of results to be returned."
                                    },
                                    "per": {
                                        "type": "number",
                                        "description": "The number of records to be returned per page."
                                    },
                                    "sord": {
                                        "type": "string",
                                        "description": "The order to sort the results.",
                                        "enum": ["asc", "desc"]
                                    },
                                    "sidx": {
                                        "type": "string",
                                        "description": "The attribute to sort the results by."
                                    },
                                    "user[email]": {
                                        "type": "string",
                                        "description": "User's email address."
                                    },
                                    "user[first_name]": {
                                        "type": "string",
                                        "description": "User's first name."
                                    },
                                    "user[last_name]": {
                                        "type": "string",
                                        "description": "User's last name."
                                    },
                                    "user[password]": {
                                        "type": "string",
                                        "description": "User's preferred password, only if changing it."
                                    },
                                    "user[password_confirmation]": {
                                        "type": "string",
                                        "description": "Confirmation of user's preferred password, only if changing it."
                                    },
                                    "user[profile][description]": {
                                        "type": "string",
                                        "description": "User's profile description or bio text."
                                    },
                                    "user[work_title]": {
                                        "type": "string",
                                        "description": "User's work title or position name."
                                    },
                                    "group_licenses": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "network_licenses": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "role_ids": {
                                        "type": "array",
                                        "description": "Identifiers for the roles to assign to the user.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["user[profile][gender]"],
                                "properties": {
                                    "user[profile][gender]": {
                                        "type": "string",
                                        "description": "User's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "q[text]": {
                                        "type": "string",
                                        "description": "Query to search user's first or last name"
                                    },
                                    "q[employ_state]": {
                                        "type": "string",
                                        "description": "Filter the results returned by the user's employment status with the group.",
                                        "enum": ["is_active", "is_inactive", "any"]
                                    },
                                    "page": {
                                        "type": "number",
                                        "description": "The page of results to be returned."
                                    },
                                    "per": {
                                        "type": "number",
                                        "description": "The number of records to be returned per page."
                                    },
                                    "sord": {
                                        "type": "string",
                                        "description": "The order to sort the results.",
                                        "enum": ["asc", "desc"]
                                    },
                                    "sidx": {
                                        "type": "string",
                                        "description": "The attribute to sort the results by."
                                    },
                                    "user[email]": {
                                        "type": "string",
                                        "description": "User's email address."
                                    },
                                    "user[first_name]": {
                                        "type": "string",
                                        "description": "User's first name."
                                    },
                                    "user[last_name]": {
                                        "type": "string",
                                        "description": "User's last name."
                                    },
                                    "user[password]": {
                                        "type": "string",
                                        "description": "User's preferred password, only if changing it."
                                    },
                                    "user[password_confirmation]": {
                                        "type": "string",
                                        "description": "Confirmation of user's preferred password, only if changing it."
                                    },
                                    "user[profile][description]": {
                                        "type": "string",
                                        "description": "User's profile description or bio text."
                                    },
                                    "user[work_title]": {
                                        "type": "string",
                                        "description": "User's work title or position name."
                                    },
                                    "group_licenses": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "network_licenses": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "role_ids": {
                                        "type": "array",
                                        "description": "Identifiers for the roles to assign to the user.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/users/{user_id}/connections": {
            "post": {
                "tags": ["Groups::Users: Connections"],
                "summary": "Add a user to the selected group.",
                "operationId": "post_v3_groups_group_id_users_user_id_connections",
                "parameters": [{
                    "name": "user_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Groups::Users: Connections"],
                "summary": "Remove the selected user from the selected group.",
                "operationId": "delete_v3_groups_group_id_users_user_id_connections",
                "parameters": [{
                    "name": "user_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{group_id}/users/{user_id}/system-roles/{system_role_id}": {
            "post": {
                "tags": ["Groups: Users - System Roles"],
                "summary": "Add a system-level role for the selected user within the selected group.",
                "operationId": "post_v3_groups_group_id_users_user_id_system-roles_system_role_id",
                "parameters": [{
                    "name": "system_role_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "user_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Groups: Users - System Roles"],
                "summary": "Remove a system-level role from the selected user within the selected group.",
                "operationId": "delete_v3_groups_group_id_users_user_id_system-roles_system_role_id",
                "parameters": [{
                    "name": "system_role_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "user_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/groups/{id}": {
            "get": {
                "tags": ["Groups"],
                "summary": "Retrieve a complete group profile.",
                "operationId": "get_v3_groups_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": ["Groups"],
                "summary": "Update a group profile.",
                "operationId": "put_v3_groups_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["group[consent_enabled]"],
                                "properties": {
                                    "group[consent_enabled]": {
                                        "type": "boolean",
                                        "description": "Is consent enabled for this organization?"
                                    },
                                    "group[name]": {
                                        "type": "string",
                                        "description": "The name of the group."
                                    },
                                    "group[description]": {
                                        "type": "string",
                                        "description": "Description of the group"
                                    },
                                    "group[founded_year]": {
                                        "type": "number",
                                        "description": "The year the group was founded."
                                    },
                                    "group[logo_data_uri]": {
                                        "type": "string",
                                        "description": "Base64 encoded string of the image to be used for the organization logo."
                                    },
                                    "group[org_schedule]": {
                                        "type": "array",
                                        "description": "The hours of operation for the organization.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["group[consent_enabled]"],
                                "properties": {
                                    "group[consent_enabled]": {
                                        "type": "boolean",
                                        "description": "Is consent enabled for this organization?"
                                    },
                                    "group[name]": {
                                        "type": "string",
                                        "description": "The name of the group."
                                    },
                                    "group[description]": {
                                        "type": "string",
                                        "description": "Description of the group"
                                    },
                                    "group[founded_year]": {
                                        "type": "number",
                                        "description": "The year the group was founded."
                                    },
                                    "group[logo_data_uri]": {
                                        "type": "string",
                                        "description": "Base64 encoded string of the image to be used for the organization logo."
                                    },
                                    "group[org_schedule]": {
                                        "type": "array",
                                        "description": "The hours of operation for the organization.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Groups"],
                "summary": "Update a group profile.",
                "operationId": "patch_v3_groups_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["group[consent_enabled]"],
                                "properties": {
                                    "group[consent_enabled]": {
                                        "type": "boolean",
                                        "description": "Is consent enabled for this organization?"
                                    },
                                    "group[name]": {
                                        "type": "string",
                                        "description": "The name of the group."
                                    },
                                    "group[description]": {
                                        "type": "string",
                                        "description": "Description of the group"
                                    },
                                    "group[founded_year]": {
                                        "type": "number",
                                        "description": "The year the group was founded."
                                    },
                                    "group[logo_data_uri]": {
                                        "type": "string",
                                        "description": "Base64 encoded string of the image to be used for the organization logo."
                                    },
                                    "group[org_schedule]": {
                                        "type": "array",
                                        "description": "The hours of operation for the organization.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["group[consent_enabled]"],
                                "properties": {
                                    "group[consent_enabled]": {
                                        "type": "boolean",
                                        "description": "Is consent enabled for this organization?"
                                    },
                                    "group[name]": {
                                        "type": "string",
                                        "description": "The name of the group."
                                    },
                                    "group[description]": {
                                        "type": "string",
                                        "description": "Description of the group"
                                    },
                                    "group[founded_year]": {
                                        "type": "number",
                                        "description": "The year the group was founded."
                                    },
                                    "group[logo_data_uri]": {
                                        "type": "string",
                                        "description": "Base64 encoded string of the image to be used for the organization logo."
                                    },
                                    "group[org_schedule]": {
                                        "type": "array",
                                        "description": "The hours of operation for the organization.",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/invites/groups/users/{token}": {
            "get": {
                "tags": ["Invitations: User"],
                "summary": "Returns details for a user using the confirmation/invite token.",
                "operationId": "get_v3_invites_groups_users_token",
                "parameters": [{
                    "name": "token",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": ["Invitations: User"],
                "summary": "Confirms and updates the user's account.",
                "operationId": "put_v3_invites_groups_users_token",
                "parameters": [{
                    "name": "token",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["user[profile][gender]"],
                                "properties": {
                                    "user[profile][gender]": {
                                        "type": "string",
                                        "description": "User's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "user[email]": {
                                        "type": "string",
                                        "description": "User's email address."
                                    },
                                    "user[first_name]": {
                                        "type": "string",
                                        "description": "User's first name."
                                    },
                                    "user[last_name]": {
                                        "type": "string",
                                        "description": "User's last name."
                                    },
                                    "user[password]": {
                                        "type": "string",
                                        "description": "User's preferred password, only if changing it."
                                    },
                                    "user[password_confirmation]": {
                                        "type": "string",
                                        "description": "Confirmation of user's preferred password, only if changing it."
                                    },
                                    "user[profile][description]": {
                                        "type": "string",
                                        "description": "User's profile description or bio text."
                                    },
                                    "user[work_title]": {
                                        "type": "string",
                                        "description": "User's work title or position name."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["user[profile][gender]"],
                                "properties": {
                                    "user[profile][gender]": {
                                        "type": "string",
                                        "description": "User's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "user[email]": {
                                        "type": "string",
                                        "description": "User's email address."
                                    },
                                    "user[first_name]": {
                                        "type": "string",
                                        "description": "User's first name."
                                    },
                                    "user[last_name]": {
                                        "type": "string",
                                        "description": "User's last name."
                                    },
                                    "user[password]": {
                                        "type": "string",
                                        "description": "User's preferred password, only if changing it."
                                    },
                                    "user[password_confirmation]": {
                                        "type": "string",
                                        "description": "Confirmation of user's preferred password, only if changing it."
                                    },
                                    "user[profile][description]": {
                                        "type": "string",
                                        "description": "User's profile description or bio text."
                                    },
                                    "user[work_title]": {
                                        "type": "string",
                                        "description": "User's work title or position name."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Invitations: User"],
                "summary": "Confirms and updates the user's account.",
                "operationId": "patch_v3_invites_groups_users_token",
                "parameters": [{
                    "name": "token",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["user[profile][gender]"],
                                "properties": {
                                    "user[profile][gender]": {
                                        "type": "string",
                                        "description": "User's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "user[email]": {
                                        "type": "string",
                                        "description": "User's email address."
                                    },
                                    "user[first_name]": {
                                        "type": "string",
                                        "description": "User's first name."
                                    },
                                    "user[last_name]": {
                                        "type": "string",
                                        "description": "User's last name."
                                    },
                                    "user[password]": {
                                        "type": "string",
                                        "description": "User's preferred password, only if changing it."
                                    },
                                    "user[password_confirmation]": {
                                        "type": "string",
                                        "description": "Confirmation of user's preferred password, only if changing it."
                                    },
                                    "user[profile][description]": {
                                        "type": "string",
                                        "description": "User's profile description or bio text."
                                    },
                                    "user[work_title]": {
                                        "type": "string",
                                        "description": "User's work title or position name."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["user[profile][gender]"],
                                "properties": {
                                    "user[profile][gender]": {
                                        "type": "string",
                                        "description": "User's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "user[email]": {
                                        "type": "string",
                                        "description": "User's email address."
                                    },
                                    "user[first_name]": {
                                        "type": "string",
                                        "description": "User's first name."
                                    },
                                    "user[last_name]": {
                                        "type": "string",
                                        "description": "User's last name."
                                    },
                                    "user[password]": {
                                        "type": "string",
                                        "description": "User's preferred password, only if changing it."
                                    },
                                    "user[password_confirmation]": {
                                        "type": "string",
                                        "description": "Confirmation of user's preferred password, only if changing it."
                                    },
                                    "user[profile][description]": {
                                        "type": "string",
                                        "description": "User's profile description or bio text."
                                    },
                                    "user[work_title]": {
                                        "type": "string",
                                        "description": "User's work title or position name."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/networks/{network_id}/groups": {
            "get": {
                "tags": ["Networks: Groups"],
                "summary": "Returns a list of groups that are participating in the selected Network.",
                "operationId": "get_v3_networks_network_id_groups",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "q[service_type_ids]",
                    "in": "query",
                    "description": "An array of service type IDs to match network groups with.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[name]",
                    "in": "query",
                    "description": "All or part of an organization name within the network to match.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/networks/{network_id}/groups/{group_id}/by-referral-scopes": {
            "get": {
                "tags": ["Networks: Groups by Referral Scope"],
                "summary": "Returns a list of groups based on the referral scopes existing for [Network, scope_to_group_id].",
                "operationId": "get_v3_networks_network_id_groups_group_id_by-referral-scopes",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "q[include_home_groups]",
                    "in": "query",
                    "description": "Optionally include all groups for any provided `permitted_network` which is the same as `network_id`, regardless of its referral scope",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "q[permitted_networks]",
                    "in": "query",
                    "description": "Identifiers of networks that should be used to determine a referral scope.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[service_type_ids]",
                    "in": "query",
                    "description": "An array of service type IDs to match network groups with.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "q[name]",
                    "in": "query",
                    "description": "All or part of an organization name within the network to match.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "q[include_address_book]",
                    "in": "query",
                    "description": "Optionally include address book groups with in network groups for the current group",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "q[only_address_book]",
                    "in": "query",
                    "description": "Optionally only show address book groups for the current group",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "q[address_book_status]",
                    "in": "query",
                    "description": "Optionally filter address book groups by their status",
                    "schema": {
                        "type": "string",
                        "enum": ["draft", "in_review", "published", "archived"]
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/networks/{network_id}/groups/{group_id}/search": {
            "post": {
                "tags": ["Search"],
                "summary": "Search the group using a keyword or phrase.",
                "operationId": "post_v3_networks_network_id_groups_group_id_search",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["q[coordinates][lat]", "q[coordinates][lon]", "q[text]"],
                                "properties": {
                                    "q[coordinates][lon]": {
                                        "type": "number",
                                        "description": "Longitude Coordinate"
                                    },
                                    "q[coordinates][lat]": {
                                        "type": "number",
                                        "description": "Latitude Coordinate"
                                    },
                                    "q[text]": {
                                        "type": "string",
                                        "description": "Text to search the index for."
                                    },
                                    "q[service_type_ids]": {
                                        "type": "array",
                                        "description": "An array of service type IDs to filter on",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "q[distance]": {
                                        "type": "string",
                                        "description": "Either a distance w/ unit OR no distance IOT fetch `any` distance"
                                    },
                                    "q[languages]": {
                                        "type": "array",
                                        "description": "An array of Program Lanugage names to filter on",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "q[accessibility_options]": {
                                        "type": "array",
                                        "description": "An array of Program Accessibility Option names to filter on",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "q[caters_to]": {
                                        "type": "array",
                                        "description": "An array of Program Catered To Population names to filter on",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "q[include_home_groups]": {
                                        "type": "boolean",
                                        "description": "Optionally include all groups for any provided `permitted_network` which is the same as `network_id`, regardless of its referral scope"
                                    },
                                    "q[include_address_book]": {
                                        "type": "boolean",
                                        "description": "Optionally include address book groups with in network groups for the current group"
                                    },
                                    "q[only_address_book]": {
                                        "type": "boolean",
                                        "description": "Optionally only show address book groups for the current group"
                                    },
                                    "q[permitted_networks]": {
                                        "type": "array",
                                        "description": "Identifiers of networks that should be used to determine a referral scope.",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "q[force_sort_by_name]": {
                                        "type": "boolean",
                                        "description": "Optionally force ordering to be a-z even when distance constraint is used"
                                    },
                                    "page": {
                                        "type": "number",
                                        "description": "The page of results to be returned."
                                    },
                                    "per": {
                                        "type": "number",
                                        "description": "The number of records to be returned per page."
                                    },
                                    "sord": {
                                        "type": "string",
                                        "description": "The order to sort the results.",
                                        "enum": ["asc", "desc"]
                                    },
                                    "sidx": {
                                        "type": "string",
                                        "description": "The attribute to sort the results by."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["q[coordinates][lat]", "q[coordinates][lon]", "q[text]"],
                                "properties": {
                                    "q[coordinates][lon]": {
                                        "type": "number",
                                        "description": "Longitude Coordinate"
                                    },
                                    "q[coordinates][lat]": {
                                        "type": "number",
                                        "description": "Latitude Coordinate"
                                    },
                                    "q[text]": {
                                        "type": "string",
                                        "description": "Text to search the index for."
                                    },
                                    "q[service_type_ids]": {
                                        "type": "array",
                                        "description": "An array of service type IDs to filter on",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "q[distance]": {
                                        "type": "string",
                                        "description": "Either a distance w/ unit OR no distance IOT fetch `any` distance"
                                    },
                                    "q[languages]": {
                                        "type": "array",
                                        "description": "An array of Program Lanugage names to filter on",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "q[accessibility_options]": {
                                        "type": "array",
                                        "description": "An array of Program Accessibility Option names to filter on",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "q[caters_to]": {
                                        "type": "array",
                                        "description": "An array of Program Catered To Population names to filter on",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "q[include_home_groups]": {
                                        "type": "boolean",
                                        "description": "Optionally include all groups for any provided `permitted_network` which is the same as `network_id`, regardless of its referral scope"
                                    },
                                    "q[include_address_book]": {
                                        "type": "boolean",
                                        "description": "Optionally include address book groups with in network groups for the current group"
                                    },
                                    "q[only_address_book]": {
                                        "type": "boolean",
                                        "description": "Optionally only show address book groups for the current group"
                                    },
                                    "q[permitted_networks]": {
                                        "type": "array",
                                        "description": "Identifiers of networks that should be used to determine a referral scope.",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "q[force_sort_by_name]": {
                                        "type": "boolean",
                                        "description": "Optionally force ordering to be a-z even when distance constraint is used"
                                    },
                                    "page": {
                                        "type": "number",
                                        "description": "The page of results to be returned."
                                    },
                                    "per": {
                                        "type": "number",
                                        "description": "The number of records to be returned per page."
                                    },
                                    "sord": {
                                        "type": "string",
                                        "description": "The order to sort the results.",
                                        "enum": ["asc", "desc"]
                                    },
                                    "sidx": {
                                        "type": "string",
                                        "description": "The attribute to sort the results by."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/networks/{network_id}/groups/{id}": {
            "get": {
                "tags": ["Networks: Groups"],
                "summary": "Returns details about a group participating in the selected Network.",
                "operationId": "get_v3_networks_network_id_groups_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/networks/{network_id}/service-types": {
            "get": {
                "tags": ["Networks: Service Types Offered"],
                "summary": "Returns all service types provided by the specified network.",
                "operationId": "get_v3_networks_network_id_service-types",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/networks/{network_id}/service-types/with-outcomes": {
            "get": {
                "tags": ["Networks: Service Types Offered along with Outcomes scope to the Network"],
                "summary": "Returns all service types with outcomes provided by the specified network.",
                "operationId": "get_v3_networks_network_id_service-types_with-outcomes",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/networks/{network_id}/service-types/{service_type_id}/outcomes": {
            "get": {
                "tags": ["Networks Service Types: Outcomes"],
                "summary": "Returns all outcomes provided by the specified network service_type.",
                "operationId": "get_v3_networks_network_id_service-types_service_type_id_outcomes",
                "parameters": [{
                    "name": "service_type_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/networks/{network_id}/service-types/{service_type_id}/with-outcomes": {
            "get": {
                "tags": ["Networks: Service Types Offered along with Outcomes scope to the Network"],
                "summary": "Returns a specific service type with outcomes provided by the specified network.",
                "operationId": "get_v3_networks_network_id_service-types_service_type_id_with-outcomes",
                "parameters": [{
                    "name": "service_type_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/networks/{network_id}/users/by-referral-scopes": {
            "get": {
                "tags": ["Networks: Users/Collaborators by Referral Scopes"],
                "summary": "Returns a list of users that are participating in the selected Network or referral scope networks.",
                "operationId": "get_v3_networks_network_id_users_by-referral-scopes",
                "parameters": [{
                    "name": "q[group_id]",
                    "in": "query",
                    "description": "Identifier for the origin group used to find referral scopes (with network in scope as origin network)",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "q[text]",
                    "in": "query",
                    "description": "All or part of a user's name or email within the network to match.",
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "q[permitted_networks]",
                    "in": "query",
                    "description": "Identifiers of networks that should be used to filter referral scopes.",
                    "style": "form",
                    "explode": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/notification-preferences/contacts/{id}": {
            "get": {
                "tags": ["Global Contact Notification Settings for Users"],
                "summary": "Returns contact notification settings for the current user and a contact",
                "operationId": "get_v3_notification-preferences_contacts_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "new_case",
                    "in": "query",
                    "description": "new case",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "case_status_change",
                    "in": "query",
                    "description": "case status changed",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "referral_made",
                    "in": "query",
                    "description": "referral made",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "referral_declined",
                    "in": "query",
                    "description": "referral declined",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "referral_or_case_assigned",
                    "in": "query",
                    "description": "referral or case assigned",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "contact_updated",
                    "in": "query",
                    "description": "contact updated",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "contact_new_note",
                    "in": "query",
                    "description": "contact new note added",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "contact_case_updated",
                    "in": "query",
                    "description": "contact case updated",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "contact_case_new_note",
                    "in": "query",
                    "description": "contact case new note",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "contact_case_new_document",
                    "in": "query",
                    "description": "contact case new document",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "contact_assessment_updated",
                    "in": "query",
                    "description": "contact assessement updated",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "care_team_member_added",
                    "in": "query",
                    "description": "care team member added",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "care_team_member_updated",
                    "in": "query",
                    "description": "care team member updated",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "care_team_member_removed",
                    "in": "query",
                    "description": "care team member removed",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "primary_worker_assigned_to_case",
                    "in": "query",
                    "description": "primary worked assigned to case",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "accepted_informed_consent",
                    "in": "query",
                    "description": "accepted informed consent",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "declined_informed_consent",
                    "in": "query",
                    "description": "declined informed consent",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "care_coordinator_assigned",
                    "in": "query",
                    "description": "care coordinator assigned",
                    "schema": {
                        "type": "boolean"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": ["Global Contact Notification Settings for Users"],
                "summary": "Returns contact notification settings for the current user and a contact",
                "operationId": "put_v3_notification-preferences_contacts_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "new_case": {
                                        "type": "boolean",
                                        "description": "new case"
                                    },
                                    "case_status_change": {
                                        "type": "boolean",
                                        "description": "case status changed"
                                    },
                                    "referral_made": {
                                        "type": "boolean",
                                        "description": "referral made"
                                    },
                                    "referral_declined": {
                                        "type": "boolean",
                                        "description": "referral declined"
                                    },
                                    "referral_or_case_assigned": {
                                        "type": "boolean",
                                        "description": "referral or case assigned"
                                    },
                                    "contact_updated": {
                                        "type": "boolean",
                                        "description": "contact updated"
                                    },
                                    "contact_new_note": {
                                        "type": "boolean",
                                        "description": "contact new note added"
                                    },
                                    "contact_case_updated": {
                                        "type": "boolean",
                                        "description": "contact case updated"
                                    },
                                    "contact_case_new_note": {
                                        "type": "boolean",
                                        "description": "contact case new note"
                                    },
                                    "contact_case_new_document": {
                                        "type": "boolean",
                                        "description": "contact case new document"
                                    },
                                    "contact_assessment_updated": {
                                        "type": "boolean",
                                        "description": "contact assessement updated"
                                    },
                                    "care_team_member_added": {
                                        "type": "boolean",
                                        "description": "care team member added"
                                    },
                                    "care_team_member_updated": {
                                        "type": "boolean",
                                        "description": "care team member updated"
                                    },
                                    "care_team_member_removed": {
                                        "type": "boolean",
                                        "description": "care team member removed"
                                    },
                                    "primary_worker_assigned_to_case": {
                                        "type": "boolean",
                                        "description": "primary worked assigned to case"
                                    },
                                    "accepted_informed_consent": {
                                        "type": "boolean",
                                        "description": "accepted informed consent"
                                    },
                                    "declined_informed_consent": {
                                        "type": "boolean",
                                        "description": "declined informed consent"
                                    },
                                    "care_coordinator_assigned": {
                                        "type": "boolean",
                                        "description": "care coordinator assigned"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "new_case": {
                                        "type": "boolean",
                                        "description": "new case"
                                    },
                                    "case_status_change": {
                                        "type": "boolean",
                                        "description": "case status changed"
                                    },
                                    "referral_made": {
                                        "type": "boolean",
                                        "description": "referral made"
                                    },
                                    "referral_declined": {
                                        "type": "boolean",
                                        "description": "referral declined"
                                    },
                                    "referral_or_case_assigned": {
                                        "type": "boolean",
                                        "description": "referral or case assigned"
                                    },
                                    "contact_updated": {
                                        "type": "boolean",
                                        "description": "contact updated"
                                    },
                                    "contact_new_note": {
                                        "type": "boolean",
                                        "description": "contact new note added"
                                    },
                                    "contact_case_updated": {
                                        "type": "boolean",
                                        "description": "contact case updated"
                                    },
                                    "contact_case_new_note": {
                                        "type": "boolean",
                                        "description": "contact case new note"
                                    },
                                    "contact_case_new_document": {
                                        "type": "boolean",
                                        "description": "contact case new document"
                                    },
                                    "contact_assessment_updated": {
                                        "type": "boolean",
                                        "description": "contact assessement updated"
                                    },
                                    "care_team_member_added": {
                                        "type": "boolean",
                                        "description": "care team member added"
                                    },
                                    "care_team_member_updated": {
                                        "type": "boolean",
                                        "description": "care team member updated"
                                    },
                                    "care_team_member_removed": {
                                        "type": "boolean",
                                        "description": "care team member removed"
                                    },
                                    "primary_worker_assigned_to_case": {
                                        "type": "boolean",
                                        "description": "primary worked assigned to case"
                                    },
                                    "accepted_informed_consent": {
                                        "type": "boolean",
                                        "description": "accepted informed consent"
                                    },
                                    "declined_informed_consent": {
                                        "type": "boolean",
                                        "description": "declined informed consent"
                                    },
                                    "care_coordinator_assigned": {
                                        "type": "boolean",
                                        "description": "care coordinator assigned"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Global Contact Notification Settings for Users"],
                "summary": "Returns contact notification settings for the current user and a contact",
                "operationId": "patch_v3_notification-preferences_contacts_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "new_case": {
                                        "type": "boolean",
                                        "description": "new case"
                                    },
                                    "case_status_change": {
                                        "type": "boolean",
                                        "description": "case status changed"
                                    },
                                    "referral_made": {
                                        "type": "boolean",
                                        "description": "referral made"
                                    },
                                    "referral_declined": {
                                        "type": "boolean",
                                        "description": "referral declined"
                                    },
                                    "referral_or_case_assigned": {
                                        "type": "boolean",
                                        "description": "referral or case assigned"
                                    },
                                    "contact_updated": {
                                        "type": "boolean",
                                        "description": "contact updated"
                                    },
                                    "contact_new_note": {
                                        "type": "boolean",
                                        "description": "contact new note added"
                                    },
                                    "contact_case_updated": {
                                        "type": "boolean",
                                        "description": "contact case updated"
                                    },
                                    "contact_case_new_note": {
                                        "type": "boolean",
                                        "description": "contact case new note"
                                    },
                                    "contact_case_new_document": {
                                        "type": "boolean",
                                        "description": "contact case new document"
                                    },
                                    "contact_assessment_updated": {
                                        "type": "boolean",
                                        "description": "contact assessement updated"
                                    },
                                    "care_team_member_added": {
                                        "type": "boolean",
                                        "description": "care team member added"
                                    },
                                    "care_team_member_updated": {
                                        "type": "boolean",
                                        "description": "care team member updated"
                                    },
                                    "care_team_member_removed": {
                                        "type": "boolean",
                                        "description": "care team member removed"
                                    },
                                    "primary_worker_assigned_to_case": {
                                        "type": "boolean",
                                        "description": "primary worked assigned to case"
                                    },
                                    "accepted_informed_consent": {
                                        "type": "boolean",
                                        "description": "accepted informed consent"
                                    },
                                    "declined_informed_consent": {
                                        "type": "boolean",
                                        "description": "declined informed consent"
                                    },
                                    "care_coordinator_assigned": {
                                        "type": "boolean",
                                        "description": "care coordinator assigned"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "new_case": {
                                        "type": "boolean",
                                        "description": "new case"
                                    },
                                    "case_status_change": {
                                        "type": "boolean",
                                        "description": "case status changed"
                                    },
                                    "referral_made": {
                                        "type": "boolean",
                                        "description": "referral made"
                                    },
                                    "referral_declined": {
                                        "type": "boolean",
                                        "description": "referral declined"
                                    },
                                    "referral_or_case_assigned": {
                                        "type": "boolean",
                                        "description": "referral or case assigned"
                                    },
                                    "contact_updated": {
                                        "type": "boolean",
                                        "description": "contact updated"
                                    },
                                    "contact_new_note": {
                                        "type": "boolean",
                                        "description": "contact new note added"
                                    },
                                    "contact_case_updated": {
                                        "type": "boolean",
                                        "description": "contact case updated"
                                    },
                                    "contact_case_new_note": {
                                        "type": "boolean",
                                        "description": "contact case new note"
                                    },
                                    "contact_case_new_document": {
                                        "type": "boolean",
                                        "description": "contact case new document"
                                    },
                                    "contact_assessment_updated": {
                                        "type": "boolean",
                                        "description": "contact assessement updated"
                                    },
                                    "care_team_member_added": {
                                        "type": "boolean",
                                        "description": "care team member added"
                                    },
                                    "care_team_member_updated": {
                                        "type": "boolean",
                                        "description": "care team member updated"
                                    },
                                    "care_team_member_removed": {
                                        "type": "boolean",
                                        "description": "care team member removed"
                                    },
                                    "primary_worker_assigned_to_case": {
                                        "type": "boolean",
                                        "description": "primary worked assigned to case"
                                    },
                                    "accepted_informed_consent": {
                                        "type": "boolean",
                                        "description": "accepted informed consent"
                                    },
                                    "declined_informed_consent": {
                                        "type": "boolean",
                                        "description": "declined informed consent"
                                    },
                                    "care_coordinator_assigned": {
                                        "type": "boolean",
                                        "description": "care coordinator assigned"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/notification-preferences/global-notification-settings/{id}": {
            "get": {
                "tags": ["Global Notification Settings for Users"],
                "summary": "Shows global notification settings for the user",
                "operationId": "get_v3_notification-preferences_global-notification-settings_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "email_updates_enabled",
                    "in": "query",
                    "description": "Global email on/off settings",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "update_when_someone_mentions_me",
                    "in": "query",
                    "description": "Methods to alert the user",
                    "schema": {
                        "type": "string",
                        "enum": ["off", "email_only"]
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": ["Global Notification Settings for Users"],
                "summary": "Updates global notification settings for the user",
                "operationId": "put_v3_notification-preferences_global-notification-settings_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "email_updates_enabled": {
                                        "type": "boolean",
                                        "description": "Global email on/off settings"
                                    },
                                    "update_when_someone_mentions_me": {
                                        "type": "string",
                                        "description": "Methods to alert the user",
                                        "enum": ["off", "email_only"]
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "email_updates_enabled": {
                                        "type": "boolean",
                                        "description": "Global email on/off settings"
                                    },
                                    "update_when_someone_mentions_me": {
                                        "type": "string",
                                        "description": "Methods to alert the user",
                                        "enum": ["off", "email_only"]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Global Notification Settings for Users"],
                "summary": "Updates global notification settings for the user",
                "operationId": "patch_v3_notification-preferences_global-notification-settings_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "email_updates_enabled": {
                                        "type": "boolean",
                                        "description": "Global email on/off settings"
                                    },
                                    "update_when_someone_mentions_me": {
                                        "type": "string",
                                        "description": "Methods to alert the user",
                                        "enum": ["off", "email_only"]
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "email_updates_enabled": {
                                        "type": "boolean",
                                        "description": "Global email on/off settings"
                                    },
                                    "update_when_someone_mentions_me": {
                                        "type": "string",
                                        "description": "Methods to alert the user",
                                        "enum": ["off", "email_only"]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/notification-preferences/groups/{id}": {
            "get": {
                "tags": ["Notification Preferences for a Group that a User belongs to"],
                "summary": "Returns group notification settings for the current user and a group",
                "operationId": "get_v3_notification-preferences_groups_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_information_updated",
                    "in": "query",
                    "description": "Group information has been updated",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "new_program_added",
                    "in": "query",
                    "description": "New program has been added",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "group_admin_added",
                    "in": "query",
                    "description": "User has been granted administrator role",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "group_user_changes",
                    "in": "query",
                    "description": "Changes to users - added to org, removed from org, role changed",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "watch_my_contacts",
                    "in": "query",
                    "description": "Updates and changes to contacts created by user",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "invitation_expired_for_user",
                    "in": "query",
                    "description": "Invitation expired for user",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "group_user_activated_their_account",
                    "in": "query",
                    "description": "User activated their account",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "no_remaining_organization_licences",
                    "in": "query",
                    "description": "Organization does not have any remaining licenses",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "new_assistance_request",
                    "in": "query",
                    "description": "New assistance request",
                    "schema": {
                        "type": "boolean"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": ["Notification Preferences for a Group that a User belongs to"],
                "summary": "Returns group notification settings for the current user and a group",
                "operationId": "put_v3_notification-preferences_groups_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "group_information_updated": {
                                        "type": "boolean",
                                        "description": "Group information has been updated"
                                    },
                                    "new_program_added": {
                                        "type": "boolean",
                                        "description": "New program has been added"
                                    },
                                    "group_admin_added": {
                                        "type": "boolean",
                                        "description": "User has been granted administrator role"
                                    },
                                    "group_user_changes": {
                                        "type": "boolean",
                                        "description": "Changes to users - added to org, removed from org, role changed"
                                    },
                                    "watch_my_contacts": {
                                        "type": "boolean",
                                        "description": "Updates and changes to contacts created by user"
                                    },
                                    "invitation_expired_for_user": {
                                        "type": "boolean",
                                        "description": "Invitation expired for user"
                                    },
                                    "group_user_activated_their_account": {
                                        "type": "boolean",
                                        "description": "User activated their account"
                                    },
                                    "no_remaining_organization_licences": {
                                        "type": "boolean",
                                        "description": "Organization does not have any remaining licenses"
                                    },
                                    "new_assistance_request": {
                                        "type": "boolean",
                                        "description": "New assistance request"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "group_information_updated": {
                                        "type": "boolean",
                                        "description": "Group information has been updated"
                                    },
                                    "new_program_added": {
                                        "type": "boolean",
                                        "description": "New program has been added"
                                    },
                                    "group_admin_added": {
                                        "type": "boolean",
                                        "description": "User has been granted administrator role"
                                    },
                                    "group_user_changes": {
                                        "type": "boolean",
                                        "description": "Changes to users - added to org, removed from org, role changed"
                                    },
                                    "watch_my_contacts": {
                                        "type": "boolean",
                                        "description": "Updates and changes to contacts created by user"
                                    },
                                    "invitation_expired_for_user": {
                                        "type": "boolean",
                                        "description": "Invitation expired for user"
                                    },
                                    "group_user_activated_their_account": {
                                        "type": "boolean",
                                        "description": "User activated their account"
                                    },
                                    "no_remaining_organization_licences": {
                                        "type": "boolean",
                                        "description": "Organization does not have any remaining licenses"
                                    },
                                    "new_assistance_request": {
                                        "type": "boolean",
                                        "description": "New assistance request"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Notification Preferences for a Group that a User belongs to"],
                "summary": "Returns group notification settings for the current user and a group",
                "operationId": "patch_v3_notification-preferences_groups_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "group_information_updated": {
                                        "type": "boolean",
                                        "description": "Group information has been updated"
                                    },
                                    "new_program_added": {
                                        "type": "boolean",
                                        "description": "New program has been added"
                                    },
                                    "group_admin_added": {
                                        "type": "boolean",
                                        "description": "User has been granted administrator role"
                                    },
                                    "group_user_changes": {
                                        "type": "boolean",
                                        "description": "Changes to users - added to org, removed from org, role changed"
                                    },
                                    "watch_my_contacts": {
                                        "type": "boolean",
                                        "description": "Updates and changes to contacts created by user"
                                    },
                                    "invitation_expired_for_user": {
                                        "type": "boolean",
                                        "description": "Invitation expired for user"
                                    },
                                    "group_user_activated_their_account": {
                                        "type": "boolean",
                                        "description": "User activated their account"
                                    },
                                    "no_remaining_organization_licences": {
                                        "type": "boolean",
                                        "description": "Organization does not have any remaining licenses"
                                    },
                                    "new_assistance_request": {
                                        "type": "boolean",
                                        "description": "New assistance request"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "group_information_updated": {
                                        "type": "boolean",
                                        "description": "Group information has been updated"
                                    },
                                    "new_program_added": {
                                        "type": "boolean",
                                        "description": "New program has been added"
                                    },
                                    "group_admin_added": {
                                        "type": "boolean",
                                        "description": "User has been granted administrator role"
                                    },
                                    "group_user_changes": {
                                        "type": "boolean",
                                        "description": "Changes to users - added to org, removed from org, role changed"
                                    },
                                    "watch_my_contacts": {
                                        "type": "boolean",
                                        "description": "Updates and changes to contacts created by user"
                                    },
                                    "invitation_expired_for_user": {
                                        "type": "boolean",
                                        "description": "Invitation expired for user"
                                    },
                                    "group_user_activated_their_account": {
                                        "type": "boolean",
                                        "description": "User activated their account"
                                    },
                                    "no_remaining_organization_licences": {
                                        "type": "boolean",
                                        "description": "Organization does not have any remaining licenses"
                                    },
                                    "new_assistance_request": {
                                        "type": "boolean",
                                        "description": "New assistance request"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/notification-preferences/networks/{id}": {
            "get": {
                "tags": ["Notification Preferences for a Network that a User belongs to"],
                "summary": "Returns network notification settings for the current user and a network",
                "operationId": "get_v3_notification-preferences_networks_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "network_information_updated",
                    "in": "query",
                    "description": "Network information has been updated",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "new_program_added",
                    "in": "query",
                    "description": "New program has been added",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "network_admin_added",
                    "in": "query",
                    "description": "User has been granted administrator role",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "network_user_changes",
                    "in": "query",
                    "description": "Changes to users - added to org, removed from org, role changed",
                    "schema": {
                        "type": "boolean"
                    }
                }, {
                    "name": "watch_my_contacts",
                    "in": "query",
                    "description": "Updates and changes to contacts created by user",
                    "schema": {
                        "type": "boolean"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": ["Notification Preferences for a Network that a User belongs to"],
                "summary": "Returns network notification settings for the current user and a network",
                "operationId": "put_v3_notification-preferences_networks_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "network_information_updated": {
                                        "type": "boolean",
                                        "description": "Network information has been updated"
                                    },
                                    "new_program_added": {
                                        "type": "boolean",
                                        "description": "New program has been added"
                                    },
                                    "network_admin_added": {
                                        "type": "boolean",
                                        "description": "User has been granted administrator role"
                                    },
                                    "network_user_changes": {
                                        "type": "boolean",
                                        "description": "Changes to users - added to org, removed from org, role changed"
                                    },
                                    "watch_my_contacts": {
                                        "type": "boolean",
                                        "description": "Updates and changes to contacts created by user"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "network_information_updated": {
                                        "type": "boolean",
                                        "description": "Network information has been updated"
                                    },
                                    "new_program_added": {
                                        "type": "boolean",
                                        "description": "New program has been added"
                                    },
                                    "network_admin_added": {
                                        "type": "boolean",
                                        "description": "User has been granted administrator role"
                                    },
                                    "network_user_changes": {
                                        "type": "boolean",
                                        "description": "Changes to users - added to org, removed from org, role changed"
                                    },
                                    "watch_my_contacts": {
                                        "type": "boolean",
                                        "description": "Updates and changes to contacts created by user"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Notification Preferences for a Network that a User belongs to"],
                "summary": "Returns network notification settings for the current user and a network",
                "operationId": "patch_v3_notification-preferences_networks_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "network_information_updated": {
                                        "type": "boolean",
                                        "description": "Network information has been updated"
                                    },
                                    "new_program_added": {
                                        "type": "boolean",
                                        "description": "New program has been added"
                                    },
                                    "network_admin_added": {
                                        "type": "boolean",
                                        "description": "User has been granted administrator role"
                                    },
                                    "network_user_changes": {
                                        "type": "boolean",
                                        "description": "Changes to users - added to org, removed from org, role changed"
                                    },
                                    "watch_my_contacts": {
                                        "type": "boolean",
                                        "description": "Updates and changes to contacts created by user"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "network_information_updated": {
                                        "type": "boolean",
                                        "description": "Network information has been updated"
                                    },
                                    "new_program_added": {
                                        "type": "boolean",
                                        "description": "New program has been added"
                                    },
                                    "network_admin_added": {
                                        "type": "boolean",
                                        "description": "User has been granted administrator role"
                                    },
                                    "network_user_changes": {
                                        "type": "boolean",
                                        "description": "Changes to users - added to org, removed from org, role changed"
                                    },
                                    "watch_my_contacts": {
                                        "type": "boolean",
                                        "description": "Updates and changes to contacts created by user"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/registration": {
            "post": {
                "tags": ["User Registration"],
                "summary": "Registers a new user account for the Unite US application. The user may be required to confirm her email address.",
                "operationId": "post_v3_registration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["user[email]", "user[first_name]", "user[last_name]", "user[password]", "user[password_confirmation]"],
                                "properties": {
                                    "user[last_name]": {
                                        "type": "string",
                                        "description": "User's last name."
                                    },
                                    "user[first_name]": {
                                        "type": "string",
                                        "description": "User's first name."
                                    },
                                    "user[password_confirmation]": {
                                        "type": "string",
                                        "description": "Confirmation of the user's password."
                                    },
                                    "user[password]": {
                                        "type": "string",
                                        "description": "User's preferred password."
                                    },
                                    "user[email]": {
                                        "type": "string",
                                        "description": "User's email address."
                                    },
                                    "user[title]": {
                                        "type": "string",
                                        "description": "User's title.",
                                        "enum": ["Mr.", "Miss", "Mrs.", "Ms.", "Dr."]
                                    },
                                    "user[middle_name_initial]": {
                                        "type": "string",
                                        "description": "User's middle name or initial."
                                    },
                                    "user[suffix]": {
                                        "type": "string",
                                        "description": "User's suffix.",
                                        "enum": ["Jr.", "Sr.", "III", "IV", "V", "Esq.", "Ph.D"]
                                    },
                                    "invitation[token]": {
                                        "type": "string",
                                        "description": "The invitation token used to connect the new user to other resources."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["user[email]", "user[first_name]", "user[last_name]", "user[password]", "user[password_confirmation]"],
                                "properties": {
                                    "user[last_name]": {
                                        "type": "string",
                                        "description": "User's last name."
                                    },
                                    "user[first_name]": {
                                        "type": "string",
                                        "description": "User's first name."
                                    },
                                    "user[password_confirmation]": {
                                        "type": "string",
                                        "description": "Confirmation of the user's password."
                                    },
                                    "user[password]": {
                                        "type": "string",
                                        "description": "User's preferred password."
                                    },
                                    "user[email]": {
                                        "type": "string",
                                        "description": "User's email address."
                                    },
                                    "user[title]": {
                                        "type": "string",
                                        "description": "User's title.",
                                        "enum": ["Mr.", "Miss", "Mrs.", "Ms.", "Dr."]
                                    },
                                    "user[middle_name_initial]": {
                                        "type": "string",
                                        "description": "User's middle name or initial."
                                    },
                                    "user[suffix]": {
                                        "type": "string",
                                        "description": "User's suffix.",
                                        "enum": ["Jr.", "Sr.", "III", "IV", "V", "Esq.", "Ph.D"]
                                    },
                                    "invitation[token]": {
                                        "type": "string",
                                        "description": "The invitation token used to connect the new user to other resources."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/all-time/summaries/actionables": {
            "get": {
                "tags": ["All-Time Reports: Actionables Summary"],
                "summary": "Returns a snapshot of the selected organization or network's actionables.",
                "operationId": "get_v3_reports_groups_group_id_all-time_summaries_actionables",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/all-time/summaries/counts": {
            "get": {
                "tags": ["All-Time Reports: Counts Summary"],
                "summary": "Returns counts of actionables for the selected organization",
                "operationId": "get_v3_reports_groups_group_id_all-time_summaries_counts",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/cases/by-service-type": {
            "get": {
                "tags": ["Service Cases by Service Type"],
                "summary": "Returns a snapshot of Service Cases by Service Type",
                "operationId": "get_v3_reports_groups_group_id_cases_by-service-type",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/cases/by-source": {
            "get": {
                "tags": ["Service Cases by Source"],
                "summary": "Returns a snapshot of Service Cases by Source",
                "operationId": "get_v3_reports_groups_group_id_cases_by-source",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/cases/by-status": {
            "get": {
                "tags": ["Service Cases by Status"],
                "summary": "Returns a snapshot of Service Cases by Status",
                "operationId": "get_v3_reports_groups_group_id_cases_by-status",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/cases/closed/by-service-type": {
            "get": {
                "tags": ["Closed Service Cases by Service Type"],
                "summary": "Returns a snapshot of Closed Service Cases by Service Type",
                "operationId": "get_v3_reports_groups_group_id_cases_closed_by-service-type",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/cases/closed/service-types/{service_type_id}/by-outcome": {
            "get": {
                "tags": ["Closed Service Cases by Service Type and Outcome"],
                "summary": "Returns a snapshot of Closed Service Cases by Service Type and Outcome",
                "operationId": "get_v3_reports_groups_group_id_cases_closed_service-types_service_type_id_by-outcome",
                "parameters": [{
                    "name": "service_type_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/cases/closed/service-types/{service_type_id}/by-sub-type": {
            "get": {
                "tags": ["Closed Service Cases by Sub Types of Service Type"],
                "summary": "Returns a snapshot of Closed Service Cases by Sub Types of Service Type",
                "operationId": "get_v3_reports_groups_group_id_cases_closed_service-types_service_type_id_by-sub-type",
                "parameters": [{
                    "name": "service_type_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/cases/count": {
            "get": {
                "tags": ["Organization Service Cases"],
                "summary": "Returns a snapshot of Organization Service Cases",
                "operationId": "get_v3_reports_groups_group_id_cases_count",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/cases/service-types/{service_type_id}/by-sub-type": {
            "get": {
                "tags": ["Service Cases by Sub Types of Service Type"],
                "summary": "Returns a snapshot of Service Cases by Sub Types of Service Type",
                "operationId": "get_v3_reports_groups_group_id_cases_service-types_service_type_id_by-sub-type",
                "parameters": [{
                    "name": "service_type_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/contacts/by-age": {
            "get": {
                "tags": ["Clients by Age"],
                "summary": "Returns a snapshot of Clients by Age",
                "operationId": "get_v3_reports_groups_group_id_contacts_by-age",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/contacts/by-ethnicity": {
            "get": {
                "tags": ["Clients by Ethnicity"],
                "summary": "Returns a snapshot of Clients by Ethnicity",
                "operationId": "get_v3_reports_groups_group_id_contacts_by-ethnicity",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/contacts/by-gender": {
            "get": {
                "tags": ["Clients by Gender"],
                "summary": "Returns a snapshot of Clients by Gender",
                "operationId": "get_v3_reports_groups_group_id_contacts_by-gender",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/contacts/by-race": {
            "get": {
                "tags": ["Clients by Race"],
                "summary": "Returns a snapshot of Clients by Race",
                "operationId": "get_v3_reports_groups_group_id_contacts_by-race",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/contacts/count": {
            "get": {
                "tags": ["Unique Organization Clients Report"],
                "summary": "Returns a snapshot of total unique group clients",
                "operationId": "get_v3_reports_groups_group_id_contacts_count",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/contacts/gender/by-age": {
            "get": {
                "tags": ["Client Gender by Age"],
                "summary": "Returns a snapshot of Client Gender by Age",
                "operationId": "get_v3_reports_groups_group_id_contacts_gender_by-age",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/contacts/military/affiliation/by-gender": {
            "get": {
                "tags": ["Client Military Affiliation by Gender"],
                "summary": "Returns a snapshot of Client Military Affiliation by Gender",
                "operationId": "get_v3_reports_groups_group_id_contacts_military_affiliation_by-gender",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/contacts/military/branch-of-service/by-gender": {
            "get": {
                "tags": ["Client Military Branch of Service by Gender"],
                "summary": "Returns a snapshot of Client Military Branch of Service by Gender",
                "operationId": "get_v3_reports_groups_group_id_contacts_military_branch-of-service_by-gender",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/contacts/military/by-affiliation": {
            "get": {
                "tags": ["Clients by Military Affiliation"],
                "summary": "Returns a snapshot of Clients by Military Affiliation",
                "operationId": "get_v3_reports_groups_group_id_contacts_military_by-affiliation",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/contacts/military/by-branch-of-service": {
            "get": {
                "tags": ["Clients by Military Branch of Service"],
                "summary": "Returns a snapshot of Clients by Military Branch of Service",
                "operationId": "get_v3_reports_groups_group_id_contacts_military_by-branch-of-service",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/contacts/military/by-deployed": {
            "get": {
                "tags": ["Clients by Military Deployment"],
                "summary": "Returns a snapshot of Clients by Military Deployment",
                "operationId": "get_v3_reports_groups_group_id_contacts_military_by-deployed",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/contacts/military/by-military-discharge": {
            "get": {
                "tags": ["Clients by Military Discharge"],
                "summary": "Returns a snapshot of Clients by Military Discharge",
                "operationId": "get_v3_reports_groups_group_id_contacts_military_by-military-discharge",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/contacts/military/by-service-era": {
            "get": {
                "tags": ["Clients by Military Service Era"],
                "summary": "Returns a snapshot of Clients by Military Service Era",
                "operationId": "get_v3_reports_groups_group_id_contacts_military_by-service-era",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/contacts/military/by-status": {
            "get": {
                "tags": ["Clients by Military Status"],
                "summary": "Returns a snapshot of Clients by Military Status",
                "operationId": "get_v3_reports_groups_group_id_contacts_military_by-status",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/contacts/military/by-transitioning": {
            "get": {
                "tags": ["Clients by Military Transitioning Status"],
                "summary": "Returns a snapshot of Clients by Military Transitioning Status",
                "operationId": "get_v3_reports_groups_group_id_contacts_military_by-transitioning",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/contacts/military/service-era/by-branch-of-service": {
            "get": {
                "tags": ["Client Military Service Era by Branch of Service"],
                "summary": "Returns a snapshot of Client Military Service Era by Branch of Service",
                "operationId": "get_v3_reports_groups_group_id_contacts_military_service-era_by-branch-of-service",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/contacts/military/service-era/by-gender": {
            "get": {
                "tags": ["Client Military Service Era by Gender"],
                "summary": "Returns a snapshot of Client Military Service Era by Gender",
                "operationId": "get_v3_reports_groups_group_id_contacts_military_service-era_by-gender",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/contacts/military/status/by-gender": {
            "get": {
                "tags": ["Clients Military Status by Gender"],
                "summary": "Returns a snapshot of Clients Military Status by Gender",
                "operationId": "get_v3_reports_groups_group_id_contacts_military_status_by-gender",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/contacts/military/transitioning/by-branch-of-service": {
            "get": {
                "tags": ["Client Military Transition Status by Branch of Service"],
                "summary": "Returns a snapshot of Client Military Transition Status by Branch of Service",
                "operationId": "get_v3_reports_groups_group_id_contacts_military_transitioning_by-branch-of-service",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/contacts/military/transitioning/by-gender": {
            "get": {
                "tags": ["Client Military Transitioning by Gender"],
                "summary": "Returns a snapshot of Client Military Transitioning by Gender",
                "operationId": "get_v3_reports_groups_group_id_contacts_military_transitioning_by-gender",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/groups/{group_id}/contacts/race/by-ethnicity": {
            "get": {
                "tags": ["Client Race by Ethnicity"],
                "summary": "Returns a snapshot of Client Race by Ethnicity",
                "operationId": "get_v3_reports_groups_group_id_contacts_race_by-ethnicity",
                "parameters": [{
                    "name": "group_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/networks/{network_id}/contacts/by-age": {
            "get": {
                "tags": ["Network Contacts By Age Report"],
                "summary": "Returns a snapshot of network contacts by age",
                "operationId": "get_v3_reports_networks_network_id_contacts_by-age",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/networks/{network_id}/contacts/by-ethnicity": {
            "get": {
                "tags": ["Network Contacts By Ethnicity Report"],
                "summary": "Returns a snapshot of network contacts by ethnicity",
                "operationId": "get_v3_reports_networks_network_id_contacts_by-ethnicity",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/networks/{network_id}/contacts/by-gender": {
            "get": {
                "tags": ["Network Contacts By Gender Report"],
                "summary": "Returns a snapshot of network contacts by gender",
                "operationId": "get_v3_reports_networks_network_id_contacts_by-gender",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/networks/{network_id}/contacts/by-race": {
            "get": {
                "tags": ["Network Contacts By Race Report"],
                "summary": "Returns a snapshot of network contacts by race",
                "operationId": "get_v3_reports_networks_network_id_contacts_by-race",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/networks/{network_id}/contacts/count": {
            "get": {
                "tags": ["Unique Network Contacts Report"],
                "summary": "Returns a snapshot of total unique network contacts",
                "operationId": "get_v3_reports_networks_network_id_contacts_count",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/networks/{network_id}/contacts/gender/by-age": {
            "get": {
                "tags": ["Contacts Gender by Age Report"],
                "summary": "Returns a snapshot of network contacts gender by age",
                "operationId": "get_v3_reports_networks_network_id_contacts_gender_by-age",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/networks/{network_id}/contacts/military/affiliation/by-gender": {
            "get": {
                "tags": ["Network Client Military Affiliation by Gender"],
                "summary": "Returns a snapshot of Network Client Military Affiliation by Gender",
                "operationId": "get_v3_reports_networks_network_id_contacts_military_affiliation_by-gender",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/networks/{network_id}/contacts/military/branch-of-service/by-gender": {
            "get": {
                "tags": ["Network Client Military Branch of Service by Gender"],
                "summary": "Returns a snapshot of Network Client Military Branch of Service by Gender",
                "operationId": "get_v3_reports_networks_network_id_contacts_military_branch-of-service_by-gender",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/networks/{network_id}/contacts/military/by-affiliation": {
            "get": {
                "tags": ["Network Clients by Military Affiliation"],
                "summary": "Returns a snapshot of Network Clients by Military Affiliation",
                "operationId": "get_v3_reports_networks_network_id_contacts_military_by-affiliation",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/networks/{network_id}/contacts/military/by-branch-of-service": {
            "get": {
                "tags": ["Network Clients by Military Branch of Service"],
                "summary": "Returns a snapshot of Network Clients by Military Branch of Service",
                "operationId": "get_v3_reports_networks_network_id_contacts_military_by-branch-of-service",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/networks/{network_id}/contacts/military/by-deployed": {
            "get": {
                "tags": ["Network Clients by Military Deployment"],
                "summary": "Returns a snapshot of Network Clients by Military Deployment",
                "operationId": "get_v3_reports_networks_network_id_contacts_military_by-deployed",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/networks/{network_id}/contacts/military/by-military-discharge": {
            "get": {
                "tags": ["Network Clients by Military Discharge"],
                "summary": "Returns a snapshot of Network Clients by Military Discharge",
                "operationId": "get_v3_reports_networks_network_id_contacts_military_by-military-discharge",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/networks/{network_id}/contacts/military/by-service-era": {
            "get": {
                "tags": ["Network Clients by Military Service Era"],
                "summary": "Returns a snapshot of Network Clients by Military Service Era",
                "operationId": "get_v3_reports_networks_network_id_contacts_military_by-service-era",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/networks/{network_id}/contacts/military/by-status": {
            "get": {
                "tags": ["Network Clients by Military Status"],
                "summary": "Returns a snapshot of Network Clients by Military Status",
                "operationId": "get_v3_reports_networks_network_id_contacts_military_by-status",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/networks/{network_id}/contacts/military/by-transitioning": {
            "get": {
                "tags": ["Network Clients by Military Transitioning Status"],
                "summary": "Returns a snapshot of Network Clients by Military Transitioning Status",
                "operationId": "get_v3_reports_networks_network_id_contacts_military_by-transitioning",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/networks/{network_id}/contacts/military/service-era/by-branch-of-service": {
            "get": {
                "tags": ["Network Client Military Service Era by Branch of Service"],
                "summary": "Returns a snapshot of Network Client Military Service Era by Branch of Service",
                "operationId": "get_v3_reports_networks_network_id_contacts_military_service-era_by-branch-of-service",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/networks/{network_id}/contacts/military/service-era/by-gender": {
            "get": {
                "tags": ["Network Client Military Service Era by Gender"],
                "summary": "Returns a snapshot of Network Client Military Service Era by Gender",
                "operationId": "get_v3_reports_networks_network_id_contacts_military_service-era_by-gender",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/networks/{network_id}/contacts/military/status/by-gender": {
            "get": {
                "tags": ["Network Clients Military Status by Gender"],
                "summary": "Returns a snapshot of Network Clients Military Status by Gender",
                "operationId": "get_v3_reports_networks_network_id_contacts_military_status_by-gender",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/networks/{network_id}/contacts/military/transitioning/by-branch-of-service": {
            "get": {
                "tags": ["Network Client Military Transition Status by Branch of Service"],
                "summary": "Returns a snapshot of Network Client Military Transition Status by Branch of Service",
                "operationId": "get_v3_reports_networks_network_id_contacts_military_transitioning_by-branch-of-service",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/networks/{network_id}/contacts/military/transitioning/by-gender": {
            "get": {
                "tags": ["Network Client Military Transitioning by Gender"],
                "summary": "Returns a snapshot of Network Client Military Transitioning by Gender",
                "operationId": "get_v3_reports_networks_network_id_contacts_military_transitioning_by-gender",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/networks/{network_id}/contacts/race/by-ethnicity": {
            "get": {
                "tags": ["Client Race by Ethnicity"],
                "summary": "Returns a snapshot of Client Race by Ethnicity",
                "operationId": "get_v3_reports_networks_network_id_contacts_race_by-ethnicity",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/networks/{network_id}/groups/count": {
            "get": {
                "tags": ["Unique Network Organizations Report"],
                "summary": "Returns a snapshot of total unique network groups",
                "operationId": "get_v3_reports_networks_network_id_groups_count",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/networks/{network_id}/referrals/received/by-organization": {
            "get": {
                "tags": ["Received Referrals by Organization"],
                "summary": "Returns a snapshot of Received Referrals by Organizations",
                "operationId": "get_v3_reports_networks_network_id_referrals_received_by-organization",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/networks/{network_id}/referrals/sent/by-organization": {
            "get": {
                "tags": ["Sent Referrals by Organization"],
                "summary": "Returns a snapshot of Sent Referrals by Organizations",
                "operationId": "get_v3_reports_networks_network_id_referrals_sent_by-organization",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/reports/networks/{network_id}/users/count": {
            "get": {
                "tags": ["Unique Network Users Report"],
                "summary": "Returns a snapshot of total unique network Users",
                "operationId": "get_v3_reports_networks_network_id_users_count",
                "parameters": [{
                    "name": "network_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/session/checks": {
            "post": {
                "tags": ["Authentication: Validate Token"],
                "summary": "Validates the supplied authentication token.",
                "description": "\n<p>Validates the supplied authentication token to allow a client to determine\nif the token is valid or not. A <code>200 OK</code> response will be issued\nto indicate the token is valid. A <code>401 UNAUTHORIZED</code> response\nwill be issued to indicate the token is not valid.</p>\n",
                "operationId": "post_v3_session_checks",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["access_token"],
                                "properties": {
                                    "access_token": {
                                        "type": "string",
                                        "description": "Bearer token to validate. Should be formatted as 'Bearer TOKEN_VALUE'"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["access_token"],
                                "properties": {
                                    "access_token": {
                                        "type": "string",
                                        "description": "Bearer token to validate. Should be formatted as 'Bearer TOKEN_VALUE'"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/session/support": {
            "get": {
                "tags": ["Apiv3securesessionssupports"],
                "summary": "Return supporting information about the user's current session",
                "operationId": "get_v3_session_support",
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/users/me/support/zendesk": {
            "get": {
                "tags": ["Users: Zendesk Support"],
                "summary": "Retrieve a user's Zendesk login URL.",
                "operationId": "get_v3_users_me_support_zendesk",
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/users/{id}": {
            "get": {
                "tags": ["Users"],
                "summary": "Retrieve a complete user profile.",
                "operationId": "get_v3_users_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": ["Users"],
                "summary": "Updates the user's account.",
                "operationId": "put_v3_users_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["user[profile][gender]"],
                                "properties": {
                                    "user[profile][gender]": {
                                        "type": "string",
                                        "description": "User's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "user[email]": {
                                        "type": "string",
                                        "description": "User's email address."
                                    },
                                    "user[first_name]": {
                                        "type": "string",
                                        "description": "User's first name."
                                    },
                                    "user[last_name]": {
                                        "type": "string",
                                        "description": "User's last name."
                                    },
                                    "user[password]": {
                                        "type": "string",
                                        "description": "User's preferred password, only if changing it."
                                    },
                                    "user[password_confirmation]": {
                                        "type": "string",
                                        "description": "Confirmation of user's preferred password, only if changing it."
                                    },
                                    "user[profile][description]": {
                                        "type": "string",
                                        "description": "User's profile description or bio text."
                                    },
                                    "user[title]": {
                                        "type": "string",
                                        "description": "User's work title or position name."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["user[profile][gender]"],
                                "properties": {
                                    "user[profile][gender]": {
                                        "type": "string",
                                        "description": "User's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "user[email]": {
                                        "type": "string",
                                        "description": "User's email address."
                                    },
                                    "user[first_name]": {
                                        "type": "string",
                                        "description": "User's first name."
                                    },
                                    "user[last_name]": {
                                        "type": "string",
                                        "description": "User's last name."
                                    },
                                    "user[password]": {
                                        "type": "string",
                                        "description": "User's preferred password, only if changing it."
                                    },
                                    "user[password_confirmation]": {
                                        "type": "string",
                                        "description": "Confirmation of user's preferred password, only if changing it."
                                    },
                                    "user[profile][description]": {
                                        "type": "string",
                                        "description": "User's profile description or bio text."
                                    },
                                    "user[title]": {
                                        "type": "string",
                                        "description": "User's work title or position name."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Users"],
                "summary": "Updates the user's account.",
                "operationId": "patch_v3_users_id",
                "parameters": [{
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["user[profile][gender]"],
                                "properties": {
                                    "user[profile][gender]": {
                                        "type": "string",
                                        "description": "User's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "user[email]": {
                                        "type": "string",
                                        "description": "User's email address."
                                    },
                                    "user[first_name]": {
                                        "type": "string",
                                        "description": "User's first name."
                                    },
                                    "user[last_name]": {
                                        "type": "string",
                                        "description": "User's last name."
                                    },
                                    "user[password]": {
                                        "type": "string",
                                        "description": "User's preferred password, only if changing it."
                                    },
                                    "user[password_confirmation]": {
                                        "type": "string",
                                        "description": "Confirmation of user's preferred password, only if changing it."
                                    },
                                    "user[profile][description]": {
                                        "type": "string",
                                        "description": "User's profile description or bio text."
                                    },
                                    "user[title]": {
                                        "type": "string",
                                        "description": "User's work title or position name."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["user[profile][gender]"],
                                "properties": {
                                    "user[profile][gender]": {
                                        "type": "string",
                                        "description": "User's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "user[email]": {
                                        "type": "string",
                                        "description": "User's email address."
                                    },
                                    "user[first_name]": {
                                        "type": "string",
                                        "description": "User's first name."
                                    },
                                    "user[last_name]": {
                                        "type": "string",
                                        "description": "User's last name."
                                    },
                                    "user[password]": {
                                        "type": "string",
                                        "description": "User's preferred password, only if changing it."
                                    },
                                    "user[password_confirmation]": {
                                        "type": "string",
                                        "description": "Confirmation of user's preferred password, only if changing it."
                                    },
                                    "user[profile][description]": {
                                        "type": "string",
                                        "description": "User's profile description or bio text."
                                    },
                                    "user[title]": {
                                        "type": "string",
                                        "description": "User's work title or position name."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/users/{user_id}/2fa": {
            "post": {
                "tags": ["Users: Two-Factor Authentication (2FA)"],
                "summary": "Enable a user account to use two-factor authentication (2FA).",
                "description": "\n<p>Registers the user with the two-factor authentication service to enable 2FA\non the account. A successful registration will return a <code>201\nCREATED</code> response to the client.</p>\n",
                "operationId": "post_v3_users_user_id_2fa",
                "parameters": [{
                    "name": "user_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["phone_number[phone_number]"],
                                "properties": {
                                    "phone_number[phone_number]": {
                                        "type": "string",
                                        "description": "The user's mobile phone number. It must be SMS-capable."
                                    },
                                    "phone_number[country_code]": {
                                        "type": "number",
                                        "description": "The user's country code. Defaults to <tt>1</tt>, for United States."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["phone_number[phone_number]"],
                                "properties": {
                                    "phone_number[phone_number]": {
                                        "type": "string",
                                        "description": "The user's mobile phone number. It must be SMS-capable."
                                    },
                                    "phone_number[country_code]": {
                                        "type": "number",
                                        "description": "The user's country code. Defaults to <tt>1</tt>, for United States."
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Users: Two-Factor Authentication (2FA)"],
                "summary": "Disable two-factor authentication (2FA) for the user's account.",
                "description": "\n<p>De-registers the user&#39;s account with the two-factor authentication\nservice and removes the 2FA setting for their Unite US account. Successful\nde-registration will return a <code>204 NO CONTENT</code> response.</p>\n",
                "operationId": "delete_v3_users_user_id_2fa",
                "parameters": [{
                    "name": "user_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/users/{user_id}/2fa/confirmations": {
            "put": {
                "tags": ["Confirming Two-Factor Authentication (2FA) Registration"],
                "summary": "Confirms a user's 2FA registration.",
                "description": "\n<p>Takes a confirmation token from the client and verifies that token with\nAuthy API. A successful confirmation will return a <code>200 SUCCESS</code>\nresponse to the client.</p>\n",
                "operationId": "put_v3_users_user_id_2fa_confirmations",
                "parameters": [{
                    "name": "user_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "token": {
                                        "type": "string",
                                        "description": "The token the user received via SMS."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "token": {
                                        "type": "string",
                                        "description": "The token the user received via SMS."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "post": {
                "tags": ["Confirming Two-Factor Authentication (2FA) Registration"],
                "summary": "Resend two-factor authentication (2FA) token to the user's phone number.",
                "description": "\n<p>Resends a token to the user&#39;s phone number in order to confirm their\nregistration process. A successful resend will return a <code>200\nSUCCESS</code> response to the client.</p>\n",
                "operationId": "post_v3_users_user_id_2fa_confirmations",
                "parameters": [{
                    "name": "user_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "patch": {
                "tags": ["Confirming Two-Factor Authentication (2FA) Registration"],
                "summary": "Confirms a user's 2FA registration.",
                "description": "\n<p>Takes a confirmation token from the client and verifies that token with\nAuthy API. A successful confirmation will return a <code>200 SUCCESS</code>\nresponse to the client.</p>\n",
                "operationId": "patch_v3_users_user_id_2fa_confirmations",
                "parameters": [{
                    "name": "user_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "token": {
                                        "type": "string",
                                        "description": "The token the user received via SMS."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "token": {
                                        "type": "string",
                                        "description": "The token the user received via SMS."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/users/{user_id}/accept-end-user-license-agreements": {
            "post": {
                "tags": ["Users: License Agreements (EULA)"],
                "summary": "Accept license to use software.",
                "description": "\n<p>Accepts the license agreement for the user. A successful registration will\nreturn a <code>201 CREATED</code> response to the client.</p>\n",
                "operationId": "post_v3_users_user_id_accept-end-user-license-agreements",
                "parameters": [{
                    "name": "user_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/users/{user_id}/access-tokens": {
            "get": {
                "tags": ["Users: Active Session Management"],
                "summary": "Returns a list of active API Access Tokens for the current user.",
                "operationId": "get_v3_users_user_id_access-tokens",
                "parameters": [{
                    "name": "user_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Users: Active Session Management"],
                "summary": "Invalidates the selected token, thus destroying that session.",
                "description": "\n<p>Should be used to selectively invalidate active API tokens for the current\nuser. If successful, a <code>204 NO CONTENT</code> response will be\nreturned.</p>\n",
                "operationId": "delete_v3_users_user_id_access-tokens",
                "parameters": [{
                    "name": "user_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "token": {
                                        "type": "string",
                                        "description": "The token to destroy."
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "token": {
                                        "type": "string",
                                        "description": "The token to destroy."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/v3/users/{user_id}/addresses": {
            "get": {
                "tags": ["Users: Addresses"],
                "summary": "Returns a list of addresses attached to the user's account.",
                "operationId": "get_v3_users_user_id_addresses",
                "parameters": [{
                    "name": "user_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                }, {
                    "name": "page",
                    "in": "query",
                    "description": "The page of results to be returned.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "per",
                    "in": "query",
                    "description": "The number of records to be returned per page.",
                    "schema": {
                        "type": "number"
                    }
                }, {
                    "name": "sord",
                    "in": "query",
                    "description": "The order to sort the results.",
                    "schema": {
                        "type": "string",
                        "enum": ["asc", "desc"]
                    }
                }, {
                    "name": "sidx",
                    "in": "query",
                    "description": "The attribute to sort the results by.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        },
        "/widgets/assistance-requests": {
            "get": {
                "tags": ["Widgets: Assistance Requests"],
                "summary": "Retrieve the assistance request form configuration for the group specified by the provided access token.",
                "operationId": "get_widgets_assistance-requests",
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            },
            "post": {
                "tags": ["Widgets: Assistance Requests"],
                "summary": "Submit a new assistance request.",
                "operationId": "post_widgets_assistance-requests",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": ["assistance_request[description]", "assistance_request[requestor][address][address_type]", "assistance_request[requestor][address][city]", "assistance_request[requestor][address][country]", "assistance_request[requestor][address][line_1]", "assistance_request[requestor][address][postal_code]", "assistance_request[requestor][address][state]", "assistance_request[requestor][email_address][email_address]", "assistance_request[requestor][first_name]", "assistance_request[requestor][last_name]", "assistance_request[requestor][phone_number][phone_number]", "assistance_request[service_type_id]"],
                                "properties": {
                                    "assistance_request[requestor][phone_number][phone_number]": {
                                        "type": "string",
                                        "description": "The phone number itself. Minimum 7 digits, only numbers will be stored."
                                    },
                                    "assistance_request[requestor][address][country]": {
                                        "type": "string",
                                        "description": "Country for the address."
                                    },
                                    "assistance_request[requestor][address][state]": {
                                        "type": "string",
                                        "description": "State or province for the address."
                                    },
                                    "assistance_request[requestor][address][postal_code]": {
                                        "type": "string",
                                        "description": "Postal or ZIP code for the address. Minimum 5 characters in length, maximum 15."
                                    },
                                    "assistance_request[requestor][address][city]": {
                                        "type": "string",
                                        "description": "City or town of the address."
                                    },
                                    "assistance_request[requestor][address][line_1]": {
                                        "type": "string",
                                        "description": "Address line 1"
                                    },
                                    "assistance_request[requestor][address][address_type]": {
                                        "type": "string",
                                        "description": "Type of address.",
                                        "enum": ["home", "mailing", "work", "unknown"]
                                    },
                                    "assistance_request[requestor][email_address][email_address]": {
                                        "type": "string",
                                        "description": "A valid email address"
                                    },
                                    "assistance_request[requestor][last_name]": {
                                        "type": "string",
                                        "description": "Requestor's last name."
                                    },
                                    "assistance_request[requestor][first_name]": {
                                        "type": "string",
                                        "description": "Requestor's first name."
                                    },
                                    "assistance_request[service_type_id]": {
                                        "type": "string",
                                        "description": "Identifier of the type of service requested."
                                    },
                                    "assistance_request[description]": {
                                        "type": "string",
                                        "description": "Full-text of the assistance request."
                                    },
                                    "assistance_request[requestor][email]": {
                                        "type": "string",
                                        "description": "Requestor's email address."
                                    },
                                    "assistance_request[requestor][date_of_birth]": {
                                        "type": "number",
                                        "description": "Unix (epoch) timestamp representing the requestor's date of birth."
                                    },
                                    "assistance_request[requestor][gender]": {
                                        "type": "string",
                                        "description": "Requestor's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "assistance_request[requestor][citizenship]": {
                                        "type": "string",
                                        "description": "Requestor's specified citizenship.",
                                        "enum": ["us-citizen", "us-national", "lawful-permanent-resident", "other", "undisclosed"]
                                    },
                                    "assistance_request[requestor][ethnicity]": {
                                        "type": "string",
                                        "description": "Requestor's specified ethnicity.",
                                        "enum": ["hispanic-or-latino", "not-hispanic-or-latino", "undisclosed"]
                                    },
                                    "assistance_request[requestor][marital_status]": {
                                        "type": "string",
                                        "description": "Requestor's specified marital status.",
                                        "enum": ["divorced", "domestic_partner", "married-civil-union", "single/never-married", "separated", "undisclosed", "widowed"]
                                    },
                                    "assistance_request[requestor][race]": {
                                        "type": "string",
                                        "description": "Requestor's specified race.",
                                        "enum": ["american-indian-alaska-native", "asian", "black-african-american", "native-hawaiian-or-pacific-islander", "other-race", "undisclosed", "white"]
                                    },
                                    "assistance_request[requestor][email_address][is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this email address the primary one for the requestor."
                                    },
                                    "assistance_request[requestor][preferred_first_name]": {
                                        "type": "string",
                                        "description": "Requestor's preferred first name."
                                    },
                                    "assistance_request[requestor][title]": {
                                        "type": "string",
                                        "description": "Requestor's title.",
                                        "enum": ["Mr.", "Miss", "Mrs.", "Ms.", "Dr."]
                                    },
                                    "assistance_request[requestor][middle_name_initial]": {
                                        "type": "string",
                                        "description": "Requestor's middle name or initial."
                                    },
                                    "assistance_request[requestor][suffix]": {
                                        "type": "string",
                                        "description": "Requestor's suffix.",
                                        "enum": ["Jr.", "Sr.", "III", "IV", "V", "Esq.", "Ph.D"]
                                    },
                                    "assistance_request[requestor][address][line_2]": {
                                        "type": "string",
                                        "description": "Additional address details, ex. apartment, suite, etc."
                                    },
                                    "assistance_request[requestor][address][is_mailing_address]": {
                                        "type": "boolean",
                                        "description": "Is this a mailing address."
                                    },
                                    "assistance_request[requestor][phone_number][is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this phone number the requestor's primary requestor number."
                                    },
                                    "assistance_request[requestor][phone_number][phone_type]": {
                                        "type": "string",
                                        "description": "Type of phone number.",
                                        "enum": ["mobile", "home", "work", "fax", "unknown"]
                                    },
                                    "assistance_request[requestor][phone_number][can_sms]": {
                                        "type": "boolean",
                                        "description": "Can this phone number receive SMS?"
                                    },
                                    "assistance_request[requestor][phone_number][country_code]": {
                                        "type": "string",
                                        "description": "Country code for the phone number. Defaults to <tt>1</tt>, if not specified."
                                    },
                                    "assistance_request[requestor][military][affiliation]": {
                                        "type": "string",
                                        "description": "Military affiliation",
                                        "enum": ["military_member_or_veteran", "spouse", "widow", "family_member", "caregiver", "prefer_not_to_disclose"]
                                    },
                                    "assistance_request[requestor][military][current_status]": {
                                        "type": "string",
                                        "description": "Current military status",
                                        "enum": ["active_duty", "national_guard", "reserve", "retiree", "veteran", "prefer_not_to_disclose"]
                                    },
                                    "assistance_request[requestor][military][currently_transitioning]": {
                                        "type": "string",
                                        "description": "Is the requestor currently transitioning?",
                                        "enum": ["yes_12mos_before", "yes_12mos_after", "no", "prefer_not_to_disclose"]
                                    },
                                    "assistance_request[requestor][military][at_least_one_day_active_duty]": {
                                        "type": "string",
                                        "description": "Has at least one day of active duty outside of basic training?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "assistance_request[requestor][military][branch]": {
                                        "type": "string",
                                        "description": "Branch of service",
                                        "enum": ["air_force", "army", "coast_guard", "marines", "navy", "prefer_not_to_disclose"]
                                    },
                                    "assistance_request[requestor][military][service_era]": {
                                        "type": "string",
                                        "description": "Service era",
                                        "enum": ["post_911", "persian_gulf", "post_vietnam", "vietnam", "post_korean", "korean_war", "pre_korean", "ww2", "merchant_marine", "ww1", "prefer_not_to_disclose"]
                                    },
                                    "assistance_request[requestor][military][entry_date]": {
                                        "type": "number",
                                        "description": "Date of entry"
                                    },
                                    "assistance_request[requestor][military][exit_date]": {
                                        "type": "number",
                                        "description": "Date of exit"
                                    },
                                    "assistance_request[requestor][military][deployed]": {
                                        "type": "string",
                                        "description": "Deployed?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "assistance_request[requestor][military][deployment_starts_at]": {
                                        "type": "number",
                                        "description": "Deployment start date"
                                    },
                                    "assistance_request[requestor][military][deployment_ends_at]": {
                                        "type": "number",
                                        "description": "Deployment end date"
                                    },
                                    "assistance_request[requestor][military][discharge_type]": {
                                        "type": "string",
                                        "description": "Discharge type",
                                        "enum": ["honorable", "general", "other_than_honorable", "bad_conduct", "dishonorable", "uncharacterized", "other", "prefer_not_to_disclose"]
                                    },
                                    "assistance_request[requestor][military][discharged_due_to_disability]": {
                                        "type": "string",
                                        "description": "Discharged or retired from military service for a disability incurred in the line of duty?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "assistance_request[requestor][military][service_connected_disability]": {
                                        "type": "string",
                                        "description": "Has VA-rated Service-Connected Disability?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "assistance_request[requestor][military][service_connected_disability_rating]": {
                                        "type": "string",
                                        "description": "Service-Connected Disability Rating",
                                        "enum": ["0", "10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "prefer_not_to_disclose"]
                                    },
                                    "assistance_request[requestor][military][proof_of_veteran_status]": {
                                        "type": "string",
                                        "description": "Have proof of veteran status?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "assistance_request[requestor][military][proof_type]": {
                                        "type": "string",
                                        "description": "Proof type",
                                        "enum": ["dd214", "va_id", "statement_of_service", "retiree_id", "drivers_license", "military_id", "other", "prefer_not_to_disclose"]
                                    },
                                    "assistance_request[requestor][form_response][form_id]": {
                                        "type": "string",
                                        "description": "The identifier of the assistance request form."
                                    },
                                    "assistance_request[requestor][form_response][data]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "assistance_request[consent][signature_image]": {
                                        "type": "string",
                                        "description": "Base64 of the signature image"
                                    }
                                }
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "required": ["assistance_request[description]", "assistance_request[requestor][address][address_type]", "assistance_request[requestor][address][city]", "assistance_request[requestor][address][country]", "assistance_request[requestor][address][line_1]", "assistance_request[requestor][address][postal_code]", "assistance_request[requestor][address][state]", "assistance_request[requestor][email_address][email_address]", "assistance_request[requestor][first_name]", "assistance_request[requestor][last_name]", "assistance_request[requestor][phone_number][phone_number]", "assistance_request[service_type_id]"],
                                "properties": {
                                    "assistance_request[requestor][phone_number][phone_number]": {
                                        "type": "string",
                                        "description": "The phone number itself. Minimum 7 digits, only numbers will be stored."
                                    },
                                    "assistance_request[requestor][address][country]": {
                                        "type": "string",
                                        "description": "Country for the address."
                                    },
                                    "assistance_request[requestor][address][state]": {
                                        "type": "string",
                                        "description": "State or province for the address."
                                    },
                                    "assistance_request[requestor][address][postal_code]": {
                                        "type": "string",
                                        "description": "Postal or ZIP code for the address. Minimum 5 characters in length, maximum 15."
                                    },
                                    "assistance_request[requestor][address][city]": {
                                        "type": "string",
                                        "description": "City or town of the address."
                                    },
                                    "assistance_request[requestor][address][line_1]": {
                                        "type": "string",
                                        "description": "Address line 1"
                                    },
                                    "assistance_request[requestor][address][address_type]": {
                                        "type": "string",
                                        "description": "Type of address.",
                                        "enum": ["home", "mailing", "work", "unknown"]
                                    },
                                    "assistance_request[requestor][email_address][email_address]": {
                                        "type": "string",
                                        "description": "A valid email address"
                                    },
                                    "assistance_request[requestor][last_name]": {
                                        "type": "string",
                                        "description": "Requestor's last name."
                                    },
                                    "assistance_request[requestor][first_name]": {
                                        "type": "string",
                                        "description": "Requestor's first name."
                                    },
                                    "assistance_request[service_type_id]": {
                                        "type": "string",
                                        "description": "Identifier of the type of service requested."
                                    },
                                    "assistance_request[description]": {
                                        "type": "string",
                                        "description": "Full-text of the assistance request."
                                    },
                                    "assistance_request[requestor][email]": {
                                        "type": "string",
                                        "description": "Requestor's email address."
                                    },
                                    "assistance_request[requestor][date_of_birth]": {
                                        "type": "number",
                                        "description": "Unix (epoch) timestamp representing the requestor's date of birth."
                                    },
                                    "assistance_request[requestor][gender]": {
                                        "type": "string",
                                        "description": "Requestor's specified gender.",
                                        "enum": ["male", "female", "undisclosed", "non-binary", "other"]
                                    },
                                    "assistance_request[requestor][citizenship]": {
                                        "type": "string",
                                        "description": "Requestor's specified citizenship.",
                                        "enum": ["us-citizen", "us-national", "lawful-permanent-resident", "other", "undisclosed"]
                                    },
                                    "assistance_request[requestor][ethnicity]": {
                                        "type": "string",
                                        "description": "Requestor's specified ethnicity.",
                                        "enum": ["hispanic-or-latino", "not-hispanic-or-latino", "undisclosed"]
                                    },
                                    "assistance_request[requestor][marital_status]": {
                                        "type": "string",
                                        "description": "Requestor's specified marital status.",
                                        "enum": ["divorced", "domestic_partner", "married-civil-union", "single/never-married", "separated", "undisclosed", "widowed"]
                                    },
                                    "assistance_request[requestor][race]": {
                                        "type": "string",
                                        "description": "Requestor's specified race.",
                                        "enum": ["american-indian-alaska-native", "asian", "black-african-american", "native-hawaiian-or-pacific-islander", "other-race", "undisclosed", "white"]
                                    },
                                    "assistance_request[requestor][email_address][is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this email address the primary one for the requestor."
                                    },
                                    "assistance_request[requestor][preferred_first_name]": {
                                        "type": "string",
                                        "description": "Requestor's preferred first name."
                                    },
                                    "assistance_request[requestor][title]": {
                                        "type": "string",
                                        "description": "Requestor's title.",
                                        "enum": ["Mr.", "Miss", "Mrs.", "Ms.", "Dr."]
                                    },
                                    "assistance_request[requestor][middle_name_initial]": {
                                        "type": "string",
                                        "description": "Requestor's middle name or initial."
                                    },
                                    "assistance_request[requestor][suffix]": {
                                        "type": "string",
                                        "description": "Requestor's suffix.",
                                        "enum": ["Jr.", "Sr.", "III", "IV", "V", "Esq.", "Ph.D"]
                                    },
                                    "assistance_request[requestor][address][line_2]": {
                                        "type": "string",
                                        "description": "Additional address details, ex. apartment, suite, etc."
                                    },
                                    "assistance_request[requestor][address][is_mailing_address]": {
                                        "type": "boolean",
                                        "description": "Is this a mailing address."
                                    },
                                    "assistance_request[requestor][phone_number][is_primary]": {
                                        "type": "boolean",
                                        "description": "Is this phone number the requestor's primary requestor number."
                                    },
                                    "assistance_request[requestor][phone_number][phone_type]": {
                                        "type": "string",
                                        "description": "Type of phone number.",
                                        "enum": ["mobile", "home", "work", "fax", "unknown"]
                                    },
                                    "assistance_request[requestor][phone_number][can_sms]": {
                                        "type": "boolean",
                                        "description": "Can this phone number receive SMS?"
                                    },
                                    "assistance_request[requestor][phone_number][country_code]": {
                                        "type": "string",
                                        "description": "Country code for the phone number. Defaults to <tt>1</tt>, if not specified."
                                    },
                                    "assistance_request[requestor][military][affiliation]": {
                                        "type": "string",
                                        "description": "Military affiliation",
                                        "enum": ["military_member_or_veteran", "spouse", "widow", "family_member", "caregiver", "prefer_not_to_disclose"]
                                    },
                                    "assistance_request[requestor][military][current_status]": {
                                        "type": "string",
                                        "description": "Current military status",
                                        "enum": ["active_duty", "national_guard", "reserve", "retiree", "veteran", "prefer_not_to_disclose"]
                                    },
                                    "assistance_request[requestor][military][currently_transitioning]": {
                                        "type": "string",
                                        "description": "Is the requestor currently transitioning?",
                                        "enum": ["yes_12mos_before", "yes_12mos_after", "no", "prefer_not_to_disclose"]
                                    },
                                    "assistance_request[requestor][military][at_least_one_day_active_duty]": {
                                        "type": "string",
                                        "description": "Has at least one day of active duty outside of basic training?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "assistance_request[requestor][military][branch]": {
                                        "type": "string",
                                        "description": "Branch of service",
                                        "enum": ["air_force", "army", "coast_guard", "marines", "navy", "prefer_not_to_disclose"]
                                    },
                                    "assistance_request[requestor][military][service_era]": {
                                        "type": "string",
                                        "description": "Service era",
                                        "enum": ["post_911", "persian_gulf", "post_vietnam", "vietnam", "post_korean", "korean_war", "pre_korean", "ww2", "merchant_marine", "ww1", "prefer_not_to_disclose"]
                                    },
                                    "assistance_request[requestor][military][entry_date]": {
                                        "type": "number",
                                        "description": "Date of entry"
                                    },
                                    "assistance_request[requestor][military][exit_date]": {
                                        "type": "number",
                                        "description": "Date of exit"
                                    },
                                    "assistance_request[requestor][military][deployed]": {
                                        "type": "string",
                                        "description": "Deployed?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "assistance_request[requestor][military][deployment_starts_at]": {
                                        "type": "number",
                                        "description": "Deployment start date"
                                    },
                                    "assistance_request[requestor][military][deployment_ends_at]": {
                                        "type": "number",
                                        "description": "Deployment end date"
                                    },
                                    "assistance_request[requestor][military][discharge_type]": {
                                        "type": "string",
                                        "description": "Discharge type",
                                        "enum": ["honorable", "general", "other_than_honorable", "bad_conduct", "dishonorable", "uncharacterized", "other", "prefer_not_to_disclose"]
                                    },
                                    "assistance_request[requestor][military][discharged_due_to_disability]": {
                                        "type": "string",
                                        "description": "Discharged or retired from military service for a disability incurred in the line of duty?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "assistance_request[requestor][military][service_connected_disability]": {
                                        "type": "string",
                                        "description": "Has VA-rated Service-Connected Disability?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "assistance_request[requestor][military][service_connected_disability_rating]": {
                                        "type": "string",
                                        "description": "Service-Connected Disability Rating",
                                        "enum": ["0", "10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "prefer_not_to_disclose"]
                                    },
                                    "assistance_request[requestor][military][proof_of_veteran_status]": {
                                        "type": "string",
                                        "description": "Have proof of veteran status?",
                                        "enum": ["yes", "no", "prefer_not_to_disclose"]
                                    },
                                    "assistance_request[requestor][military][proof_type]": {
                                        "type": "string",
                                        "description": "Proof type",
                                        "enum": ["dd214", "va_id", "statement_of_service", "retiree_id", "drivers_license", "military_id", "other", "prefer_not_to_disclose"]
                                    },
                                    "assistance_request[requestor][form_response][form_id]": {
                                        "type": "string",
                                        "description": "The identifier of the assistance request form."
                                    },
                                    "assistance_request[requestor][form_response][data]": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "assistance_request[consent][signature_image]": {
                                        "type": "string",
                                        "description": "Base64 of the signature image"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "ok",
                        "content": {}
                    }
                }
            }
        }
    },
    "components": {}
}